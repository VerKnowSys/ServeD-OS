#!/bin/sh


build_base () {
    ${RM_BIN} -f "${LOG_OUTPUT}"
    ${TOUCH_BIN} "${LOG_OUTPUT}"
    permnote "Process started for OS version: ${SYSTEM_VERSION_MAJOR}, architecture: ${ARCH}, timestamp: @${TIMESTAMP}"

    # _branch="$(echo "${CURRENT_BRANCH}" | ${TR_BIN} '/' '-' 2>/dev/null)"
    _common_bare_repo="${WORKSTATION_USER}@${HOSTADDR_GW}:${WORKSTATION_REPO_CACHED}"

    permnote "${SYSTEM_TYPE} version: ${VERSION}"
    permnote "Build repository: ${_common_bare_repo}"

    ${RM_BIN} -f /etc/src.conf /etc/make.conf
    ${INSTALL_BIN} -v \
        "${SERVED_REPO}/etc/src.conf" \
        "/etc/src.conf" && \
    ${INSTALL_BIN} -v \
        "${SERVED_REPO}/etc/make.conf" \
        "/etc/make.conf" && \
        permnote "Installed: /etc/src.conf, /etc/make.conf"

    ${MKDIR_BIN} -p "/${LAMBDA}/src" "/${LAMBDA}/obj" "/tmp"
    if [ -z "${DONT_BUILD_WORLD}" ]; then
        printf '%s\n%s\n%s\n%s\n' \
            "# ServeD-build-host - Sofin ram-disk configuration:" \
            "tmpfs   /tmp        tmpfs   rw,mode=777     0 0" \
            "tmpfs   /${LAMBDA}/src   tmpfs   rw,mode=777     0 0" \
            "tmpfs   /${LAMBDA}/obj   tmpfs   rw,mode=777     0 0" \
             > /etc/fstab.svd && \
            ${INSTALL_BIN} -v /etc/fstab.svd /etc/fstab && \
            permnote "RAM-disk fstab setup complete."

        permnote "(re)Mounting tmpfs under: /${LAMBDA}/src, /${LAMBDA}/obj and /tmp"
        ${UMOUNT_BIN} -f "/${LAMBDA}/src" >/dev/null
        ${UMOUNT_BIN} -f "/${LAMBDA}/obj" >/dev/null

        ${MOUNT_BIN} "/${LAMBDA}/src" && permnote "Mounted: /${LAMBDA}/src"
        ${MOUNT_BIN} "/${LAMBDA}/obj" && permnote "Mounted: /${LAMBDA}/obj"
    else
        echo
        echo "NOTE:"
        echo "  Leaving tmpfs mounts intact."
        echo "Continuation-build detected (DONT_BUILD_WORLD is defined with value: ${DONT_BUILD_WORLD}). Continuing"
        echo
    fi

    _build_dir="/${LAMBDA}/src/${SYSTEM_VERSION_MAJOR}"
    permnote "Syncing os-branch: ${CURRENT_BRANCH} to: ${_build_dir}"
    ${GIT_BIN} clone \
        --progress \
        --depth 1 \
        --single-branch \
        --branch "${CURRENT_BRANCH}" \
        --jobs "${PARALLEL_JOBS}" \
        "${_common_bare_repo}" \
        "${_build_dir}"

    cd "${_build_dir}" || exit 106
    test -n "${VERSION}" || exit 107
    test -n "${ARCH}" || exit 108
    test -n "${SYSTEM_TYPE}" || exit 109

    _new_boot_env="${SYSTEM_TYPE}-v${VERSION}-${ARCH}"
    _default_boot_dev="$(boot_device_name)"
    test -n "${_default_boot_dev}" || exit 112

    case "${ARCH}" in
        arm|arm64)
            test -f "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}-RPI2" || exit 110
            ${INSTALL_BIN} -v \
                "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}-RPI2" \
                "sys/${ARCH}/conf/${SYSTEM_KERNEL}" || exit 111
            ;;

        x86_64|amd64)
            # NOTE: overriding x86_64 for architecture used by build system
            ARCH="amd64"
            _new_boot_env="${SYSTEM_TYPE}-v${VERSION}-${ARCH}"
            test -f "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}" || exit 110

            ${INSTALL_BIN} -v \
                "${SERVED_REPO}/kernel/${SYSTEM_KERNEL}-${SYSTEM_VERSION_MAJOR}" \
                "sys/${ARCH}/conf/${SYSTEM_KERNEL}" || exit 111
            ;;

    esac

    ${BEADM_BIN} create "${_new_boot_env}" && \
        permnote "Created new boot environment: ${_new_boot_env}"

    DESTBASE="${SHARED_DIR}/${_new_boot_env}"
    ${BEADM_BIN} mount "${_new_boot_env}" "${DESTBASE}" && \
        permnote "Mounted new environment: ${_new_boot_env}, to destination base: ${DESTBASE}"

    # # export libucl:
    # permnote "Exporting UCL as regular OS library"
    # ${SED_BIN} -i '' -e 's/PRIVATELIB=.*$//' lib/libucl/Makefile 2>> "${LOG_OUTPUT}"
    # ${PATCH_BIN} -p0 -f \
    #     < "${SERVED_REPO}/src/patches/export_ucl.patch" \
    #     2>> "${LOG_OUTPUT}"

    if [ -z "${DONT_BUILD_WORLD}" ]; then
        permnote "Building world v${VERSION}"
        ${MAKE_BIN} \
            -s buildworld \
            -j "${PARALLEL_JOBS}" \
            TARGET="${ARCH}" \
            TARGET_ARCH="${ARCH}" \
            DESTDIR="${DESTBASE}" \
            MAKEOBJDIRPREFIX="/${LAMBDA}/obj" \
            FORMATS="${DOC_FORMATS}" \
            DOC_LANG="${LANG}" \
            NO_CLEAN=1 \
            NO_KERNELCLEAN=1 \
            >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" || exit 119
    fi

    permnote "Building kernel ${SYSTEM_KERNEL}"
    ${MAKE_BIN} \
        -s buildkernel \
        -j "${PARALLEL_JOBS}" \
        TARGET="${ARCH}" \
        TARGET_ARCH="${ARCH}" \
        DESTDIR="${DESTBASE}" \
        MAKEOBJDIRPREFIX="/${LAMBDA}/obj" \
        FORMATS="${DOC_FORMATS}" \
        DOC_LANG="${LANG}" \
        NO_CLEAN=1 \
        NO_KERNELCLEAN=1 \
        2>> "${LOG_OUTPUT}" || exit 120

    permnote "Installing kernel ${SYSTEM_KERNEL}"
    ${MAKE_BIN} \
        -s installkernel \
        TARGET="${ARCH}" \
        TARGET_ARCH="${ARCH}" \
        DESTDIR="${DESTBASE}" \
        MAKEOBJDIRPREFIX="/${LAMBDA}/obj" \
        FORMATS="${DOC_FORMATS}" \
        DOC_LANG="${LANG}" \
        NO_CLEAN=1 \
        NO_KERNELCLEAN=1 \
        2>> "${LOG_OUTPUT}" || exit 121

    if [ -z "${DONT_BUILD_WORLD}" ]; then
        ${RM_BIN} -rf /var/tmp/temproot

        permnote "Merging Pre-buildworld configuration"
        ${MERGEMASTER_BIN} -p -a 2>> "${LOG_OUTPUT}"

        permnote "Installing world to: ${DESTBASE}"
        ${MAKE_BIN} \
            -s installworld \
            TARGET="${ARCH}" \
            TARGET_ARCH="${ARCH}" \
            DESTDIR="${DESTBASE}" \
            MAKEOBJDIRPREFIX="/${LAMBDA}/obj" \
            FORMATS="${DOC_FORMATS}" \
            DOC_LANG="${LANG}" \
            NO_CLEAN=1 \
            NO_KERNELCLEAN=1 \
            >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" && \
            permnote "Installed"

        permnote "Merging configuration in: ${DESTBASE}"
        ${MERGEMASTER_BIN} -P -a \
            -D "${DESTBASE}" \
            >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" && \
            permnote "Merged"

        permnote "Cleaning old dirs and files under: ${DESTBASE}"
        ${YES_BIN} | ${MAKE_BIN} delete-old delete-old-libs \
            TARGET="${ARCH}" \
            TARGET_ARCH="${ARCH}" \
            DESTDIR="${DESTBASE}" \
            MAKEOBJDIRPREFIX="/${LAMBDA}/obj" \
            FORMATS="${DOC_FORMATS}" \
            DOC_LANG="${LANG}" \
            NO_CLEAN=1 \
            NO_KERNELCLEAN=1 \
            >> "${LOG_OUTPUT}" 2>> "${LOG_OUTPUT}" && \
            permnote "Cleaned"
    fi

    permnote "Removing sources, debug and other cache files before ZFS sendâ€¦"
    ${RM_BIN} -rf "${DESTBASE}/COPYRIGHT" "${DESTBASE}/.profile" "${DESTBASE}/mnt" "${DESTBASE}/proc" "${DESTBASE}/media" "${DESTBASE}/sys"
    cd /
    sync
    # ${GPART_BIN} bootcode \
    #     -b "${DESTBASE}/boot/pmbr" \
    #     -p "${DESTBASE}/boot/gptzfsboot" \
    #     -i 1 \
    #     "${_default_boot_dev}" && \
    #     permnote "Boot code updated for: ${_new_boot_env}"

    ${BEADM_BIN} umount -f "${_new_boot_env}" && \
        permnote "Unmounted boot environment: ${_new_boot_env}"
    # ${BEADM_BIN} activate "${_new_boot_env}" && \
        # permnote "Commited and activated new boot environment: ${_new_boot_env}"

    NEW_RELEASE="${ZPOOL}/ROOT/${_new_boot_env}@v${VERSION}"
    NEW_BOOT_ORIGIN_FILE="${ARCHIVE_SNAPSHOTS_DIR}/${SYSTEM_TYPE}-v${VERSION}-${ARCH}${ZFSX_EXT}"
    ${ZFS_BIN} snapshot "${NEW_RELEASE}" && \
        permnote "Done release snapshot: ${NEW_RELEASE}"

    ${MKDIR_BIN} \
        -p "${ARCHIVE_SNAPSHOTS_DIR}" \
        2>> "${LOG_OUTPUT}"

    ${ZFS_BIN} send ${DEFAULT_SNAPSHOT_SEND_OPTS} \
        "${NEW_RELEASE}" | ${XZ_BIN} ${DEFAULT_XZ_OPTS} \
        > "${NEW_BOOT_ORIGIN_FILE}" && \
        permnote "Sent release snapshot: ${NEW_RELEASE}, to file: ${NEW_BOOT_ORIGIN_FILE}"
    ${CHMOD_BIN} 600 "${HOME_DIR}/.ssh"
    ${CHMOD_BIN} a+r "${NEW_BOOT_ORIGIN_FILE}"

    permnote "Uploading: $(distn "${SCP_BIN} -4 -B \"${NEW_BOOT_ORIGIN_FILE}\" \"${DESTINATION}\"")"
    ${SCP_BIN} -4 -B \
        "${NEW_BOOT_ORIGIN_FILE}" \
        "${DESTINATION}" && \
        permnote "Uploaded release snapshot file: ${NEW_BOOT_ORIGIN_FILE} to: ${DESTINATION}"

    echo "Build-Base is now complete."
}

#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#

reset

set -e
. build.env


no_vks_auth () {
    echo "Local private SSH RSA key file is required: ${HOME}/.ssh/${SSH_IDENTITY_FILE}"
    echo "Generate it via 'ssh-keygen -b4096 && mv ~/.ssh/id_rsa ~/.ssh/${SSH_IDENTITY_FILE}' first!"
    exit 101
}
test -f "${HOME}/.ssh/${SSH_IDENTITY_FILE}" || no_vks_auth
${CHMOD_BIN} 600 "${HOME}/.ssh/${SSH_IDENTITY_FILE}"

echo "Cleaning previous entries from ~/.ssh/known_hosts"
${SED_BIN} -i '' -e "/^xhbh-.*,192.168.*$/ d" "${HOME}/.ssh/known_hosts" 2>/dev/null

${GREP_BIN} "${HOSTADDR_NAME}" "${HOME}/.ssh/config" >/dev/null 2>&1
if [ "${?}" != "0" ]; then
    echo "Adding SSH entry: 'Host ${HOSTADDR_NAME} … hostname ${HOSTADDR_IP}'  to: ${HOME}/.ssh/config"
    printf "\n%s\n%s\n%s\n" \
        "host ${HOSTADDR_NAME}" \
        "user root" \
        "hostname ${HOSTADDR_IP}" \
        >> "${HOME}/.ssh/config"
fi

echo
echo "Create home dataset: ${HOME_DIR}, dataset and switch as new default"
${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
    "${ZFS_BIN} list '${ZPOOL}${HOME_DIR}' >/dev/null 2>&1 || ${ZFS_BIN} create -o mountpoint=none \
        -o casesensitivity=sensitive \
        -o readonly=on \
        -o utf8only=on \
        -o devices=off \
        -o dedup=off \
        -o checksum=fletcher4 \
        -o atime=off \
        -o aclmode=discard \
        -o exec=off \
        -o canmount=off \
        -o compression=lz4 \
        ${ZPOOL}${HOME_DIR}; \
    ${ZFS_BIN} list '${ZPOOL}${HOME_DIR}/root' >/dev/null 2>&1 || ${ZFS_BIN} create \
        -o mountpoint=${HOME_DIR} \
        -o readonly=off \
        -o utf8only=on \
        -o devices=off \
        -o exec=on \
        -o canmount=on \
        ${ZPOOL}${HOME_DIR}/root; \
    ${MKDIR_BIN} -p ${HOME_DIR}/.ssh ${CACHE_DIR}; \
    ${PW_BIN} user mod root -d ${HOME_DIR}; \
    echo 'Cleanup…'; \
    ${RM_BIN} -rf /.profile /.cshrc /root /mnt /media /proc /COPYRIGHT /sys
    " && echo "Created and switched home dir to: ${ZPOOL}${HOME_DIR}"

echo 'Installing local ED25519 SSH key…'
${SCP_BIN} \
    "${HOME}/.ssh/id_ed25519.pub" \
    "${ADMIN_USER}@${HOSTADDR_NAME}:${HOME_DIR}/.ssh/authorized_keys"

echo 'Installing remote ED25519 SSH access key…'
${SCP_BIN} \
    "${HOME}/.ssh/${SSH_IDENTITY_FILE}" \
    "${ADMIN_USER}@${HOSTADDR_NAME}:${HOME_DIR}/.ssh/${SSH_IDENTITY_FILE}"

echo
echo
echo "Release base: ${SYSTEM_VERSION}…"
for _dataset_origin in Software Services; do

    ${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" "${ZFS_BIN} list ${ZPOOL}/${_dataset_origin}" >/dev/null 2>&1
    if [ "${?}" != "0" ]; then
        echo "Creating origin base: ${ZPOOL}/${_dataset_origin}"
        ${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
            "${ZFS_BIN} create \
            -o mountpoint=none \
            -o casesensitivity=sensitive \
            -o readonly=on \
            -o utf8only=on \
            -o devices=off \
            -o dedup=off \
            -o checksum=fletcher4 \
            -o atime=off \
            -o aclmode=discard \
            -o exec=off \
            -o canmount=off \
            -o compression=lz4 \
            ${ZPOOL}/${_dataset_origin}"
    fi

    ${SSH_BIN} \
        "${ADMIN_USER}@${HOSTADDR_NAME}" \
        "${ZFS_BIN} list ${ZPOOL}/${_dataset_origin}/root" >/dev/null 2>&1
    if [ "${?}" != "0" ]; then
        echo "Creating ${ZPOOL}/${_dataset_origin} ${ORIGIN}"
        ${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
            "${ZFS_BIN} create \
            -o readonly=off \
            -o canmount=on \
            -o exec=on \
            -o mountpoint=/${_dataset_origin} \
            ${ZPOOL}/${_dataset_origin}/root"

        _software_origin_file="${_dataset_origin}-${ORIGIN}${ZFSX_EXT}"
        echo "Storing origin snapshot to file: ${_software_origin_file}"
        ${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
            "${ZFS_BIN} snapshot \
            ${ZPOOL}/${_dataset_origin}/root@${ORIGIN}"

        echo "Send origin to file: ${_software_origin_file}"
        ${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
            "${ZFS_BIN} send \
            -D -L -e -p -v \
            ${ZPOOL}/${_dataset_origin}/root@${ORIGIN} \
            | ${XZ_BIN} --threads=${DEFAULT_XZ_OPTS} > ${CACHE_DIR}/${_software_origin_file}"

        # echo "Push origin to remote"
        ${MKDIR_BIN} -p "./Origins/${SYSTEM_VERSION}"
        ${SCP_BIN} \
            "${ADMIN_USER}@${HOSTADDR_NAME}:${CACHE_DIR}/${_software_origin_file}" \
            "Origins/${SYSTEM_VERSION}/"
    fi
done

${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
    "${ZFS_BIN} list '${ZPOOL}${SHARED_DIR}' || ${ZFS_BIN} create -o mountpoint=${SHARED_DIR} ${ZPOOL}${SHARED_DIR}; \
    " && echo "Created dataset: ${ZPOOL}${SHARED_DIR}"

${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
    "${ZFS_BIN} list '${ZPOOL}${ARCHIVE_SNAPSHOTS_DIR}' || \
    ${ZFS_BIN} create \
        -p \
        -o mountpoint=${ARCHIVE_SNAPSHOTS_DIR} \
        ${ZPOOL}${ARCHIVE_SNAPSHOTS_DIR}; \
    " && echo "Created dataset for snapshots archive: ${ZPOOL}${ARCHIVE_SNAPSHOTS_DIR}"

echo "Configuring base RC system"
${SCP_BIN} \
    "etc/rc.build.conf" \
    "${ADMIN_USER}@${HOSTADDR_NAME}:/etc/rc.conf"

echo "Setting up static TCP/IP configuration in /etc/rc.conf"
${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
    "${SED_BIN} -i '' -e 's|HOSTADDR_MASK|${HOSTADDR_MASK}|g; s|HOSTADDR_IP|${HOSTADDR_IP}|g; s|HOSTADDR_GW|${HOSTADDR_GW}|g; s|HOSTADDR_NAME|${HOSTADDR_NAME}|g;' /etc/rc.conf"

${SCP_BIN} \
    "etc/loader.build.conf" \
    "${ADMIN_USER}@${HOSTADDR_NAME}:/boot/loader.conf"

echo "Creating projects archive…"
${TAR_BIN} -cJf ".archive-base-projects.tar.xz" \
    "${SERVED_REPO}" \
    "${SOFIN_REPO}" \
    >/dev/null 2>/dev/null

echo "Sending projects archive…"
${SCP_BIN} \
    ".archive-base-projects.tar.xz" \
    "${ADMIN_USER}@${HOSTADDR_NAME}:${CACHE_DIR}/"

echo "Cleaning local archive…"
${RM_BIN} -f \
    ".archive-base-projects.tar.xz"

PREVIOUS="FreeBSD-11.0-amd64"
GIT_VERSION="2.12.0"
ZSH_VERSION="5.3.1"
CCACHE_VERSION="3.3.4"
MC_VERSION="4.8.18-master"

echo "Setting HOME to ${HOME_DIR}, Zsh as default shell, installing base software"
${SSH_BIN} "${ADMIN_USER}@${HOSTADDR_NAME}" \
    "${FETCH_BIN} --no-verify-peer ${CACERT_SOURCE} -o /etc/ssl/cert.pem; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Zsh${ZFSX_EXT} ${SOFIN_BIN_REPO}/${PREVIOUS}/Zsh-${ZSH_VERSION}-${PREVIOUS}${ZFSX_EXT}; ${ZFS_BIN} destroy -r ${ZPOOL}${SOFTWARE_DIR}/root/Zsh; ${XZCAT_BIN} ${CACHE_DIR}/Zsh${ZFSX_EXT} | ${ZFS_BIN} receive -vF ${ZPOOL}${SOFTWARE_DIR}/root/Zsh; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Zsh-common.zfsp ${SOFIN_BIN_REPO}/Common/Zsh-${ZSH_VERSION}.zfsp && ${XZCAT_BIN} ${CACHE_DIR}/Zsh-common.zfsp | ${ZFS_BIN} receive ${ZPOOL}${SERVICES_DIR}/root/Zsh; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Ccache${ZFSX_EXT} ${SOFIN_BIN_REPO}/${PREVIOUS}/Ccache-${CCACHE_VERSION}-${PREVIOUS}${ZFSX_EXT}; ${ZFS_BIN} destroy -r ${ZPOOL}${SOFTWARE_DIR}/root/Ccache; ${XZCAT_BIN} ${CACHE_DIR}/Ccache${ZFSX_EXT} | ${ZFS_BIN} receive -vF ${ZPOOL}${SOFTWARE_DIR}/root/Ccache; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Git${ZFSX_EXT} ${SOFIN_BIN_REPO}/${PREVIOUS}/Git-${GIT_VERSION}-${PREVIOUS}${ZFSX_EXT}; ${ZFS_BIN} destroy -r ${ZPOOL}${SOFTWARE_DIR}/root/Git; ${XZCAT_BIN} ${CACHE_DIR}/Git${ZFSX_EXT} | ${ZFS_BIN} receive ${ZPOOL}${SOFTWARE_DIR}/root/Git; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Git-common.zfsp ${SOFIN_BIN_REPO}/Common/Git-${GIT_VERSION}.zfsp && ${XZCAT_BIN} ${CACHE_DIR}/Git-common.zfsp | ${ZFS_BIN} receive ${ZPOOL}${SERVICES_DIR}/root/Git; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Mc${ZFSX_EXT} ${SOFIN_BIN_REPO}/${PREVIOUS}/Mc-${MC_VERSION}-${PREVIOUS}${ZFSX_EXT}; ${ZFS_BIN} destroy -r ${ZPOOL}${SOFTWARE_DIR}/root/Mc; ${XZCAT_BIN} ${CACHE_DIR}/Mc${ZFSX_EXT} | ${ZFS_BIN} receive -vF ${ZPOOL}${SOFTWARE_DIR}/root/Mc; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Mc-common.zfsp ${SOFIN_BIN_REPO}/Common/Mc-${MC_VERSION}.zfsp && ${XZCAT_BIN} ${CACHE_DIR}/Mc-common.zfsp | ${ZFS_BIN} receive ${ZPOOL}${SERVICES_DIR}/root/Mc; \
    ${MKDIR_BIN} -p ${SERVICES_DIR}/Git/etc/ssl; \
    ${CP_BIN} -v /etc/ssl/cert.pem ${SERVICES_DIR}/Git/etc/ssl/cert.pem; \
    ${SED_BIN} -i '' -e 's|^/bin/tcsh|${DEFAULT_SHELL}|g' /etc/shells; \
    ${CHSH_BIN} -s ${DEFAULT_SHELL} root; \
    ${TAR_BIN} xfJ ${CACHE_DIR}/.archive-base-projects.tar.xz --directory / >/dev/null; \
    cd ${SOFIN_REPO}; \
    bin/install; \
    echo LANG=\"en_GB.UTF-8\" > ${HOME_DIR}/.zshenv; \
    echo LANGUAGE=\"en_GB.UTF-8\" >> ${HOME_DIR}/.zshenv; \
    cd /Projects; \
    ${GIT_BIN} clone https://github.com/vermaden/beadm.git; \
    ${GZIP_BIN} beadm/beadm.1; \
    ${INSTALL_BIN} -v beadm/beadm.1.gz /usr/share/man/man1/; \
    ${INSTALL_BIN} -v beadm/beadm /usr/sbin/beadm; \
    cd ${SERVED_REPO}; \
    ${CP_BIN} -fr shell/ /etc/zsh; \
    ${LN_BIN} -fvs /etc/zsh/zshenv /etc/zshenv; \
    ${LN_BIN} -fvs /etc/zsh/zshrc /etc/zshrc; \
    printf 'Host *.verknowsys.com verknowsys.com\nPort 60022\n\n' > ${HOME_DIR}/.ssh/config; \
    ${SYSCTL_BIN} vfs.zfs.prefetch_disable=1; \
    ${SYSCTL_BIN} hardening.pax.pageexec.status=1; \
    ${SYSCTL_BIN} hardening.pax.mprotect.status=1; \
    ${SYSCTL_BIN} hardening.pax.aslr.status=1; \
    ${SYSCTL_BIN} hardening.pax.disallow_map32bit.status=1; \
    ${ZFS_BIN} set primarycache=none ${ZPOOL}/usr; \
    ${ZFS_BIN} set secondarycache=none ${ZPOOL}/usr; \
    ${ZFS_BIN} set checksum=fletcher4 ${ZPOOL}/usr; \
    ${ZFS_BIN} set recordsize=4k ${ZPOOL}/usr; \
    ${ZFS_BIN} set sync=disabled ${ZPOOL}/usr; \
    ${TOUCH_BIN} ${BUILD_HOST_MARKER}; \
    for _ds in var/mail usr; do ${ZFS_BIN} destroy -r ${ZPOOL}/\${_ds} 2>/dev/null; done; \
    "

echo "Done"
exit

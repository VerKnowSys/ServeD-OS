#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#

reset

. build.env

echo "Preparing dirs…"
${SSH_BIN} root@xh1 \
    "${MKDIR_BIN} -p ${CACHE_DIR} ${HOME_DIR}/.ssh"

no_vks_auth () {
    echo "Local private SSH RSA key file is required: ${HOME}/.ssh/vks.auth"
    echo "Generate it via 'ssh-keygen -b4096' first!"
    exit 101
}
test -f "${HOME}/.ssh/vks.auth" || no_vks_auth

echo 'Installing RSA remote key…'
${SCP_BIN} \
    "${HOME}/.ssh/vks.auth" \
    "root@xh1:${HOME_DIR}/.ssh/vks.auth"

echo 'Installing ED25519 SSH key…'
${SCP_BIN} \
    "${HOME}/.ssh/id_ed25519.pub" \
    "root@xh1:${HOME_DIR}/.ssh/authorized_keys"

for _ds in var/mail usr/src usr/home usr/ports var/audit; do
    ${SSH_BIN} root@xh1 \
        "${ZFS_BIN} destroy -r ${ZPOOL}/${_ds}" 2>/dev/null
done


echo "Release base: ${SYSTEM_VERSION}…"
for _dataset_origin in Software Services User; do

    ${SSH_BIN} root@xh1 "${ZFS_BIN} list ${ZPOOL}/${_dataset_origin}" >/dev/null 2>&1
    if [ "${?}" != "0" ]; then
        echo "Creating origin base: ${ZPOOL}/${_dataset_origin}"
        ${SSH_BIN} root@xh1 \
            "${ZFS_BIN} create \
            -o mountpoint=none \
            -o casesensitivity=sensitive \
            -o readonly=on \
            -o utf8only=on \
            -o devices=off \
            -o dedup=off \
            -o checksum=fletcher4 \
            -o atime=off \
            -o aclmode=discard \
            -o exec=off \
            -o canmount=off \
            -o compression=lz4 \
            ${ZPOOL}/${_dataset_origin}"
    fi

    ${SSH_BIN} root@xh1 "${ZFS_BIN} list ${ZPOOL}/${_dataset_origin}/root" >/dev/null 2>&1
    if [ "${?}" != "0" ]; then
        echo "Creating ${ZPOOL}/${_dataset_origin} ${ORIGIN}"
        ${SSH_BIN} root@xh1 \
            "${ZFS_BIN} create \
            -o readonly=off \
            -o canmount=on \
            -o exec=on \
            -o mountpoint=/${_dataset_origin} \
            ${ZPOOL}/${_dataset_origin}/root"

        _software_origin_file="${_dataset_origin}-${ORIGIN}${ZFSX_EXT}"
        echo "Storing origin snapshot to file: ${_software_origin_file}"
        ${SSH_BIN} root@xh1 \
            "${ZFS_BIN} snapshot \
            ${ZPOOL}/${_dataset_origin}/root@${ORIGIN}"

        echo "Send origin to file: ${_software_origin_file}"
        ${SSH_BIN} root@xh1 \
            "${ZFS_BIN} send \
            -D -L -e -p -v \
            ${ZPOOL}/${_dataset_origin}/root@${ORIGIN} \
            | ${XZ_BIN} --threads=4 > ${CACHE_DIR}/${_software_origin_file}"

        # echo "Push origin to remote"
        ${MKDIR_BIN} -p "./Origins/${SYSTEM_VERSION}"
        ${SCP_BIN} \
            root@xh1:${CACHE_DIR}/${_software_origin_file} \
            Origins/${SYSTEM_VERSION}/
    fi
done

echo "Creating ${SHARED_DIR}"
${SSH_BIN} root@xh1 \
    "${ZFS_BIN} create -o mountpoint=${SHARED_DIR} ${ZPOOL}${SHARED_DIR}; \
    ${ZFS_BIN} create ${ZPOOL}${SHARED_DIR}/${SYSTEM_NAME}-${SYSTEM_VERSION}-${ARCH}; \
    "

echo "Configuring base RC system"
${SCP_BIN} \
    "etc/rc.build.conf" \
    "root@xh1:/etc/rc.conf"

${SCP_BIN} \
    "etc/loader.build.conf" \
    "root@xh1:/boot/loader.conf"

echo "Creating projects archive…"
${TAR_BIN} -cJf ".archive-base-projects.tar.xz" \
    /Projects/ServeD-OS \
    /Projects/Sofin \
    >/dev/null 2>/dev/null

echo "Sending projects archive…"
${SCP_BIN} \
    ".archive-base-projects.tar.xz" \
    "root@xh1:${CACHE_DIR}/"

echo "Cleaning local archive…"
${RM_BIN} -f \
    ".archive-base-projects.tar.xz"

PREVIOUS="FreeBSD-11.0-amd64"
GIT_VERSION="2.12.0"
ZSH_VERSION="5.3.1"
CCACHE_VERSION="3.3.4"
MC_VERSION="4.8.18-master"

echo "Setting HOME to ${HOME_DIR}, Zsh as default shell, installing base software"
${SSH_BIN} root@xh1 \
    "${FETCH_BIN} -o ${CACHE_DIR}/Zsh${ZFSX_EXT} ${SOFIN_BIN_REPO}/${PREVIOUS}/Zsh-${ZSH_VERSION}-${PREVIOUS}${ZFSX_EXT}; ${ZFS_BIN} destroy -r ${ZPOOL}${SOFTWARE_DIR}/root/Zsh; ${XZCAT_BIN} ${CACHE_DIR}/Zsh${ZFSX_EXT} | ${ZFS_BIN} receive -vF ${ZPOOL}${SOFTWARE_DIR}/root/Zsh; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Zsh-common.zfsp ${SOFIN_BIN_REPO}/Common/Zsh-${ZSH_VERSION}.zfsp && ${XZCAT_BIN} ${CACHE_DIR}/Zsh-common.zfsp | ${ZFS_BIN} receive -vF ${ZPOOL}${SERVICES_DIR}/root/Zsh; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Ccache${ZFSX_EXT} ${SOFIN_BIN_REPO}/${PREVIOUS}/Ccache-${CCACHE_VERSION}-${PREVIOUS}${ZFSX_EXT}; ${ZFS_BIN} destroy -r ${ZPOOL}${SOFTWARE_DIR}/root/Ccache; ${XZCAT_BIN} ${CACHE_DIR}/Ccache${ZFSX_EXT} | ${ZFS_BIN} receive -vF ${ZPOOL}${SOFTWARE_DIR}/root/Ccache; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Git${ZFSX_EXT} ${SOFIN_BIN_REPO}/${PREVIOUS}/Git-${GIT_VERSION}-${PREVIOUS}${ZFSX_EXT}; ${ZFS_BIN} destroy -r ${ZPOOL}${SOFTWARE_DIR}/root/Git; ${XZCAT_BIN} ${CACHE_DIR}/Git${ZFSX_EXT} | ${ZFS_BIN} receive -vF ${ZPOOL}${SOFTWARE_DIR}/root/Git; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Git-common.zfsp ${SOFIN_BIN_REPO}/Common/Git-${GIT_VERSION}.zfsp && ${XZCAT_BIN} ${CACHE_DIR}/Git-common.zfsp | ${ZFS_BIN} receive -vF ${ZPOOL}${SERVICES_DIR}/root/Git; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Mc${ZFSX_EXT} ${SOFIN_BIN_REPO}/${PREVIOUS}/Mc-${MC_VERSION}-${PREVIOUS}${ZFSX_EXT}; ${ZFS_BIN} destroy -r ${ZPOOL}${SOFTWARE_DIR}/root/Mc; ${XZCAT_BIN} ${CACHE_DIR}/Mc${ZFSX_EXT} | ${ZFS_BIN} receive -vF ${ZPOOL}${SOFTWARE_DIR}/root/Mc; \
    ${FETCH_BIN} -o ${CACHE_DIR}/Mc-common.zfsp ${SOFIN_BIN_REPO}/Common/Mc-${MC_VERSION}.zfsp && ${XZCAT_BIN} ${CACHE_DIR}/Mc-common.zfsp | ${ZFS_BIN} receive -vF ${ZPOOL}${SERVICES_DIR}/root/Mc; \
    ${MKDIR_BIN} -p ${SERVICES_DIR}/Git/etc/ssl; \
    ${CP_BIN} -v /etc/ssl/cert.pem ${SERVICES_DIR}/Git/etc/ssl/cert.pem; \
    ${SED_BIN} -i '' -e 's|^/bin/tcsh|${DEFAULT_SHELL}|g' /etc/shells; \
    ${CHSH_BIN} -s ${DEFAULT_SHELL} root; \
    ${TAR_BIN} xfJ ${CACHE_DIR}/.archive-base-projects.tar.xz --directory / >/dev/null; \
    ${FETCH_BIN} ${CACERT_SOURCE} -o /etc/ssl/cert.pem 2>/dev/null; \
    cd /Projects/Sofin; \
    bin/install; \
    echo LANG=\"en_GB.UTF-8\" > ${HOME_DIR}/.zshenv; \
    echo LANGUAGE=\"en_GB.UTF-8\" >> ${HOME_DIR}/.zshenv; \
    cd /Projects; \
    ${GIT_BIN} clone https://github.com/vermaden/beadm.git; \
    ${GZIP_BIN} beadm/beadm.1; \
    ${INSTALL_BIN} -v beadm/beadm.1.gz /usr/share/man/man1/; \
    ${INSTALL_BIN} -v beadm/beadm /usr/sbin/beadm; \
    cd ${SERVED_REPO}; \
    ${CP_BIN} -fr shell/ /etc/zsh; \
    ${LN_BIN} -fvs /etc/zsh/zshenv /etc/zshenv; \
    ${LN_BIN} -fvs /etc/zsh/zshrc /etc/zshrc; \
    printf 'Host *.verknowsys.com verknowsys.com\nPort 60022\n\n' > ${HOME_DIR}/.ssh/config; \
    ${SYSCTL_BIN} vfs.zfs.prefetch_disable=1; \
    ${SYSCTL_BIN} hardening.pax.pageexec.status=1; \
    ${SYSCTL_BIN} hardening.pax.mprotect.status=1; \
    ${SYSCTL_BIN} hardening.pax.aslr.status=1; \
    ${SYSCTL_BIN} hardening.pax.disallow_map32bit.status=1; \
    ${ZFS_BIN} set primarycache=none ${ZPOOL}/usr; \
    ${ZFS_BIN} set secondarycache=none ${ZPOOL}/usr; \
    ${ZFS_BIN} set checksum=fletcher4 ${ZPOOL}/usr; \
    ${ZFS_BIN} set recordsize=4k ${ZPOOL}/usr; \
    ${ZFS_BIN} set sync=disabled ${ZPOOL}/usr; \
    test -d /root && ${CP_BIN} -rf /root/* ${HOME_DIR}; \
    ${PW_BIN} user mod root -d ${HOME_DIR}; \
    ${RM_BIN} -rf /media /mnt /proc /root; \
    ${TOUCH_BIN} ${BUILD_HOST_MARKER}; \
    "

echo "Done"
exit

#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#

# load configuration from sofin.conf
readonly CONF_NAME="sofin.conf.sh"
readonly CONF_FILE="/etc/${CONF_NAME}"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
else
    echo "FATAL: No configuration file found: ${CONF_FILE}. Maybe Sofin isn't installed?"
    exit 1
fi


VERSION="0.1.6"
LOG_FILE="/var/log/governor.log"
SERVED_REPO="/var/ServeD-OS"
SOFIN_REPO="/var/sofin"
DEFAULT_ZPOOL="zroot"
DEFAULT_VERSION="10.1"
DEFAULT_WORKER_UID="501"
DEFAULT_QUOTA_LIMIT="5G"
DEFAULT_SENTRY_LIMIT="128M"
DEFAULT_CELLS_LOCATION="/Jails/Prison/Cells"
DEFAULT_SENTRY_LOCATION="/Jails/Prison/Sentry"
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
CELL_IP_ADDRESS_ATTRIBUTE="jail.ip.address"
CELL_OS_VERSION_ATTRIBUTE="jail.os.version"
CELL_ATTRIBUTES_DIR="jail-attributes"
CELL_DOMAINS_DIR="jail-domains"
CELL_WEBCONF_DIR="jail-webconf"
JAIL_CONF_NAME="jail.conf"
JAIL_TRUSS_NAME="jail.truss.log"
JAIL_TRUSS_EXEC_NAME="jail.truss.exec.log"
JAIL_ID_NAME="jail.id"
JAIL_STATUS_NAME="jail.status"
GVR_SCRIPT_NAME="$(${BASENAME_BIN} $0)"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 | ${TAIL_BIN} -n 4 | ${HEAD_BIN} -n 1 | ${AWK_BIN} '{print $2;}')"
DEFAULT_ETC_ARCHIVE="${SERVED_REPO}/jail-utils/etc-jail.tar.xz"
if [ ! -f "${DEFAULT_ETC_ARCHIVE}" ]; then
    error "Sanity check failed: Could not found etc archive: ${DEFAULT_ETC_ARCHIVE}. Governor can't continue"
fi


# This is where all jail settings are put into global scope of script:
set_values () {
    ENTERED_NAME="${1}"
    CELL="${DEFAULT_CELLS_LOCATION}/${ENTERED_NAME}"
    SENTRY="${DEFAULT_SENTRY_LOCATION}/${ENTERED_NAME}"
    debug "Processing CELL: ${CELL}, Sentry: ${SENTRY}"
    JAIL_DOMAINS_DIR="${SENTRY}/${CELL_DOMAINS_DIR}"
    JAIL_CONF_FILE="${SENTRY}/${JAIL_CONF_NAME}"
    JAIL_ATTRIBUTES_DIR="${SENTRY}/${CELL_ATTRIBUTES_DIR}"
    JAIL_NAME="$(${PRINTF_BIN} "${ENTERED_NAME}\n" | ${SED_BIN} 's/\./-/g')"
    JAIL_ID_FILE="${SENTRY}/${JAIL_ID_NAME}"
    JAIL_TRACE_LOG="${SENTRY}/${JAIL_TRUSS_NAME}"
    JAIL_EXEC_LOG="${SENTRY}/${JAIL_TRUSS_EXEC_NAME}"
    DEBUG_COMMAND=""
    DEBUG_EXEC_COMMAND=""
    if [ "${DEBUG}" = "true" ]; then
        DEBUG_COMMAND="${TRUSS_BIN} -o ${JAIL_TRACE_LOG}"
        DEBUG_EXEC_COMMAND="${TRUSS_BIN} -o ${JAIL_EXEC_LOG}"
    fi
    JAIL_VERSION_FILE="${SENTRY}/${CELL_OS_VERSION_ATTRIBUTE}"
    JAIL_ADDRESS_FILE="${SENTRY}/${CELL_IP_ADDRESS_ATTRIBUTE}"
    JAIL_WEBSERVER_CONF_DIR="${SENTRY}/${CELL_WEBCONF_DIR}"
    JAIL_STATUS_FILE="${SENTRY}/${JAIL_STATUS_NAME}"
    JAIL_STATUS_DETAIL=""
    if [ -f "${JAIL_STATUS_FILE}" ]; then
        JAIL_STATUS_DETAIL="$(${CAT_BIN} ${JAIL_STATUS_FILE})"
    fi
    JAIL_STATUS="${red}*off*${gray} ${JAIL_STATUS_DETAIL}${reset}"
    ${JLS_BIN} | ${GREP_BIN} "\ ${JAIL_NAME}\ " > ${LOG_FILE} 2>&1
    if [ "$?" = "0" ]; then
        JAIL_STATUS="${green}*on*${gray} ${JAIL_STATUS_DETAIL}${reset}"
    fi
    debug "Got jail status: ${JAIL_SOURCE}"
    JAIL_VERSION="${DEFAULT_VERSION}"
    if [ -f "${JAIL_VERSION_FILE}" ]; then
        JAIL_VERSION="$(${CAT_BIN} ${JAIL_VERSION_FILE})"
    fi
    debug "Got jail os version: ${JAIL_VERSION}"
    JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${JAIL_VERSION}-${SYSTEM_ARCH}"
    debug "Got jail source: ${JAIL_SOURCE}"
    JAIL_IP="${cyan}no-address${reset}"
    if [ -f "${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESS_ATTRIBUTE}" ]; then
        JAIL_IP="${cyan}$(${CAT_BIN} "${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESS_ATTRIBUTE}")${reset}"
    fi
    debug "Got jail IP: ${JAIL_IP}"
    HOSTNAMES=""
    for hostn in $(${FIND_BIN} ${JAIL_DOMAINS_DIR} -type f 2>${LOG_FILE}); do
        HOSTNAMES="*.$(${BASENAME_BIN} ${hostn}) ${HOSTNAMES}"
    done
    debug "Got jail hostnames: ${HOSTNAMES}"
}


check_cell_name () {
    GIVEN_NAME="${1}"
    NAME="$(${BASENAME_BIN} ${GIVEN_NAME})"
    if [ ! -d "${GIVEN_NAME}" ]; then
        error "Bad jail name: ${NAME}"
    fi
}


jail_status () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} status jail-name"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail hostname given"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    ${PRINTF_BIN} "Name: ${green}${JAIL_NAME}${reset}\n"
    ${PRINTF_BIN} "Hostnames: ${green}${HOSTNAMES}${reset}\n"
    ${PRINTF_BIN} "Interface: ${green}${DEFAULT_INTERFACE}${reset}\n"
    ${PRINTF_BIN} "IPv4: ${JAIL_IP}\n"
    ${PRINTF_BIN} "Status: ${JAIL_STATUS}\n"
    ${PRINTF_BIN} "OS version: ${green}${JAIL_VERSION}${reset}\n\n"
    if [ -d "${JAIL_ATTRIBUTES_DIR}" ]; then
        ${PRINTF_BIN} "Overriden attributes:\n"
        for i in $(${FIND_BIN} ${JAIL_ATTRIBUTES_DIR} -type f); do
            ${PRINTF_BIN} "${cyan}$(${BASENAME_BIN} ${i}): $(${CAT_BIN} ${i})${reset}\n"
        done
        ${PRINTF_BIN} "\n"
    fi
    ${PRINTF_BIN} "Live attributes:\n${cyan}$(${RCTL_BIN} -h jail:${JAIL_NAME} | ${SED_BIN} 's/jail:n1://g' | ${SED_BIN} 's/:deny=/: /g')${reset}\n"
    ${PRINTF_BIN} "\nFull configuration:"
    ${PRINTF_BIN} "${cyan}$(${CAT_BIN} "${JAIL_CONF_FILE}")\n"
}


apply_attributes () {
    debug "Applying attributes from location: ${JAIL_ATTRIBUTES_DIR} for jail: ${JAIL_NAME}"
    ${MKDIR_BIN} -p "${JAIL_DOMAINS_DIR}" "${JAIL_ATTRIBUTES_DIR}" "${JAIL_WEBSERVER_CONF_DIR}"
    cd ${JAIL_ATTRIBUTES_DIR}
    for attribute in $(${LS_BIN}); do
        value="$(${CAT_BIN} ${JAIL_ATTRIBUTES_DIR}/${attribute})"
        ${RCTL_BIN} -a jail:${JAIL_NAME}:${attribute}:deny=${value} >> ${LOG_FILE} 2>&1
        if [ "$?" = "0" ]; then
            note "Overriden attribute: ${attribute} with value: ${value}"
        else
            warn "Wrong attribute: ${red}${attribute}${reset}"
        fi
    done
}


update_sofin () {
    DESTINATION_CELL="${1}"
    if [ -d "${SOFIN_REPO}" ]; then
        note "Updating Sofin from official repository"
        cd ${SOFIN_REPO}
        ${GIT_BIN} stash save "sofin-local-changes-$(date +%F)" >> ${LOG_FILE} 2>&1
        GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull https://github.com/VerKnowSys/sofin.git >> ${LOG_FILE} 2>&1
        PREFIX="${JAIL_SOURCE}" bin/install >> ${LOG_FILE} 2>&1
        ${CP_BIN} "${SOFIN_REPO}/src/${CONF_NAME}" "${DESTINATION_CELL}/etc/"
    else
        note "Installing Sofin installed in system path"
        cd /var
        GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone https://github.com/VerKnowSys/sofin.git >> ${LOG_FILE} 2>&1
        PREFIX="${JAIL_SOURCE}" bin/install >> ${LOG_FILE} 2>&1
        ${CP_BIN} "${SOFIN_REPO}/src/${CONF_NAME}" "${DESTINATION_CELL}/etc/"
    fi
}


check_jail_address () {
    JAIL_ADDRESS="${1}"
    for jail in $(${LS_BIN} ${DEFAULT_SENTRY_LOCATION}); do
        if [ "$(${CAT_BIN} ${DEFAULT_SENTRY_LOCATION}/${jail}/${CELL_IP_ADDRESS_ATTRIBUTE})" = "${JAIL_ADDRESS}" ]; then
            error "Address: ${JAIL_ADDRESS} is already assigned to jail: ${jail}"
        fi
    done
}


jail_create () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} create jail-name.com IP-address fbsd-version net-interface"
        note "fbsd-version -> by default 10.1"
        note "net-interface -> by default first interface with default route (${DEFAULT_INTERFACE})"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail hostname given"
    fi
    JAIL_ADDRESS="${2}"
    if [ "${JAIL_ADDRESS}" = "" ]; then
        note "No ip given"
        usage
        exit 1
    fi
    check_jail_address ${JAIL_ADDRESS}

    JAIL_VERSION="${3}"
    if [ "${JAIL_VERSION}" = "" ]; then
        JAIL_VERSION="${DEFAULT_VERSION}"
    fi
    JAIL_INTERFACE="${4}"
    if [ "${JAIL_INTERFACE}" = "" ]; then
        JAIL_INTERFACE="${DEFAULT_INTERFACE}"
    fi

    set_values "${GIVEN_NAME}"
    note "Creating ZFS dataset"
    ${ZFS_BIN} create -o mountpoint=${CELL} ${DEFAULT_ZPOOL}${CELL} >> ${LOG_FILE} 2>&1
    ${ZFS_BIN} set quota=${DEFAULT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}${CELL} >> ${LOG_FILE} 2>&1
    ${ZFS_BIN} create -o mountpoint=${SENTRY} ${DEFAULT_ZPOOL}${SENTRY} >> ${LOG_FILE} 2>&1
    ${ZFS_BIN} set quota=${DEFAULT_SENTRY_LIMIT} ${DEFAULT_ZPOOL}${SENTRY} >> ${LOG_FILE} 2>&1

    if [ -f "${JAIL_CONF_FILE}" ]; then
        warn "Jail already configured"
    else
        note "Configuring jail"
        ${PRINTF_BIN} "
${JAIL_NAME} {
    name = \"${JAIL_NAME}\";
    host.hostname = \"${JAIL_NAME}\";
    ip4.addr = \"${JAIL_ADDRESS}\";
    interface = ${JAIL_INTERFACE};
    path = \"${CELL}\";
    exec.start = \"/bin/sh /etc/rc\";
    exec.stop = \"/bin/sh /etc/rc.shutdown\";
    enforce_statfs = 2;
    allow.mount = 0;
    allow.mount.nullfs = 0;
    allow.mount.zfs = 0;
    allow.mount.tmpfs = 0;
    allow.raw_sockets = 1;
    mount.devfs;
    persist;
}
" >> ${JAIL_CONF_FILE}
    fi

    note "Mounting jail directories"
    for dir in bin lib libexec sbin usr; do
        ${MKDIR_BIN} -p "${CELL}/${dir}" >> ${LOG_FILE} 2>&1
        debug "Mounting ${JAIL_SOURCE}/${dir} => ${CELL}/${dir}"
        ${MOUNT_NULLFS} -o ro "${JAIL_SOURCE}/${dir}" "${CELL}/${dir}" >> ${LOG_FILE} 2>&1
    done

    note "Copying volatile part of jail"
    ${PRINTF_BIN} "${JAIL_VERSION}\n" > ${JAIL_VERSION_FILE}
    ${PRINTF_BIN} "${JAIL_ADDRESS}\n" > ${JAIL_ADDRESS_FILE}
    ${CP_BIN} -R ${JAIL_SOURCE}/etc ${CELL}
    ${CP_BIN} -R ${JAIL_SOURCE}/var ${CELL}

    note "Making required jail directories and user dir"
    ${MKDIR_BIN} -p "${JAIL_WEBSERVER_CONF_DIR}"
    ${MKDIR_BIN} -p "${JAIL_ATTRIBUTES_DIR}"
    ${MKDIR_BIN} -p "${JAIL_DOMAINS_DIR}"
    ${MKDIR_BIN} -p ${CELL}/tmp ${CELL}/dev ${CELL}/Software ${CELL}/SystemUsers ${CELL}/User/.ssh
    ${CHOWN_BIN} -R ${DEFAULT_WORKER_UID} ${CELL}/User ${CELL}/Software ${CELL}/tmp

    note "Installing default etc for jail"
    ${TAR_BIN} xf ${DEFAULT_ETC_ARCHIVE} --directory ${CELL}
    ${SED_BIN} -i '' -e "s:__JAIL_NAME:${JAIL_NAME}:" ${CELL}/etc/rc.conf

    update_sofin ${CELL}

    ${CP_BIN} -R /Software/Git ${CELL}/Software
    ${CP_BIN} -R /Software/Zsh ${CELL}/Software
    ${CP_BIN} /etc/zshenv ${CELL}/etc

    note "Launching jail: ${JAIL_NAME}"
    jail_start "${JAIL_NAME}"
}


jail_list () {
    cd ${DEFAULT_CELLS_LOCATION}
    for cell in $(${LS_BIN}); do
        cellname="$(${PRINTF_BIN} "${cell}" | ${AWK_BIN} '{print substr($1,0,29);}')" # first 29 chars visible in jls output
        ${PRINTF_BIN} "${cell}"
        JAIL_IP="${cyan}no-IP-assigned${reset}"
        if [ -f "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESS_ATTRIBUTE}" ]; then
            JAIL_IP="${cyan}$(${CAT_BIN} "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESS_ATTRIBUTE}")${reset}"
        fi
        ${JLS_BIN} | ${GREP_BIN} "\ ${cellname}\ " > ${LOG_FILE} 2>&1
        if [ "$?" = "0" ]; then
            ${PRINTF_BIN} " ${JAIL_IP} ${gray}(${green}*on*${gray})${reset}"
        else
            ${PRINTF_BIN} " ${JAIL_IP} ${gray}(${red}*off*${gray})${reset}"
        fi
        ${PRINTF_BIN} "\n"
    done
}


# Apply settings and start jail
jail_start () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} start jail-name"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to stop"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    if [ -f "${JAIL_ADDRESS_FILE}" ]; then
        JAIL_IP="$(${CAT_BIN} ${JAIL_ADDRESS_FILE})"
        note "Turning on jail IP: ${JAIL_IP} on interface ${DEFAULT_INTERFACE}"
        ${IFCONFIG_BIN} ${DEFAULT_INTERFACE} $(${CAT_BIN} ${JAIL_ADDRESS_FILE}) alias
    fi
    note "Mounting jail directories for system version: ${JAIL_VERSION}"
    for dir in bin lib libexec sbin usr; do
        debug "Mounting ${JAIL_SOURCE}/${dir} => ${CELL}/${dir}"
        ${MKDIR_BIN} -p "${CELL}/${dir}"
        ${MOUNT_NULLFS} -o ro "${JAIL_SOURCE}/${dir}" "${CELL}/${dir}" 2> ${LOG_FILE}
    done
    update_sofin ${CELL}
    note "Deploying jail: ${JAIL_NAME}"
    ${DEBUG_COMMAND} ${JAIL_BIN} -c -J ${JAIL_ID_FILE} -f ${JAIL_CONF_FILE} >> ${LOG_FILE} 2>&1
    ${PRINTF_BIN} "[launched by ${USER} on $(${DATE_BIN} +%F-%H-%M-%S)]" > "${JAIL_STATUS_FILE}"

    note "Applying default attributes for jail: ${JAIL_NAME}"
    ${RCTL_BIN} -a jail:${JAIL_NAME}:memoryuse:deny=1024M
    ${RCTL_BIN} -a jail:${JAIL_NAME}:vmemoryuse:deny=2048M
    ${RCTL_BIN} -a jail:${JAIL_NAME}:maxproc:deny=125
    ${RCTL_BIN} -a jail:${JAIL_NAME}:openfiles:deny=1024
    ${RCTL_BIN} -a jail:${JAIL_NAME}:pseudoterminals:deny=16
    apply_attributes
}


jail_stop () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} stop jail-name"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to stop"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    note "Terminating jail: ${JAIL_NAME}"
    ${DEBUG_EXEC_COMMAND} ${JAIL_BIN} -r "${JAIL_NAME}" >> ${LOG_FILE} 2>&1
    ${PRINTF_BIN} "[terminated by ${USER} on $(${DATE_BIN} +%F-%H-%M-%S)]" > "${JAIL_STATUS_FILE}"
    note "Unmounting jail directories"
    for dir in dev bin lib libexec sbin usr; do
        ${UMOUNT_BIN} -f "${CELL}/${dir}" >> ${LOG_FILE} 2>&1
    done
    if [ -f "${JAIL_ADDRESS_FILE}" ]; then
        JAIL_IP="$(${CAT_BIN} ${JAIL_ADDRESS_FILE})"
        note "Turning off jail IP: ${JAIL_IP}"
        ${IFCONFIG_BIN} ${DEFAULT_INTERFACE} ${JAIL_IP} -alias >> ${LOG_FILE} 2>&1
    fi
}


jail_set () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} set jail-name attribute value"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail hostname given"
    fi
    JAIL_ATTRIBUTE="${2}"
    if [ "${JAIL_ATTRIBUTE}" = "" ]; then
        usage
        error "No attribute given"
    fi
    JAIL_VALUE="${3}"
    if [ "${JAIL_VALUE}" = "" ]; then
        usage
        error "No value given"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    note "Setting ${JAIL_ATTRIBUTE}: ${JAIL_VALUE} for jail: ${JAIL_NAME}"
    ${PRINTF_BIN} "${JAIL_VALUE}\n" > "${JAIL_ATTRIBUTES_DIR}/${JAIL_ATTRIBUTE}"
    apply_attributes
}


jail_unset () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} unset jail-name attribute value"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail hostname given"
    fi
    JAIL_ATTRIBUTE="${2}"
    if [ "${JAIL_ATTRIBUTE}" = "" ]; then
        usage
        error "No attribute given"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    note "Unsetting ${JAIL_ATTRIBUTE} for jail: ${JAIL_NAME}"
    ${RM_BIN} -f "${JAIL_ATTRIBUTES_DIR}/${JAIL_ATTRIBUTE}"
    apply_attributes
}


jail_login () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} login jail-name"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to enter"
    fi
    JAIL_LOGIN="worker"
    GIVEN_USER="${2}"
    if [ "${GIVEN_USER}" != "" ]; then
        JAIL_LOGIN="${GIVEN_USER}"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    note "Logging as: ${JAIL_LOGIN} to jail: ${JAIL_NAME}"
    ${DEBUG_EXEC_COMMAND} ${JEXEC_BIN} ${JAIL_NAME} login -f ${JAIL_LOGIN}
}


jail_restart () {
    GIVEN_NAME="${1}"
    jail_stop "${GIVEN_NAME}"
    jail_start "${GIVEN_NAME}"
}


jail_destroy () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} destroy jail-name"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to destroy"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"

    note "Are you sure you want to destroy jail: '${GIVEN_NAME}' with all data? Type 'yes' to confirm."
    read ans
    if [ "${ans}" = "yes" ]; then
        jail_stop "${GIVEN_NAME}"
        note "Destroying datasets: ${CELL} and ${SENTRY}"
        ${ZFS_BIN} destroy "${DEFAULT_ZPOOL}${CELL}" >> ${LOG_FILE} 2>&1
        ${ZFS_BIN} destroy "${DEFAULT_ZPOOL}${SENTRY}" >> ${LOG_FILE} 2>&1
        ${RM_BIN} -rf "${CELL}" >> ${LOG_FILE} 2>&1
        ${RM_BIN} -rf "${SENTRY}" >> ${LOG_FILE} 2>&1
    else
        note "Jail: ${GIVEN_NAME} left intact"
    fi
}


attributes_show () {
    # NOTE: resources, taken from FreeBSD "rctl" man page:
    note "Attributes with description:"
    ${PRINTF_BIN} "   ${cyan}cputime${gray}: ${green}CPU time, in seconds${reset}\n"
    ${PRINTF_BIN} "   ${cyan}datasize${gray}: ${green}data size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}stacksize${gray}: ${green}stack size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}coredumpsize${gray}: ${green}core dump size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}memoryuse${gray}: ${green}resident set size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}memorylocked${gray}: ${green}locked memory, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}maxproc${gray}: ${green}number of processes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}openfiles${gray}: ${green}file descriptor table size${reset}\n"
    ${PRINTF_BIN} "   ${cyan}vmemoryuse${gray}: ${green}address space limit, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}pseudoterminals${gray}: ${green}number of PTYs${reset}\n"
    ${PRINTF_BIN} "   ${cyan}swapuse${gray}: ${green}swap usage, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nthr${gray}: ${green}number of threads${reset}\n"
    ${PRINTF_BIN} "   ${cyan}msgqqueued${gray}: ${green}number of queued SysV messages${reset}\n"
    ${PRINTF_BIN} "   ${cyan}msgqsize${gray}: ${green}SysV message queue size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nmsgq${gray}: ${green}number of SysV message queues${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nsem${gray}: ${green}number of SysV semaphores${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nsemop${gray}: ${green}number of SysV semaphores modified in a single semop(2) call${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nshm${gray}: ${green}number of SysV shared memory segments${reset}\n"
    ${PRINTF_BIN} "   ${cyan}shmsize${gray}: ${green}SysV shared memory size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}wallclock${gray}: ${green}wallclock time, in seconds${reset}\n"
}


name_and_version () {
    note "ServeD GoVeRnor v${VERSION}"
}


case $1 in
    ver|v|version)
        shift
        name_and_version
        ;;

    create|c)
        shift
        jail_create $*
        ;;

    destroy)
        shift
        jail_destroy $*
        ;;

    status|s|stat)
        shift
        jail_status $*
        ;;

    start)
        shift
        jail_start $*
        ;;

    stop)
        shift
        jail_stop $*
        ;;

    restart)
        shift
        jail_restart $*
        ;;

    list|l|lst)
        shift
        jail_list $*
        ;;

    set)
        shift
        jail_set $*
        ;;

    unset)
        shift
        jail_unset $*
        ;;

    login)
        shift
        jail_login $*
        ;;

    attributes|attrs)
        attributes_show
        ;;

    *)
        CMD="${GVR_SCRIPT_NAME}"
        note "Usage:"
        note "${CMD} command arg1 arg2 [...]"
        note
        note "List of commands:"
        note "attributes"
        note "create"
        note "list"
        note "set"
        note "login"
        note "start"
        note "stop"
        note "restart"
        note "status"
        note "destroy"
        note
        note "Run '${CMD} [command]' without arguments to see detailed help about command params."
        ;;
esac


exit 0

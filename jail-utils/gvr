#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#

. /etc/sofin.conf.sh

VERSION="0.1.4"

GVR_SCRIPT_NAME="$(${BASENAME_BIN} $0)"
SERVED_REPO="/var/ServeD-OS"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 | ${TAIL_BIN} -n 4 | ${HEAD_BIN} -n 1 | ${AWK_BIN} '{print $2;}')"
DEFAULT_ETC_ARCHIVE="${SERVED_REPO}/jail-utils/etc-jail.tar.xz"
if [ ! -f "${DEFAULT_ETC_ARCHIVE}" ]; then
    error "etc archive: ${DEFAULT_ETC_ARCHIVE} wasn't found. Cannot continue"
fi

LOG_FILE="/var/log/governor.log"
DEFAULT_ZPOOL="zroot"
DEFAULT_VERSION="10.1"
DEFAULT_WORKER_UID="501"
DEFAULT_QUOTA_LIMIT="5G"
DEFAULT_SENTRY_LIMIT="128M"

DEFAULT_CELLS_LOCATION="/Jails/Prison/Cells"
DEFAULT_SENTRY_LOCATION="/Jails/Prison/Sentry"
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"

CELL_IP_ADDRESS_ATTRIBUTE="jail.ip.address"
CELL_OS_VERSION_ATTRIBUTE="jail.os.version"

CELL_ATTRIBUTES_DIR="jail-attributes"
CELL_DOMAINS_DIR="jail-domains"
CELL_WEBCONF_DIR="jail-webconf"

JAIL_CONF_NAME="jail.conf"
JAIL_TRUSS_NAME="jail.truss.log"
JAIL_TRUSS_EXEC_NAME="jail.truss.exec.log"
JAIL_ID_NAME="jail.id"


set_values () {
    ENTERED_NAME="${1}"
    export CELL="${DEFAULT_CELLS_LOCATION}/${ENTERED_NAME}"
    export SENTRY="${DEFAULT_SENTRY_LOCATION}/${ENTERED_NAME}"
    export JAIL_DOMAINS_DIR="${SENTRY}/${CELL_DOMAINS_DIR}"
    export JAIL_CONF_FILE="${SENTRY}/${JAIL_CONF_NAME}"
    export JAIL_ATTRIBUTES_DIR="${SENTRY}/${CELL_ATTRIBUTES_DIR}"
    export JAIL_NAME="$(${PRINTF_BIN} "${ENTERED_NAME}\n" | ${SED_BIN} 's/\./-/g')"
    export JAIL_ID_FILE="${SENTRY}/${JAIL_ID_NAME}"
    export JAIL_TRACE_LOG="${SENTRY}/${JAIL_TRUSS_NAME}"
    export JAIL_EXEC_LOG="${SENTRY}/${JAIL_TRUSS_EXEC_NAME}"
    export JAIL_VERSION_FILE="${SENTRY}/${CELL_OS_VERSION_ATTRIBUTE}"
    export JAIL_ADDRESS_FILE="${SENTRY}/${CELL_IP_ADDRESS_ATTRIBUTE}"
    export JAIL_WEBSERVER_CONF_DIR="${SENTRY}/${CELL_WEBCONF_DIR}"
    export STATUS="${gray}(${red}*off*${gray})${reset}"
    ${JLS_BIN} | ${GREP_BIN} "\ ${JAIL_NAME}\ " > ${LOG_FILE} 2>&1
    if [ "$?" = "0" ]; then
        export STATUS="${gray}(${green}*on*${gray})${reset}"
    fi
    export JAIL_VERSION="${DEFAULT_VERSION}"
    if [ -f "${JAIL_VERSION_FILE}" ]; then
        export JAIL_VERSION="$(${CAT_BIN} ${JAIL_VERSION_FILE})"
    fi
    export JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${JAIL_VERSION}-${SYSTEM_ARCH}"
    export IP="${cyan}no-address${reset}"
    if [ -f "${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESS_ATTRIBUTE}" ]; then
        export IP="${cyan}$(${CAT_BIN} "${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESS_ATTRIBUTE}")${reset}"
    fi
    export HOSTNAMES=""
    for hostn in $(${FIND_BIN} ${JAIL_DOMAINS_DIR} -type f 2>${LOG_FILE}); do
        export HOSTNAMES="*.$(${BASENAME_BIN} ${hostn}) ${HOSTNAMES}"
    done
}


check_cell_name () {
    base="${1}"
    name="$(${BASENAME_BIN} ${base})"
    if [ ! -d "${base}" ]; then
        error "Bad jail name: ${name}"
    fi
}


jail_status () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} status jail-name"
    }
    JAIL_NAME="${1}" # hostname?
    if [ "${1}" = "" ]; then
        usage
        error "No jail hostname given"
    fi

    set_values $1
    check_cell_name ${CELL}
    ${PRINTF_BIN} "Name: ${green}${JAIL_NAME}${reset}\n"
    ${PRINTF_BIN} "Hostnames: ${green}${HOSTNAMES}${reset}\n"
    ${PRINTF_BIN} "Interface: ${green}${DEFAULT_INTERFACE}${reset}\n"
    ${PRINTF_BIN} "IPv4: ${IP}\n"
    ${PRINTF_BIN} "Status: ${STATUS}\n"
    ${PRINTF_BIN} "OS version: ${green}${JAIL_VERSION}${reset}\n\n"
    if [ -d "${JAIL_ATTRIBUTES_DIR}" ]; then
        ${PRINTF_BIN} "Overriden attributes:\n"
        for i in $(${FIND_BIN} ${JAIL_ATTRIBUTES_DIR} -type f); do
            ${PRINTF_BIN} "${cyan}$(${BASENAME_BIN} ${i}): $(${CAT_BIN} ${i})${reset}\n"
        done
        ${PRINTF_BIN} "\n"
    fi
    ${PRINTF_BIN} "Live attributes:\n${cyan}$(${RCTL_BIN} -h jail:${JAIL_NAME} | ${SED_BIN} 's/jail:n1://g' | ${SED_BIN} 's/:deny=/: /g')${reset}\n"
    ${PRINTF_BIN} "\nFull configuration:"
    ${PRINTF_BIN} "${cyan}$(${CAT_BIN} "${JAIL_CONF_FILE}")\n"
}


apply_attributes () {
    note "Applying attributes from location: ${JAIL_ATTRIBUTES_DIR} for jail: ${JAIL_NAME}"
    ${MKDIR_BIN} -p "${JAIL_DOMAINS_DIR}" "${JAIL_ATTRIBUTES_DIR}" "${JAIL_WEBSERVER_CONF_DIR}"
    cd ${JAIL_ATTRIBUTES_DIR}
    for attribute in $(${LS_BIN}); do
        value="$(${CAT_BIN} ${JAIL_ATTRIBUTES_DIR}/${attribute})"
        note "Overriding attribute: ${attribute}, value: ${value}"
        ${RCTL_BIN} -a jail:${JAIL_NAME}:${attribute}:deny=${value}
    done
}


check_jail_address () {
    JAIL_ADDRESS="${1}"
    for jail in $(${LS_BIN} ${DEFAULT_SENTRY_LOCATION}); do
        if [ "$(${CAT_BIN} ${DEFAULT_SENTRY_LOCATION}/${jail}/${CELL_IP_ADDRESS_ATTRIBUTE})" = "${JAIL_ADDRESS}" ]; then
            error "Address: ${JAIL_ADDRESS} is already assigned to jail: ${jail}"
        fi
    done
}


jail_create () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} create jail-name.com IP-address fbsd-version net-interface"
        note "fbsd-version -> by default 10.1"
        note "net-interface -> by default first interface with default route (${DEFAULT_INTERFACE})"
    }
    JAIL_NAME="${1}"
    if [ "${1}" = "" ]; then
        usage
        error "No jail hostname given"
    fi
    JAIL_NAME="$(${PRINTF_BIN} "${JAIL_NAME}\n" | ${SED_BIN} 's/\./-/g')"
    JAIL_ADDRESS="${2}"
    if [ "${2}" = "" ]; then
        note "No ip given"
        usage
        exit 1
    fi
    check_jail_address ${JAIL_ADDRESS}

    JAIL_VERSION="${3}"
    if [ "${3}" = "" ]; then
        JAIL_VERSION="${DEFAULT_VERSION}"
    fi
    JAIL_INTERFACE="${4}"
    if [ "${4}" = "" ]; then
        JAIL_INTERFACE="${DEFAULT_INTERFACE}"
    fi

    set_values $1 ${JAIL_VERSION}
    note "Creating ZFS dataset"
    ${ZFS_BIN} create -o mountpoint=${CELL} ${DEFAULT_ZPOOL}${CELL}
    ${ZFS_BIN} set quota=${DEFAULT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}${CELL}
    ${ZFS_BIN} create -o mountpoint=${SENTRY} ${DEFAULT_ZPOOL}${SENTRY}
    ${ZFS_BIN} set quota=${DEFAULT_SENTRY_LIMIT} ${DEFAULT_ZPOOL}${SENTRY}

    if [ -f "${JAIL_CONF_FILE}" ]; then
        warn "Jail configuration already in ${JAIL_CONF_FILE}"
    else
        note "Generating jail configuration"
        ${PRINTF_BIN} "
${JAIL_NAME} {
    name = \"${JAIL_NAME}\";
    host.hostname = \"${JAIL_NAME}\";
    ip4.addr = \"${JAIL_ADDRESS}\";
    interface = ${JAIL_INTERFACE};
    path = \"${CELL}\";
    exec.start = \"/bin/sh /etc/rc\";
    exec.stop = \"/bin/sh /etc/rc.shutdown\";
    enforce_statfs = 2;
    allow.mount = 0;
    allow.mount.nullfs = 0;
    allow.mount.zfs = 0;
    allow.mount.tmpfs = 0;
    allow.raw_sockets = 1;
    mount.devfs;
    persist;
}
" >> ${JAIL_CONF_FILE}
    fi

    note "Mounting jail directories"
    for dir in bin lib libexec sbin usr; do
        ${MKDIR_BIN} -p "${CELL}/${dir}"
        ${MOUNT_NULLFS} -o ro "${JAIL_SOURCE}/${dir}" "${CELL}/${dir}"
    done

    note "Copying volatile part of jail"
    ${PRINTF_BIN} "${JAIL_VERSION}\n" > ${JAIL_VERSION_FILE}
    ${PRINTF_BIN} "${JAIL_ADDRESS}\n" > ${JAIL_ADDRESS_FILE}
    ${CP_BIN} -R ${JAIL_SOURCE}/etc ${CELL}
    ${CP_BIN} -R ${JAIL_SOURCE}/var ${CELL}

    note "Making required jail directories and user dir"
    ${MKDIR_BIN} -p "${JAIL_WEBSERVER_CONF_DIR}"
    ${MKDIR_BIN} -p "${JAIL_ATTRIBUTES_DIR}"
    ${MKDIR_BIN} -p "${JAIL_DOMAINS_DIR}"
    ${MKDIR_BIN} -p ${CELL}/tmp ${CELL}/dev ${CELL}/Software ${CELL}/SystemUsers ${CELL}/User/.ssh
    ${CHOWN_BIN} -R ${DEFAULT_WORKER_UID} ${CELL}/User ${CELL}/Software ${CELL}/tmp

    note "Installing default etc for jail"
    ${TAR_BIN} xf ${DEFAULT_ETC_ARCHIVE} --directory ${CELL}
    ${SED_BIN} -i '' -e "s:__JAIL_NAME:${JAIL_NAME}:" ${CELL}/etc/rc.conf

    note "Removing unnecessary directories"
    ${RM_BIN} -rf ${CELL}/boot ${CELL}/mnt ${CELL}/media ${CELL}/rescue ${CELL}/root ${CELL}/proc

    ${CP_BIN} -R /Software/Git ${CELL}/Software
    ${CP_BIN} -R /Software/Zsh ${CELL}/Software
    ${CP_BIN} /etc/zshenv ${CELL}/etc

    note "Launching jail: ${JAIL_NAME}"
    jail_start "${JAIL_NAME}"
}


jail_list () {
    cd ${DEFAULT_CELLS_LOCATION}
    for cell in $(${LS_BIN}); do
        cellname="$(${PRINTF_BIN} "${cell}" | ${AWK_BIN} '{print substr($1,0,29);}')" # first 29 chars visible in jls output
        ${PRINTF_BIN} "${cell}"
        IP="${cyan}no-IP-assigned${reset}"
        if [ -f "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESS_ATTRIBUTE}" ]; then
            IP="${cyan}$(${CAT_BIN} "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESS_ATTRIBUTE}")${reset}"
        fi
        ${JLS_BIN} | ${GREP_BIN} "\ ${cellname}\ " > ${LOG_FILE} 2>&1
        if [ "$?" = "0" ]; then
            ${PRINTF_BIN} " ${IP} ${gray}(${green}*on*${gray})${reset}"
        else
            ${PRINTF_BIN} " ${IP} ${gray}(${red}*off*${gray})${reset}"
        fi
        ${PRINTF_BIN} "\n"
    done
}


# Apply settings and start jail
jail_start () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} start jail-name"
    }
    JAIL_NAME="${1}" # hostname?
    if [ "${1}" = "" ]; then
        usage
        error "No jail to stop"
    fi
    JAIL_NAME="$(${PRINTF_BIN} "${JAIL_NAME}\n" | ${SED_BIN} 's/\./-/g')"

    set_values $1
    check_cell_name ${CELL}
    if [ -f "${JAIL_ADDRESS_FILE}" ]; then
        IP="$(${CAT_BIN} ${JAIL_ADDRESS_FILE})"
        note "Turning on jail IP: ${IP} on interface ${DEFAULT_INTERFACE}"
        ${IFCONFIG_BIN} ${DEFAULT_INTERFACE} $(${CAT_BIN} ${JAIL_ADDRESS_FILE}) alias
    fi
    note "Mounting jail directories for system version: ${JAIL_VERSION}"
    for dir in bin lib libexec sbin usr; do
        ${MKDIR_BIN} -p "${CELL}/${dir}"
        ${MOUNT_NULLFS} -o ro "${JAIL_SOURCE}/${dir}" "${CELL}/${dir}" 2> ${LOG_FILE}
    done
    note "Starting / Updating jail: ${JAIL_NAME}"
    ${TRUSS_BIN} -o ${JAIL_TRACE_LOG} ${JAIL_BIN} -c -J ${JAIL_ID_FILE} -f ${JAIL_CONF_FILE} >> ${LOG_FILE} 2>&1

    # example:
    #   in ${JAIL_ATTRIBUTES_DIR} we look for files like:
    #   file: "pcpu" => contains value 140 (140% cpu)
    #
    #   resources from rctl man page:
    #     cputime        CPU time, in seconds
    #     datasize       data size, in bytes
    #     stacksize      stack size, in bytes
    #     coredumpsize       core dump size, in bytes
    #     memoryuse      resident set size, in bytes
    #     memorylocked       locked memory, in bytes
    #     maxproc        number of processes
    #     openfiles      file descriptor table size
    #     vmemoryuse     address space limit, in bytes
    #     pseudoterminals    number of PTYs
    #     swapuse        swap usage, in bytes
    #     nthr           number of threads
    #     msgqqueued     number of queued SysV messages
    #     msgqsize       SysV message queue size, in bytes
    #     nmsgq          number of SysV message queues
    #     nsem           number of SysV semaphores
    #     nsemop         number of SysV semaphores modified in a single semop(2) call
    #     nshm           number of SysV shared memory segments
    #     shmsize        SysV shared memory size, in bytes
    #     wallclock      wallclock time, in seconds
    #
    #   read more: http://www.manualpages.de/FreeBSD/FreeBSD-9.0-RELEASE/man8/rctl.8.html
    #
    note "Applying default attributes for jail: ${JAIL_NAME}"
    ${RCTL_BIN} -a jail:${JAIL_NAME}:memoryuse:deny=1024M
    ${RCTL_BIN} -a jail:${JAIL_NAME}:vmemoryuse:deny=2048M
    ${RCTL_BIN} -a jail:${JAIL_NAME}:maxproc:deny=125
    ${RCTL_BIN} -a jail:${JAIL_NAME}:openfiles:deny=1024
    ${RCTL_BIN} -a jail:${JAIL_NAME}:pseudoterminals:deny=16
    apply_attributes
}


jail_stop () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} stop jail-name"
    }
    JAIL_NAME="${1}" # hostname?
    if [ "${1}" = "" ]; then
        usage
        error "No jail to stop"
    fi

    set_values $1
    check_cell_name ${CELL}
    note "Terminating jail: ${JAIL_NAME}"
    ${TRUSS_BIN} -o ${JAIL_TRACE_LOG} ${JAIL_BIN} -r "${JAIL_NAME}" >> ${LOG_FILE} 2>&1
    note "Unmounting jail directories"
    for dir in dev bin lib libexec sbin usr; do
        ${UMOUNT_BIN} -f "${CELL}/${dir}" 2>${LOG_FILE}
    done
    if [ -f "${JAIL_ADDRESS_FILE}" ]; then
        IP="$(${CAT_BIN} ${JAIL_ADDRESS_FILE})"
        note "Turning off jail IP: ${IP}"
        ${IFCONFIG_BIN} ${DEFAULT_INTERFACE} ${IP} -alias
    fi
}


jail_set () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} set jail-name attribute value"
    }
    JAIL_NAME="${1}"
    if [ "${1}" = "" ]; then
        usage
        error "No jail hostname given"
    fi
    JAIL_ATTRIBUTE="${2}"
    if [ "${2}" = "" ]; then
        usage
        error "No attribute given"
    fi
    JAIL_VALUE="${3}"
    if [ "${3}" = "" ]; then
        usage
        error "No value given"
    fi
    JAIL_NAME="$(${PRINTF_BIN} "${JAIL_NAME}\n" | ${SED_BIN} 's/\./-/g')"

    set_values $1
    check_cell_name ${CELL}
    note "Setting ${JAIL_ATTRIBUTE}: ${JAIL_VALUE} for jail: ${JAIL_NAME}"
    echo "${JAIL_VALUE}" > "${JAIL_ATTRIBUTES_DIR}/${JAIL_ATTRIBUTE}"
    apply_attributes
}


jail_login () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} login jail-name"
    }
    JAIL_NAME="${1}" # hostname?
    if [ "${1}" = "" ]; then
        usage
        error "No jail to enter"
    fi
    JAIL_USER="worker"
    if [ "${2}" != "" ]; then
        JAIL_USER="${2}"
    fi
    JAIL_NAME="$(${PRINTF_BIN} "${JAIL_NAME}\n" | ${SED_BIN} 's/\./-/g')"

    set_values $1
    check_cell_name ${CELL}
    note "Logging into jail as: ${JAIL_USER}@${JAIL_NAME}"
    ${TRUSS_BIN} -o ${JAIL_EXEC_LOG} ${JEXEC_BIN} ${JAIL_NAME} login -f ${JAIL_USER}
}


jail_restart () {
    jail_stop "${1}"
    jail_start "${1}"
}


jail_destroy () {
    usage () {
        note "Usage: ${GVR_SCRIPT_NAME} destroy jail-name"
    }
    JAIL_NAME="${1}" # hostname?
    if [ "${1}" = "" ]; then
        usage
        error "No jail to destroy"
    fi
    JAIL_NAME="$(${PRINTF_BIN} "${JAIL_NAME}\n" | ${SED_BIN} 's/\./-/g')"

    set_values $1
    check_cell_name ${CELL}

    note "Are you sure you want to destroy jail: '${JAIL_NAME}' with all data? Type 'yes' to confirm."
    read ans
    if [ "${ans}" = "yes" ]; then
        note "Terminating jail: ${JAIL_NAME}"
        jail_stop "${JAIL_NAME}"
        note "Destroying datasets: ${CELL} and ${SENTRY}"
        ${ZFS_BIN} destroy "${DEFAULT_ZPOOL}${CELL}"
        ${ZFS_BIN} destroy "${DEFAULT_ZPOOL}${SENTRY}"
        ${RM_BIN} -rf "${CELL}"
        ${RM_BIN} -rf "${SENTRY}"
    else
        note "Jail left intact"
    fi
}


howto () {
    note "ServeD GoVeRnor v${VERSION}"
}


case $1 in
    ver|v|version)
        shift
        howto
        ;;

    create|c)
        shift
        jail_create $*
        ;;

    destroy)
        shift
        jail_destroy $*
        ;;

    status|s|stat)
        shift
        jail_status $*
        ;;

    start)
        shift
        jail_start $*
        ;;

    stop)
        shift
        jail_stop $*
        ;;

    restart)
        shift
        jail_restart $*
        ;;

    list|l|lst)
        shift
        jail_list $*
        ;;

    set)
        shift
        jail_set $*
        ;;

    login)
        shift
        jail_login $*
        ;;

    *)
        CMD="${GVR_SCRIPT_NAME}"
        note "Usage:"
        note "${CMD} command arg1 arg2 [...]"
        note
        note "List of commands:"
        note "create"
        note "list"
        note "set"
        note "login"
        note "start"
        note "stop"
        note "restart"
        note "status"
        note "destroy"
        note
        note "Run '${CMD} [command]' without arguments to see detailed help about command params."
        ;;
esac


exit 0

#!/bin/sh

set -e

DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
DEFAULT_ZPOOL="zroot"
BASE="ServeD-OS-Base"
LOG="/var/log/svd-install.log"
SERVED_REPO="/var/ServeD-OS"
SOFIN_REPO="/var/sofin"
BASE_SOURCE="http://dmilith.verknowsys.com/Public/ServeD"
SYS_VERSION="$(uname -r | cut -d- -f1)"
SYS_ARCH="$(uname -m)"
VERSIONS="9.3 10.1"
if [ "${VERSION}" = "" ]; then
    VERSION="$(fetch -q -o - ${BASE_SOURCE}/version-latest)"
    printf "No version specified. Picking last version: ${VERSION}\n"
fi

# sanity checks
if [ "$(uname)" != "FreeBSD" ]; then
    printf "Only 64bit FreeBSD hosts are supported by installer\n"
    exit 1
fi

# handle older zpool versions. Try to upgrade them before start
zpool upgrade ${DEFAULT_ZPOOL} >> ${LOG} 2>&1

# set lz4 compression and checksum mechanism for all pools:
for pool in $(zpool list -H | awk '{print $1}'); do
    printf "Setting compression: lz4, checksum: fletcher4 on zpool: ${pool}\n" >> ${LOG} 2>&1
    zfs set compression=lz4 ${pool}
    zfs set checksum=fletcher4 ${pool}
done

# create zvols for special snappable dirs
for mntpoint in /Jails /Jails/Prison /Jails/Prison/Cells /Jails/Prison/Sentry /Users /Software /SystemUsers /SystemUsers/SoftwareData /SystemUsers/Igniters; do
    if [ ! -d "${mntpoint}" ]; then
        printf "Creating zvol: ${mntpoint}\n" >> ${LOG} 2>&1
        zfs create -o dedup=on -o mountpoint=${mntpoint} -o casesensitivity=sensitive "${DEFAULT_ZPOOL}${mntpoint}"
    fi
done

mkdir -p /tmp/.cache >> ${LOG} 2>&1
if [ ! -f "/tmp/.cache/${BASE}-${VERSION}.tar.xz" ]; then
    printf "Base archive wasn't downloaded yet\n"
    fetch ${BASE_SOURCE}/${BASE}-${VERSION}.tar.xz -o /tmp/.cache/${BASE}-${VERSION}.tar.xz
    if [ "$?" != "0" ]; then
        printf "Binary snapshot isn't available, or something just went wrong while fetching archive\n"
        exit 1
    fi
fi

for version in ${VERSIONS}; do
    if [ ! -f "/tmp/.cache/${BASE}-Jail-${version}-${VERSION}.tar.xz" ]; then
        printf "Jails archive wasn't downloaded yet\n"
        fetch ${BASE_SOURCE}/${BASE}-Jail-${version}-${VERSION}.tar.xz -o /tmp/.cache/${BASE}-Jail-${version}-${VERSION}.tar.xz
        if [ "$?" != "0" ]; then
            printf "Jails binary snapshot isn't available, or something just went wrong while fetching archive\n"
            exit 1
        fi
    fi
done

printf "Installing ServeD-Base ${VERSION}\n"
tar xf /tmp/.cache/${BASE}-${VERSION}.tar.xz --directory /

if [ "$?" != "0" ]; then
    printf "ERROR: Binary snapshot is corrupted or something just went wrong with archive\n"
    exit 1
fi

for version in ${VERSIONS}; do
    printf "Installing Jail-Base ${version}-${VERSION}\n"
    tar xf /tmp/.cache/${BASE}-Jail-${version}-${VERSION}.tar.xz --directory /
done

if [ "$?" != "0" ]; then
    printf "ERROR: Jails snapshot is corrupted or something just went wrong with archive\n"
    exit 1
fi

if [ ! -d "${SOFIN_REPO}" ]; then
    cd /var
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git clone https://github.com/VerKnowSys/sofin.git
    cd ${SOFIN_REPO}
else
    cd ${SOFIN_REPO}
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git pull https://github.com/VerKnowSys/sofin.git
fi

printf "Installing Sofin\n"
bin/install
. /etc/sofin.conf.sh
for version in ${VERSIONS}; do
    JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${version}-${SYSTEM_ARCH}"
    PREFIX="${JAIL_SOURCE}" bin/install
done

note "Installing custom kernel"
if [ ! -d "/boot/verknowsys" ]; then
    cp -vr /Jails/Shared/FreeBSD-${SYS_VERSION}-${SYS_ARCH}/boot/kernel /boot/verknowsys >> ${LOG} 2>&1
fi

if [ "${SHELL}" != "/Software/Zsh/exports/zsh" ]; then
    note "Setting up ZSH shell"
    printf "/Software/Zsh/exports/zsh\n" >> /etc/shells
    chsh -s /Software/Zsh/exports/zsh >> ${LOG} 2>&1
fi

if [ -d "/SystemUsers" ]; then
    note "Setting up new root home dir: /SystemUsers"
    if [ -d "/root" ]; then
        cp -R /root/ /SystemUsers
    fi
    pw user mod root -d /SystemUsers >> ${LOG} 2>&1
fi

note "Installing additional Software"
sofin get atop pstree vim tmux vifm pkgconf qtws53 bacula mc bind subversion mercurial openvpn openssl gcc syslog-ng thess

if [ -d "${SERVED_REPO}" ]; then
    cd ${SERVED_REPO}
    cp -Rv usr/ /usr/ >> ${LOG} 2>&1
else
    error "Binary snapshot lacks ${SERVED_REPO} directory. Installation aborted!"
    exit 1
fi

note "Setting up shell environment"
cp -v ${SERVED_REPO}/etc/zshenv.served /etc/zshenv >> ${LOG} 2>&1

note "Setting up default boot loader configuration"
cp -v ${SERVED_REPO}/etc/loader.conf.served /boot/loader.conf >> ${LOG} 2>&1

note "Setting up mime types"
cp -v ${SERVED_REPO}/etc/mime.types.served /etc/mime.types >> ${LOG} 2>&1

note "Setting up login"
cp -v ${SERVED_REPO}/etc/login.conf.served /etc/login.conf >> ${LOG} 2>&1
cap_mkdb /etc/login.conf >> ${LOG} 2>&1

note "Setting up sysctl"
cp -v ${SERVED_REPO}/etc/sysctl.conf.served /etc/sysctl.conf >> ${LOG} 2>&1

note "Setting up periodic"
cp -v ${SERVED_REPO}/etc/periodic.conf.served /etc/periodic.conf >> ${LOG} 2>&1

note "Setting up rc configuration"
cat ${SERVED_REPO}/etc/rc.conf.served >> /etc/rc.conf

note "Setting up core services"
cp -v ${SERVED_REPO}/etc/ttys.served /etc/ttys >> ${LOG} 2>&1

note "Setting up default ssl root certificates"
mkdir -p /etc/ssl >> ${LOG} 2>&1
cp -v ${SERVED_REPO}/etc/ssl/cacert.pem /etc/ssl/cert.pem >> ${LOG} 2>&1

SNAP_DATE="$(date +%F_%H%M)"
for snap in /Jails /Software /SystemUsers /SystemUsers/SoftwareData /SystemUsers/Igniters; do
    snap="${DEFAULT_ZPOOL}${snap}@${SNAP_DATE}-initial"
    note "Creating ZFS snapshot: ${snap}"
    zfs snapshot "${snap}"
done

note "Starting Ntp service"
test -d /SystemUsers/SoftwareData/Ntp || mkdir -p /SystemUsers/SoftwareData/Ntp
test -f /SystemUsers/SoftwareData/Ntp/.running || touch /SystemUsers/SoftwareData/Ntp/.start

note "Starting LiveUsers service"
test -d /SystemUsers/SoftwareData/LiveUsers || mkdir -p /SystemUsers/SoftwareData/LiveUsers
test -f /SystemUsers/SoftwareData/LiveUsers/.running || touch /SystemUsers/SoftwareData/LiveUsers/.start

printf "ServeD OS ${VERSION}" > /etc/motd
note "Cleaning shared memory state, semaphores and unnecessary directories"
rm -rfv /root /mnt /media /proc /COPYRIGHT /sys >> ${LOG} 2>&1
ipcrm -W

note "Performing additional system tweaks"
test -x /usr/bin/gcc || ln -s /Software/Gcc/exports/gcc /usr/bin/gcc
test -x /usr/bin/g++ || ln -s /Software/Gcc/exports/g++ /usr/bin/g++

note "ServeD system installation complete!"
note
note "You must reboot to apply new kernel and system configuration."

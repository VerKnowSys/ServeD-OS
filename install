#!/bin/sh

set -e

DEFAULT_JAIL_PRISON_LOCATION='/Jails/Prison'
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
DEFAULT_ZPOOL="zroot"
DEFAULT_SYSTEM_PREFIX="/usr/bin"
UNBOUND_CONF_DIR="/etc/unbound/conf.d"
UNBOUND_CONF="/etc/unbound/unbound.conf"
BASE="ServeD-OS-Base"
LOG="/var/log/svd-install.log"
SERVED_REPO="/var/ServeD-OS"
SOFIN_REPO="/var/sofin"
BASE_SOURCE="http://served.verknowsys.com/"
SYS_VERSION="$(uname -r | cut -d- -f1)"
SYS_ARCH="$(uname -m)"
INTERNAL_NETWORK="10.2.1.0"
PF_CONF_FILE="/etc/pf.conf"
RC_FILE="/etc/rc"
GIT_BIN="/Software/Git/exports/git"
VERSIONS="10.1" # 9.3
if [ "${VERSION}" = "" ]; then
    VERSION="$(fetch -q -o - ${BASE_SOURCE}/version-latest)"
    printf "No version specified. Picking last version: ${VERSION}\n"
fi

# sanity checks
if [ "$(uname)" != "FreeBSD" ]; then
    printf "Only 64bit FreeBSD hosts are supported by installer\n"
    exit 1
fi

# handle older zpool versions. Try to upgrade them before start
#zpool upgrade ${DEFAULT_ZPOOL} >> ${LOG} 2>&1

# set lz4 compression and checksum mechanism for all pools:
for pool in $(zpool list -H | awk '{print $1}'); do
    printf "Setting compression: lz4, checksum: fletcher4 on zpool: ${pool}\n" >> ${LOG} 2>&1
    zfs set compression=lz4 ${pool}
    zfs set checksum=fletcher4 ${pool}
done

# create zvols for special snappable dirs
for mntpoint in /Jails ${DEFAULT_JAIL_SHARED_LOCATION} ${DEFAULT_JAIL_PRISON_LOCATION} ${DEFAULT_JAIL_PRISON_LOCATION}/Cells ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry /Users /Software /SystemUsers /SystemUsers/SoftwareData /SystemUsers/Igniters; do
    if [ ! -d "${mntpoint}" ]; then
        printf "Creating zvol: ${mntpoint}\n" >> ${LOG} 2>&1
        zfs create -o dedup=on -o mountpoint=${mntpoint} -o casesensitivity=sensitive "${DEFAULT_ZPOOL}${mntpoint}"
    fi
done

mkdir -p /tmp/.cache >> ${LOG} 2>&1
if [ ! -f "/tmp/.cache/${BASE}-${VERSION}.tar.xz" ]; then
    printf "Base archive wasn't downloaded yet\n"
    fetch ${BASE_SOURCE}/${BASE}-${VERSION}.tar.xz -o /tmp/.cache/${BASE}-${VERSION}.tar.xz
    if [ "$?" != "0" ]; then
        printf "Binary snapshot isn't available, or something just went wrong while fetching archive\n"
        exit 1
    fi
fi

for version in ${VERSIONS}; do
    if [ ! -f "/tmp/.cache/${BASE}-Jail-${version}-${VERSION}.tar.xz" ]; then
        printf "Jails archive wasn't downloaded yet\n"
        fetch ${BASE_SOURCE}/${BASE}-Jail-${version}-${VERSION}.tar.xz -o /tmp/.cache/${BASE}-Jail-${version}-${VERSION}.tar.xz
        if [ "$?" != "0" ]; then
            printf "Jails binary snapshot isn't available, or something just went wrong while fetching archive\n"
            exit 1
        fi
    fi
done

printf "Installing ServeD-Base ${VERSION}\n"
tar xf /tmp/.cache/${BASE}-${VERSION}.tar.xz --directory /

if [ "$?" != "0" ]; then
    printf "ERROR: Binary snapshot is corrupted or something just went wrong with archive\n"
    exit 1
fi

for version in ${VERSIONS}; do
    printf "Installing Jail-Base ${version}-${VERSION}\n"
    tar xf /tmp/.cache/${BASE}-Jail-${version}-${VERSION}.tar.xz --directory /
done

if [ "$?" != "0" ]; then
    printf "ERROR: Jails snapshot is corrupted or something just went wrong with archive\n"
    exit 1
fi

if [ ! -d "${SOFIN_REPO}" ]; then
    cd /var
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone https://verknowsys@bitbucket.org/verknowsys/sofin.git
    cd ${SOFIN_REPO}
else
    cd ${SOFIN_REPO}
    ${GIT_BIN} stash save "install-update-$(date +%F)"
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull https://verknowsys@bitbucket.org/verknowsys/sofin.git
fi

printf "Installing Sofin environment\n"
bin/install
. /etc/sofin.conf.sh
for version in ${VERSIONS}; do
    JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${version}-${SYSTEM_ARCH}"
    PREFIX="${JAIL_SOURCE}" bin/install
done
# DEFAULT_CELLS_DIR="/Jails/Prison/Cells"
# for jail in $(${LS_BIN} ${DEFAULT_CELLS_DIR}); do
#     DESTINATION="${DEFAULT_CELLS_DIR}/${jail}/etc"
#     if [ -d ${DESTINATION} ]; then
#         note "Updating Sofin's environments in jail: ${jail}"
#         ${CP_BIN} /etc/sofin.conf.sh ${DESTINATION}/sofin.conf.sh
#     fi
# done

note "Installing custom kernel"
if [ ! -d "/boot/verknowsys" ]; then
    ${CP_BIN} -vr ${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${SYS_VERSION}-${SYS_ARCH}/boot/kernel /boot/verknowsys >> ${LOG} 2>&1
else
    ${RM_BIN} -rf /boot/verknowsys.old >> ${LOG} 2>&1
    ${MV_BIN} /boot/verknowsys /boot/verknowsys.old >> ${LOG} 2>&1
    ${CP_BIN} -vr ${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${SYS_VERSION}-${SYS_ARCH}/boot/kernel /boot/verknowsys >> ${LOG} 2>&1
fi

if [ "${SHELL}" != "/Software/Zsh/exports/zsh" ]; then
    note "Setting up ZSH shell"
    ${PRINTF_BIN} "/Software/Zsh/exports/zsh\n" >> /etc/shells
    ${CHSH_BIN} -s /Software/Zsh/exports/zsh >> ${LOG} 2>&1
fi

if [ -d "/SystemUsers" ]; then
    note "Setting up new root home dir: /SystemUsers"
    if [ -d "/root" ]; then
        ${CP_BIN} -R /root/ /SystemUsers
    fi
    ${PW_BIN} user mod root -d /SystemUsers >> ${LOG} 2>&1
fi

note "Installing additional Software"
sofin get Atop Pstree Vim Tmux Vifm Bacula Mc Bind Subversion Mercurial Gcc Syslog-ng Sudo-static Thess Unbound

note "Updating sudo for ${SYS_VERSION} jail base"
${CP_BIN} /Software/Sudo-static/bin/sudo ${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${SYS_VERSION}-${SYS_ARCH}/usr/bin/
${CHMOD_BIN} 4755 ${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${SYS_VERSION}-${SYS_ARCH}/usr/bin/sudo

if [ -d "${SERVED_REPO}" ]; then
    cd ${SERVED_REPO}
    ${GIT_BIN} reset --hard
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull https://github.com/VerKnowSys/ServeD-OS.git
    ${CP_BIN} -Rv usr/ /usr/ >> ${LOG} 2>&1
else
    cd /var
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone https://github.com/VerKnowSys/ServeD-OS.git
fi

note "Setting up shell environment"
${CP_BIN} -v ${SERVED_REPO}/etc/zshenv.served /etc/zshenv >> ${LOG} 2>&1

note "Setting up default boot loader configuration"
${CP_BIN} -v ${SERVED_REPO}/etc/loader.conf.served /boot/loader.conf >> ${LOG} 2>&1

note "Setting up make.conf and src.conf"
${CP_BIN} -v ${SERVED_REPO}/etc/make.conf /etc/make.conf >> ${LOG} 2>&1
${CP_BIN} -v ${SERVED_REPO}/etc/src.conf /etc/src.conf >> ${LOG} 2>&1

note "Setting up mime types"
${CP_BIN} -v ${SERVED_REPO}/etc/mime.types.served /etc/mime.types >> ${LOG} 2>&1

# replace default syslogd with preconfigured syslog-ng
note "Setting up system logger"
${MKDIR_BIN} -p /etc/syslog-ng
${CP_BIN} ${SERVED_REPO}/etc/syslog-ng/syslog-ng.conf /etc/syslog-ng/
${CP_BIN} ${SERVED_REPO}/etc/syslog-ng/scl.conf /etc/syslog-ng/

SYSLOGNG_PREFIX="/Software/Syslog-ng"
${RM_BIN} -rf ${SYSLOGNG_PREFIX}/etc
${LN_BIN} -s /etc/syslog-ng ${SYSLOGNG_PREFIX}/etc
test -d ${SYSLOGNG_PREFIX}/var && ${RM_BIN} -rf ${SYSLOGNG_PREFIX}/var && ${LN_BIN} -s /var/run ${SYSLOGNG_PREFIX}/var

note "Creating rc script for syslog-ng"
test ! -x /etc/rc.d/syslog-ng && ${CP_BIN} /etc/rc.d/syslogd /etc/rc.d/syslog-ng
${SED_BIN} -i '' -e 's#pidfile=.*$#pidfile="/var/run/syslog-ng.pid"#' /etc/rc.d/syslog-ng
${SED_BIN} -i '' -e 's#syslogd#syslog_ng#g' /etc/rc.d/syslog-ng
${SED_BIN} -i '' -e 's#command=.*$#command="/Software/Unbound/exports/unbound"#' /etc/rc.d/local_unbound

note "Setting up login"
${CP_BIN} -v ${SERVED_REPO}/etc/login.conf.served /etc/login.conf >> ${LOG} 2>&1
${CAP_MKDB_BIN} /etc/login.conf >> ${LOG} 2>&1

note "Setting up sysctl"
${CP_BIN} -v ${SERVED_REPO}/etc/sysctl.conf.served /etc/sysctl.conf >> ${LOG} 2>&1

note "Setting up periodic"
${CP_BIN} -v ${SERVED_REPO}/etc/periodic.conf.served /etc/periodic.conf >> ${LOG} 2>&1

note "Setting up rc configuration"
${GREP_BIN} 'ServeD' ${RC_FILE}.conf > /dev/null || ${CAT_BIN} ${SERVED_REPO}${RC_FILE}.conf.served >> ${RC_FILE}.conf

note "Setting up network"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 | ${TAIL_BIN} -n 4 | ${HEAD_BIN} -n 1 | ${AWK_BIN} '{print $2;}')"
DEFAULT_HOST_ADDRESS="/etc/host.default"
NETS_LIST="$(${IFCONFIG_BIN} ${DEFAULT_INTERFACE} | ${GREP_BIN} inet | ${AWK_BIN} '{print $2;}')"
AMOUNT=$(${PRINTF_BIN} "${NETS_LIST}\n" | ${WC_BIN} -l)
NETS=""
if [ ${AMOUNT} -eq 1 ]; then
    ${PRINTF_BIN} "${NETS_LIST}\n" > ${DEFAULT_HOST_ADDRESS}
else
    note "Detected several IP addresses"
    for net in ${NETS_LIST}; do
        NETS="$NETS $net - "
    done
    ${DIALOG_BIN} --menu "Pick main IP address:" 0 0 0 ${NETS} 2> ${DEFAULT_HOST_ADDRESS}
fi

note "Setting up firewall"
DEFAULT_INTERFACE_ADDRESS="$(${CAT_BIN} ${DEFAULT_HOST_ADDRESS})"
${CP_BIN} -v ${SERVED_REPO}${PF_CONF_FILE}.served ${PF_CONF_FILE} >> ${LOG} 2>&1
${SED_BIN} -i '' -e "s/__INTERNAL_NETWORK/${INTERNAL_NETWORK}/g" ${PF_CONF_FILE}
${SED_BIN} -i '' -e "s/__EXTERNAL_INTERFACE/${DEFAULT_INTERFACE}/g" ${PF_CONF_FILE}
${SED_BIN} -i '' -e "s/__EXTERNAL_ADDRESS/${DEFAULT_INTERFACE_ADDRESS}/g" ${PF_CONF_FILE}
${TOUCH_BIN} ${PF_CONF_FILE}.local
service pf restart
note "Applied firewall rules:\n$(${PFCTL_BIN} -sn)"

note "Setting up rc"
${GREP_BIN} 'ServeD' ${RC_FILE} > /dev/null || (${SED_BIN} -i '' -e '$d' ${RC_FILE} && ${SED_BIN} -i '' -e '$d' ${RC_FILE} && ${SED_BIN} -i '' -e '$d' ${RC_FILE} && ${CAT_BIN} ${SERVED_REPO}${RC_FILE}.served >> ${RC_FILE})

note "Setting up core services"
${CP_BIN} -v ${SERVED_REPO}/etc/ttys.served /etc/ttys >> ${LOG} 2>&1

note "Setting up Unbound DNS resolver for domains bound to Jails"
test ! -f ${UNBOUND_CONF_DIR}/jailed.conf && ${PRINTF_BIN} "include: ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry/*/jail-domains/*.conf\n" > ${UNBOUND_CONF_DIR}/jailed.conf
test -f ${UNBOUND_CONF} && ${MV_BIN} ${UNBOUND_CONF} ${UNBOUND_CONF}.old
${PRINTF_BIN} "# Generated by ServeD installer:
server:
        interface: 127.0.0.1
        interface: $(${CAT_BIN} ${DEFAULT_HOST_ADDRESS})
        access-control: 10.0.0.0/8 allow
        access-control: 192.168.0.0/16 allow
        username: unbound
        directory: /var/unbound
        chroot: /var/unbound
        pidfile: /var/run/local_unbound.pid
        auto-trust-anchor-file: /var/unbound/root.key

include: /var/unbound/forward.conf
include: /var/unbound/lan-zones.conf
include: /var/unbound/conf.d/*.conf
" > ${UNBOUND_CONF}

note "Setting up default ssl root certificates"
${MKDIR_BIN} -p /etc/ssl >> ${LOG} 2>&1
${CP_BIN} -v ${SERVED_REPO}/etc/ssl/cacert.pem /etc/ssl/cert.pem >> ${LOG} 2>&1

SNAP_DATE="$(date +%F_%H%M%S)"
for snap_ in /Jails /Software /SystemUsers /SystemUsers/SoftwareData /SystemUsers/Igniters; do
    snap="${DEFAULT_ZPOOL}${snap_}@${SNAP_DATE}"
    note "Creating ZFS snapshot: ${snap}"
    ${ZFS_BIN} snapshot "${snap}"
done

note "Starting Ntp service"
${TEST_BIN} -d /SystemUsers/SoftwareData/Ntp || ${MKDIR_BIN} -p /SystemUsers/SoftwareData/Ntp
${TEST_BIN} -f /SystemUsers/SoftwareData/Ntp/.running || ${TOUCH_BIN} /SystemUsers/SoftwareData/Ntp/.start

${PRINTF_BIN} "\nServeD OS ${VERSION}\n\n" > /etc/motd
note "Cleaning unnecessary directories"
${RM_BIN} -rfv /root /mnt /media /proc /COPYRIGHT /sys >> ${LOG} 2>&1

note "Performing additional system tweaks"
${TEST_BIN} -x ${DEFAULT_SYSTEM_PREFIX}/gcc || ${LN_BIN} -s /Software/Gcc/exports/gcc ${DEFAULT_SYSTEM_PREFIX}/gcc
${TEST_BIN} -x ${DEFAULT_SYSTEM_PREFIX}/g++ || ${LN_BIN} -s /Software/Gcc/exports/g++ ${DEFAULT_SYSTEM_PREFIX}/g++

set +e
note "Replacing syslogd with syslog-ng"
service syslogd stop >/dev/null 2>&1
service syslog-ng restart

note "Installing Governor to host system"
${INSTALL_BIN} ${SERVED_REPO}/gvr ${DEFAULT_SYSTEM_PREFIX}

${UNAME_BIN} -a | ${GREP_BIN} VERKNOWSYS > /dev/null 2>&1
if [ "$?" = "0" ]; then
    note
    note "ServeD system update complete!"
else
    note
    note "ServeD system installation complete!"
    note "You must reboot to apply new kernel and system configuration."
fi

exit 0

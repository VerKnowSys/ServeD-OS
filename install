#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#

cd /var
set +x

# tunables:
export PATH="/bin:/usr/bin:/sbin:/usr/sbin"
INSTALL_SCRIPT_VERSION="0.8.0"
SYSTEM_VERSION="11.0" # the default
ZFS_DEF_POOL_NAME="zroot"
INTERNAL_NETWORK="10.2.1.0"
ORIGIN="origin"
SYSSVD_LOGNG_PREFIX="/Services/Syslog-ng"
SOFIN_REPO="/var/sofin"
SERVED_REPO="/var/ServeD-OS"
CACERT_SOURCE="http://curl.haxx.se/ca/cacert.pem"
CACERT_SOURCE_ALT="http://raw.githubusercontent.com/bagder/ca-bundle/master/ca-bundle.crt"
DEFAULT_ZFS_STREAM_EXT=".zfsx"

# const definitions:
ColorGray="\033[39m" # default color of terminal
ColorReset="${ColorGray}"
ColorCyan="\033[36m"
ColorMagenta="\033[35m"
ColorRed="\033[31m"
ColorGreen="\033[32m"
ColorYellow="\033[33m"

error_char="âœ˜"
SERVEDOS_GIT_ORIGIN="https://verknowsys@bitbucket.org/verknowsys/served-os.git"
DEFAULT_SOFIN_REPOSITORY="https://verknowsys@bitbucket.org/verknowsys/sofin.git"
BASE="ServeD-OS-Base"
BASE_SOURCE="http://served.verknowsys.com/"
VKS_KERNEL="/boot/verknowsys"
CACHE_DIR="/var/.cache"
ZFS_CREATE_OPTS_FOR_ROOT_ELEMS=" -o dedup=on -o compression=lz4 -o mountpoint=none -o casesensitivity=sensitive"
DEFAULT_JAIL_PRISON_LOCATION="/Jails/Prison"
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
PF_CONF_FILE="/etc/pf.conf"
RC_FILE="/etc/rc"

DEFAULT_SHELL="/Software/Zsh/exports/zsh"
TAIL_BIN="/usr/bin/tail"
CHFLAGS_BIN="/bin/chflags"
GIT_BIN="/Software/Git/exports/git"
ZPOOL_BIN="/sbin/zpool"
ZFS_BIN="/sbin/zfs"
SVDINIT_BIN="/sbin/svdinit"
SVDINIT_BACKUP_BIN="/var/.svdinit"
FETCH_BIN="/usr/bin/fetch"
BASENAME_BIN="/usr/bin/basename"
GRPART_BIN="/sbin/gpart"
GEOM_BIN="/sbin/geom"
KLDXREF_BIN="/usr/sbin/kldxref"
PRINTF_BIN="/usr/bin/printf"
MKDIR_BIN="/bin/mkdir"
UNAME_BIN="/usr/bin/uname"
DATE_BIN="/bin/date"
CLANG_BIN="/usr/bin/clang"
GREP_BIN="/usr/bin/grep"
EGREP_BIN="/usr/bin/egrep"
XZ_BIN="/usr/bin/xz"
SYNC_BIN="/bin/sync"
XZCAT_BIN="/usr/bin/xzcat"
SED_BIN="/usr/bin/sed"
CP_BIN="/bin/cp"
PWD_MKDB_BIN="/usr/sbin/pwd_mkdb"

TIMESTAMP="$(${DATE_BIN} +%s 2>/dev/null)"
ARCH="$(${UNAME_BIN} -m 2>/dev/null)"
UNAME_OS="$(${UNAME_BIN} -s 2>/dev/null)"
OS_TRIPPLE="${SYSTEM_VERSION}-${ORIGIN}-${ARCH}"
SVD_LOG="/var/log/svd-install-${TIMESTAMP}.log"
DEFAULT_JAILS_ROOT_DIR="${DEFAULT_JAIL_SHARED_LOCATION}/${UNAME_OS}-${SYSTEM_VERSION}-${ARCH}"
LATEST_VERSION="$(${FETCH_BIN} -q -o - ${BASE_SOURCE}/version-latest 2>/dev/null)"
VERSION="${VERSION:-$(${ZFS_BIN} get -H -o value com.svd:version ${ZFS_DEF_POOL_NAME}/ROOT 2>/dev/null)}"
if [ "${VERSION}" = "-"  -o -z "${VERSION}" ]; then
    ${PRINTF_BIN} "No version specified. Picking last version: ${LATEST_VERSION}\n"
else
    if [ "${VERSION}" = "${LATEST_VERSION}" ]; then
        if [ "$1" = "-f" ]; then
            ${PRINTF_BIN} "Forcing installation of ServeD base system in version: ${VERSION}\n"
        else
            ${PRINTF_BIN} "You are already using latest version: ${VERSION} of ServeD base system\n"
            exit 0
        fi
    fi
fi
VERSION="${LATEST_VERSION}"


# sanity check
if [ "${UNAME_OS}" != "FreeBSD" ]; then
    error "Only 64bit FreeBSD/HardenedBSD hosts are supported by installer"
fi


cecho () {
    ${PRINTF_BIN} "${2}%s${ColorReset}\n" "${1}"
}

retry () {
    retries="OOO"
    while [ ! -z "${retries}" ]; do
        if [ ! -z "$1" ]; then
            gitroot="$(${BASENAME_BIN} $(${BASENAME_BIN} ${GIT_BIN}))"
            eval "PATH=/bin:/usr/bin:${gitroot}/bin:${gitroot}/libexec/git-core ${*}"  >> ${SVD_LOG} 2>> ${SVD_LOG} && \
            return 0
        else
            error "An empty command to retry?"
        fi
        retries="$(echo "${retries}" | ${SED_BIN} 's/\O//' 2>/dev/null)"
    done
    ${PRINTF_BIN} "All retries exhausted for launch command: '${*}'\n" && \
    return 2
}

error () {
    cecho "${error_char} $1" ${ColorRed}
    exit 1
}

debug () {
    if [ -f "/.build-host" ]; then
        cecho "# $1" "${ColorMagenta}"
    fi
}

warn () {
    cecho "$1" ${ColorYellow}
}

note () {
    cecho "$1" "${ColorGreen}"
}

dwarn () {
    cecho "${*}" "${ColorYellow}" && \
    cecho "${*}" "${ColorYellow}" >> ${SVD_LOG} 2>> ${SVD_LOG}
}

dnote () {
    note "${*}" && \
    note "${*}" >> "${SVD_LOG}" 2>> ${SVD_LOG}
}

wrun () {
    eval "PATH=/bin:/sbin:/usr/bin:/usr/sbin:/Software/Git/exports ${1}" >> "${SVD_LOG}" 2>> "${SVD_LOG}"
    if [ "$?" != "0" ]; then
        cecho "Failed to evaluate: '${1}'" "${ColorRed}" && \
        cecho "Failed to evaluate: '${1}'" "${ColorRed}" >> "${SVD_LOG}" 2>> "${SVD_LOG}"
        return 1
    fi
}

# dnote "Installer is setting no-op traps for some shell signals.."
# trap : QUIT TTIN TTOU USR1 USR2


${MKDIR_BIN} -p ${CACHE_DIR}
for _an_origin in Software-${ORIGIN}${DEFAULT_ZFS_STREAM_EXT} Software-user-${ORIGIN}${DEFAULT_ZFS_STREAM_EXT}; do
    if [ ! -f "${CACHE_DIR}/${_an_origin}" ]; then
        wrun "${FETCH_BIN} ${BASE_SOURCE}/${_an_origin} -o ${CACHE_DIR}/${_an_origin}" && \
            dnote "Fetched origin: ${_an_origin}"
    fi
done

# Single archive - contains fresh base system
if [ ! -f "${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}${DEFAULT_ZFS_STREAM_EXT}" ]; then
    retry "${FETCH_BIN} ${BASE_SOURCE}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}${DEFAULT_ZFS_STREAM_EXT} -o ${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}${DEFAULT_ZFS_STREAM_EXT}" && \
    dnote "Base system archive fetched successfully"
fi

${ZFS_BIN} list "${ZFS_DEF_POOL_NAME}/Software" >/dev/null 2>&1
if [ "$?" != "0" ]; then
    ${XZCAT_BIN} ${CACHE_DIR}/Software-${ORIGIN}${DEFAULT_ZFS_STREAM_EXT} | ${ZFS_BIN} receive -v ${ZFS_DEF_POOL_NAME}/Software 2>/dev/null | ${TAIL_BIN} -n1 && \
    dnote "Dataset: '${ZFS_DEF_POOL_NAME}/Software' received successfully" && \
    INSTALLED_SOFTWARE="1"
fi

${ZFS_BIN} list "${ZFS_DEF_POOL_NAME}/Software/root" >/dev/null 2>&1
if [ "$?" != "0" ]; then
    ${XZCAT_BIN} ${CACHE_DIR}/Software-user-${ORIGIN}${DEFAULT_ZFS_STREAM_EXT} | ${ZFS_BIN} receive -v ${ZFS_DEF_POOL_NAME}/Software/root 2>/dev/null | ${TAIL_BIN} -n1 && \
    dnote "Dataset: '${ZFS_DEF_POOL_NAME}/Software/root' received successfully" && \
    INSTALLED_SOFTWARE_ROOT="1"
    dnote "Installing base software required by ServeD base system.."

    # XXX hardcoded:
    ${FETCH_BIN} -o /tmp/Zsh${DEFAULT_ZFS_STREAM_EXT} http://software.verknowsys.com/binary/FreeBSD-11.0-amd64/Zsh-5.2-FreeBSD-11.0-amd64${DEFAULT_ZFS_STREAM_EXT}
    ${XZCAT_BIN} /tmp/Zsh${DEFAULT_ZFS_STREAM_EXT} | ${ZFS_BIN} receive -v ${ZFS_DEF_POOL_NAME}/Software/root/Zsh | ${TAIL_BIN} -n1 2>/dev/null

    ${FETCH_BIN} -o /tmp/Ccache${DEFAULT_ZFS_STREAM_EXT} http://software.verknowsys.com/binary/FreeBSD-11.0-amd64/Ccache-3.1.9-FreeBSD-11.0-amd64${DEFAULT_ZFS_STREAM_EXT}
    ${XZCAT_BIN} /tmp/Ccache${DEFAULT_ZFS_STREAM_EXT} | ${ZFS_BIN} receive -v ${ZFS_DEF_POOL_NAME}/Software/root/Ccache | ${TAIL_BIN} -n1 2>/dev/null

    ${FETCH_BIN} -o /tmp/Lld${DEFAULT_ZFS_STREAM_EXT} http://software.verknowsys.com/binary/FreeBSD-11.0-amd64/Lld-3.9.0-FreeBSD-11.0-amd64${DEFAULT_ZFS_STREAM_EXT}
    ${XZCAT_BIN} /tmp/Lld${DEFAULT_ZFS_STREAM_EXT} | ${ZFS_BIN} receive -v ${ZFS_DEF_POOL_NAME}/Software/root/Lld | ${TAIL_BIN} -n1 2>/dev/null

    ${FETCH_BIN} -o /tmp/Gold${DEFAULT_ZFS_STREAM_EXT} http://software.verknowsys.com/binary/FreeBSD-11.0-amd64/Gold-3.9.0-FreeBSD-11.0-amd64${DEFAULT_ZFS_STREAM_EXT}
    ${XZCAT_BIN} /tmp/Gold${DEFAULT_ZFS_STREAM_EXT} | ${ZFS_BIN} receive -v ${ZFS_DEF_POOL_NAME}/Software/root/Gold | ${TAIL_BIN} -n1 2>/dev/null

    ${FETCH_BIN} -o /tmp/Git${DEFAULT_ZFS_STREAM_EXT} http://software.verknowsys.com/binary/FreeBSD-11.0-amd64/Git-2.8.2-FreeBSD-11.0-amd64${DEFAULT_ZFS_STREAM_EXT}
    ${XZCAT_BIN} /tmp/Git${DEFAULT_ZFS_STREAM_EXT} | ${ZFS_BIN} receive -v ${ZFS_DEF_POOL_NAME}/Software/root/Git | ${TAIL_BIN} -n1 2>/dev/null
fi



${ZFS_BIN} list 2>/dev/null | ${EGREP_BIN} 'User/root' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    wrun "${ZFS_BIN} create ${ZFS_CREATE_OPTS_FOR_ROOT_ELEMS} ${ZFS_DEF_POOL_NAME}/User" && \
    dnote "Initialized origin of: '${ZFS_DEF_POOL_NAME}/User\n"
    wrun "${ZFS_BIN} create -o mountpoint=/User ${ZFS_DEF_POOL_NAME}/User/root" && \
    dnote "Dataset: ${ZFS_DEF_POOL_NAME}/User/root created successfully" && \
    INSTALLED_USER_ROOT="1"
fi

create_dset_if_doesnt_exist () {
    mntpt="${1}"
    mount_opt="${2}"
    debug "Checking existence of dataset: ${ZFS_DEF_POOL_NAME}${mntpt}"
    ${ZFS_BIN} list 2>/dev/null | ${EGREP_BIN} "${ZFS_DEF_POOL_NAME}${mntpt} " > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        wrun "${ZFS_BIN} create -o mountpoint=${mount_opt} ${ZFS_DEF_POOL_NAME}${mntpt}" && \
        dnote "Dataset: ${ZFS_DEF_POOL_NAME}${mntpt} created successfully"
    fi
}

# create zvols for special snappable dirs
for mntpoint in /Jails ${DEFAULT_JAIL_SHARED_LOCATION} ${DEFAULT_JAILS_ROOT_DIR} ${DEFAULT_JAIL_PRISON_LOCATION} ${DEFAULT_JAIL_PRISON_LOCATION}/Cells ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry /Services /Services/root /Shared /Shared/root; do
    if [ ! -d "${mntpoint}" ]; then
        case ${mntpoint} in
            /Services|/Shared)
                create_dset_if_doesnt_exist "${mntpoint}" "none" # mountpoint=none for all "root" datasets
                ;;
            *)
                create_dset_if_doesnt_exist "${mntpoint}" "${mntpoint}"
                ;;
        esac
    fi
done

locations="User Services Shared"
for loc in ${locations}; do
    elem="${ZFS_DEF_POOL_NAME}/${loc}/root"
    sroot="$(${ZFS_BIN} get -H -o value mountpoint ${elem} 2>/dev/null)"
    if [ "${sroot}" != "/${loc}" ]; then
        wrun "${ZFS_BIN} set mountpoint=/${loc} ${elem}" && \
        dnote "Mount point of dataset: ${elem} was reset to: /${loc}"
    fi
done

# OPTIMIZE: XXX: TODO: extend this functionality with incremental patches of differences without destroy:
wrun "${ZFS_BIN} destroy -fR '${ZFS_DEF_POOL_NAME}${DEFAULT_JAIL_SHARED_LOCATION}/${UNAME_OS}-${SYSTEM_VERSION}-${ARCH}'"
wrun "${XZCAT_BIN} '${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}${DEFAULT_ZFS_STREAM_EXT}' | ${ZFS_BIN} receive -F -v '${ZFS_DEF_POOL_NAME}${DEFAULT_JAIL_SHARED_LOCATION}/${UNAME_OS}-${SYSTEM_VERSION}-${ARCH}' | ${TAIL_BIN} -n1 2>/dev/null" && \
    ${ZFS_BIN} snapshot ${ZFS_DEF_POOL_NAME}${DEFAULT_JAIL_SHARED_LOCATION}/${UNAME_OS}-${SYSTEM_VERSION}-${ARCH}@v${VERSION} && \
    dnote "Installed ServeD software base: ${SYSTEM_VERSION}-v${VERSION}" && \
    INSTALLED_BASE_SOFTWARE="1"

export HOME="/User"
export PWD="/User"
if [ -f "${HOME}/.gitconfig" ]; then
    ${GREP_BIN} -R 'ServeD' "${HOME}/.gitconfig" >/dev/null 2>&1
    if [ "$?" != "0" ]; then
        dnote "Detected no local Git configuration" && \
        wrun "${GIT_BIN} config --global user.name 'ServeD node'" && \
        wrun "${GIT_BIN} config --global user.email 'admin@verknowsys.com'" && \
        dnote "Git configuration set in HOME: ${HOME}"
    else
        dnote "Local Git configuration looks fine"
    fi
fi

if [ -d "${SERVED_REPO}" ]; then
    method="updated"
    cd ${SERVED_REPO} && \
    wrun "${GIT_BIN} reset --hard" && \
    wrun "GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${SERVEDOS_GIT_ORIGIN}"
else
    method="cloned"
    cd /var && \
    wrun "GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${SERVEDOS_GIT_ORIGIN} ServeD-OS"
fi && \
dnote "ServeD-OS repository ${method} successfully" && \
INSTALLED_SERVED_OS="1" && \
unset method

note "Installing provided CA root certificates.."
${MKDIR_BIN} -p /etc/ssl
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/ssl/cacert.pem /etc/ssl/cert.pem"
${FETCH_BIN} --no-verify-peer ${CACERT_SOURCE} -o /etc/ssl/cert.pem >> ${SVD_LOG} 2>&1 || \
${FETCH_BIN} --no-verify-peer ${CACERT_SOURCE_ALT} -o /etc/ssl/cert.pem >> ${SVD_LOG} 2>&1 || \
warn "CA CERTS: Both sources are unavailable!"

if [ ! -d "${SOFIN_REPO}" ]; then
    wrun "cd /var"
    wrun "${GIT_BIN} clone ${DEFAULT_SOFIN_REPOSITORY}"
    method="cloned"
else
    wrun "cd ${SOFIN_REPO}"
    wrun "${GIT_BIN} pull ${DEFAULT_SOFIN_REPOSITORY}"
    method="pulled"
fi
cd ${SOFIN_REPO}
bin/install && \
INSTALLED_SOFIN="1" && \
dnote "Sofin repository ${method} successfully"
unset method

. /usr/share/sofin/loader

################################################################################
#
#                   Sofin environment initialized from now on.
#
################################################################################

JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${SYSTEM_VERSION}-${SYSTEM_ARCH}"

wrun "${TEST_BIN} -d ${JAIL_SOURCE}" # ASSERT:

if [ "${SHELL}" != "${DEFAULT_SHELL}" ]; then
    ${GREP_BIN} -R 'Zsh/exports/zsh' /etc/shells > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        ${PRINTF_BIN} "${DEFAULT_SHELL}\n" >> /etc/shells && \
            debug "Appended: ${DEFAULT_SHELL} to: /etc/shells"
    fi
    wrun "${CHSH_BIN} -s ${DEFAULT_SHELL}"
    wrun "${PWD_MKDB_BIN} -p /etc/master.passwd"
    dnote "Default shell set to: ${DEFAULT_SHELL}"
    INSTALLED_SYSTEM_SHELL="1"
fi

if [ ! -d "${VKS_KERNEL}" ]; then
    wrun "${CP_BIN} -r ${JAIL_SOURCE}/boot/kernel ${VKS_KERNEL}" && \
    dnote "Kernel: ${VKS_KERNEL} installed successfully" && \
    INSTALLED_KERNEL="1"
else
    ${RM_BIN} -rf ${VKS_KERNEL}.old
    debug "Kernel update from: ${JAIL_SOURCE}"
    wrun "${MV_BIN} ${VKS_KERNEL} ${VKS_KERNEL}.old" && \
    wrun "${CP_BIN} -vr ${JAIL_SOURCE}/boot/kernel ${VKS_KERNEL}" && \
    dnote "Kernel updated successfully" && \
    INSTALLED_KERNEL="1"
fi

# ${CP_BIN} /Software/Sudo-static/bin/sudo ${JAIL_SOURCE}/usr/bin/
# ${CHMOD_BIN} 4755 ${JAIL_SOURCE}/usr/bin/sudo
# note "Updating sudo for ${SYSTEM_VERSION} jail base"

for f in ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}; do
    ${TEST_BIN} -f ${f} && wrun "${CHFLAGS_BIN} -v noschg ${f}"
done
if [ -f "${SVDINIT_BIN}" ]; then
    wrun "${RM_BIN} -fv ${SVDINIT_BIN}" && \
    debug "Removed old: ${SVDINIT_BIN}"
fi
wrun "${CLANG_BIN} -c ${SERVED_REPO}/src/getmntopts.c -o ${SERVED_REPO}/src/getmntopts.o" && \
wrun "${CLANG_BIN} -static -o ${SVDINIT_BIN} ${SERVED_REPO}/src/svdsysup.c -lutil -lcrypt -DSECURE -DSVD_LOGIN_CAP ${SERVED_REPO}/src/getmntopts.o" && \
wrun "${STRIP_BIN} ${SVDINIT_BIN}" && \
wrun "${RM_BIN} -f ${SVDINIT_BACKUP_BIN}" && \
wrun "${INSTALL_BIN} -v ${SVDINIT_BIN} ${DEFAULT_JAILS_ROOT_DIR}/sbin" && \
wrun "${CP_BIN} -v ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}" && \
dnote "Installed: ${SVDINIT_BIN}" && \
INSTALLED_SVDINIT="1"

for f in ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}; do
    ${TEST_BIN} -f "${f}" && wrun "${CHFLAGS_BIN} -v schg ${f}"
done

wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/rc.svdsysup /etc" && \
wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/rc.svdsysup.sh /etc" && \
dnote "Installed: system binary updater" && \
INSTALLED_SVDSYSUP="1"

local_loader_conf="/boot/loader.conf.local"
if [ -f "${local_loader_conf}" ]; then
    cp "${local_loader_conf}" "${local_loader_conf}.old"
fi
wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/loader.conf.served ${local_loader_conf}" && \
dnote "Installed: local boot loader configuration" && \
INSTALLED_BOOT_CONF="1"

${MKDIR_BIN} -p ${SYSSVD_LOGNG_PREFIX}/etc ${SYSSVD_LOGNG_PREFIX}/var
wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/syslog-ng/syslog-ng.conf ${SYSSVD_LOGNG_PREFIX}/etc/" && \
wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/syslog-ng/scl.conf ${SYSSVD_LOGNG_PREFIX}/etc/" && \
dnote "Installed: system logger" && \
INSTALLED_SYSLOGNG="1"

# NOTE: causing configure locks!
# if [ ! -L "/etc/malloc.conf" ]; then
#     # <Zer0P> it's a "hack" to elliminate the cost of the open and parsing
#     ${LN_BIN} -s 'abort:false,junk:false,lg_chunk:14' /etc/malloc.conf
# fi

if [ ! -x "/etc/rc.d/served" ]; then
    wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/rc.d/served /etc/rc.d" && \
    dnote "Installed rc script for: ServeD" && \
    INSTALLED_BUILDHOST_RC="1"
fi
if [ ! -x "/etc/rc.d/syslog-ng" ]; then
    wrun "${CP_BIN} -v /etc/rc.d/syslogd /etc/rc.d/syslog-ng" && \
    ${SED_BIN} -i '' -e 's#pidfile=.*$#pidfile="/var/run/syslog-ng.pid"#' /etc/rc.d/syslog-ng && \
    ${SED_BIN} -i '' -e 's#syslogd#syslog_ng#g' /etc/rc.d/syslog-ng && \
    dnote "Created rc script for: Syslog-ng" && \
    INSTALLED_SYSLOGNG_RC="1"
fi

${GREP_BIN} -R 'syslogd_enable' /etc/rc.conf 2>/dev/null | ${GREP_BIN} '"YES"' > /dev/null 2>&1
if [ "$?" = "0" ]; then
    service syslogd stop >/dev/null 2>&1
    killall -9 syslogd >/dev/null 2>&1
    ${SED_BIN} -i '' -e 's#^.*syslogd_enable.*=.*$##g' /etc/rc.conf && \
    dnote "Disabled syslogd, enabled: syslog-ng" && \
    INSTALLED_DISABLE_FOR_SYSLOGD="1"
else
    ${PS_BIN} axv 2>/dev/null | ${GREP_BIN} -v grep 2>/dev/null | ${GREP_BIN} 'syslog-ng' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        wrun "service syslog-ng reload" && \
        dnote "Reloaded: Syslog-ng"
    fi
fi

wrun "${CP_BIN} -v ${SERVED_REPO}/etc/sysctl.conf.served /etc/sysctl.conf" && \
dnote "Installed: sysctl configuration" && \
INSTALLED_SYSCTL_CONF="1"

dnote "Installed: periodic configuration"

wrun "${CP_BIN} -v ${SERVED_REPO}/etc/src.conf /etc/"
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/make.conf /etc/"
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/mime.types.served /etc/mime.types"
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/ttys.served /etc/ttys"
# wrun "${CP_BIN} -v ${SERVED_REPO}/etc/login.conf.served /etc/login.conf"
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/periodic.conf.served /etc/periodic.conf"
# wrun "${CAP_MKDB_BIN} /etc/login.conf"
dnote "Installed to /etc: make.conf, src.conf, mime.types, ttys, login.conf, periodic.conf"
INSTALLED_LOGIN_CONF="1"

dnote "Setting up network"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 2>/dev/null | ${TAIL_BIN} -n 4 2>/dev/null | ${HEAD_BIN} -n 1 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
GVR_HOST_IP_ADDR="$(ifconfig ${DEFAULT_INTERFACE} 2>/dev/null | ${GREP_BIN} -v grep 2>/dev/null | ${GREP_BIN} inet 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
DEFAULT_HOST_ADDRESS_FILE="/etc/host.default"
NETS_LIST="$(${IFCONFIG_BIN} ${DEFAULT_INTERFACE} 2>/dev/null | ${GREP_BIN} inet 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
AMOUNT=$(${PRINTF_BIN} "${NETS_LIST}\n" | ${WC_BIN} -l 2>/dev/null)
NETS=""
if [ ${AMOUNT} -eq 1 ]; then
    ${PRINTF_BIN} "${NETS_LIST}\n" > ${DEFAULT_HOST_ADDRESS_FILE}
else
    dnote "Detected several IP addresses!"
    sleep 2
    for net in ${NETS_LIST}; do
        NETS="$NETS $net - "
    done
    ${DIALOG_BIN} --menu "Pick main IP address:" 0 0 0 ${NETS} 2> ${DEFAULT_HOST_ADDRESS_FILE}
fi

DEFAULT_INTERFACE_ADDRESS="$(${CAT_BIN} ${DEFAULT_HOST_ADDRESS_FILE} 2>/dev/null)"
wrun "${CP_BIN} -v ${SERVED_REPO}${PF_CONF_FILE}.served ${PF_CONF_FILE}" && \
${SED_BIN} -i '' -e "s/INTERNAL_NETWORK/${INTERNAL_NETWORK}/g" ${PF_CONF_FILE} && \
${SED_BIN} -i '' -e "s/NETWORK_EXTERNAL_INTERFACE/${DEFAULT_INTERFACE}/g" ${PF_CONF_FILE} && \
${SED_BIN} -i '' -e "s/NETWORK_EXTERNAL_ADDRESS/${DEFAULT_INTERFACE_ADDRESS}/g" ${PF_CONF_FILE} && \
wrun "${TOUCH_BIN} ${PF_CONF_FILE}.local" && \
dnote "Installed Packet Filter configuration" && \
INSTALLED_SYSLOGNG_CONF="1"

${GREP_BIN} -R 'pf_enable' /etc/rc.conf 2>/dev/null | ${GREP_BIN} '"YES"' > /dev/null 2>&1
if [ "$?" = "0" ]; then
    wrun "service pf restart" && \
    dnote "Applied firewall rules:\n$(${PFCTL_BIN} -sn 2>/dev/null)"
else
    dwarn "Packet Filter is disabled in: '/etc/rc.conf'"
fi

rc_local_conf="/etc/rc.conf.local"
${GREP_BIN} -R 'ServeD-Install-Script' ${rc_local_conf} >/dev/null 2>&1
if [ "$?" != "0" ]; then
    ${CAT_BIN} ${SERVED_REPO}/etc/rc.conf.served >> ${rc_local_conf} && \
    dnote "Installed: ServeD specific local configuration"
    ${SED_BIN} -i '' -e "s/NETWORK_EXTERNAL_INTERFACE/${DEFAULT_INTERFACE}/g" ${rc_local_conf}
fi
${GREP_BIN} 'gvr boot' /etc/rc >/dev/null 2>&1
if [ "$?" != "0" ]; then
    ${SED_BIN} -i '' -e "s|^date$|${GVR_BIN} boot|" /etc/rc && \
    dnote "Added $(distn "gvr boot") to rc configuration"
fi

# TIMESTAMP="$(${DATE_BIN} +%s 2>/dev/null)"

cert_size="$(${STAT_BIN} -f'%z' /etc/ssl/cert.pem 2>/dev/null)"
if [ -z "${cert_size}" ]; then
    cert_size="0"
elif [ "${cert_size}" = "0" ]; then
    wrun "${CP_BIN} -v ${SERVED_REPO}/etc/ssl/cacert.pem /etc/ssl/cert.pem" && \
    dnote "CA CERTS: Used bundled version of cert.pem from ServeD-OS repository" && \
    INSTALLED_ROOT_SSL_CERTS="2"
elif [ ${cert_size} -gt 220000 ]; then
    dnote "System ROOT-TLS/SSL certificates installed successfully" && \
    INSTALLED_ROOT_SSL_CERTS="1"
fi

# note "Checking for a ZFS-feature-updates of zpool: ${ZFS_DEF_POOL_NAME}"
# ${ZPOOL_BIN} upgrade ${ZFS_DEF_POOL_NAME} | ${HEAD_BIN} -n1

disks=$(${GEOM_BIN} disk list 2>/dev/null | ${EGREP_BIN} 'Name: [a-z]?da.*$' 2>/dev/null | ${SED_BIN} 's/^.*\ //' 2>/dev/null)
if [ -z "${disks}" ]; then
    error "System GEOM detected NO hard disks available on this machine. Installer can't do his thing -_-"
fi
# update /boot code:
dnote "Updating /boot.."
for bootelem in zfsloader zfsboot userboot.so pxeboot pmbr mbr loader.efi loader gptzfsboot gptboot boot2 boot1.efifat boot1.efi boot1 boot0sio boot0 boot cdboot; do
    ${CP_BIN} -vf "${JAIL_SOURCE}/boot/${bootelem}" "/boot/${bootelem}"
done
${CP_BIN} -f ${JAIL_SOURCE}/boot/*.4th /boot/
${CP_BIN} -f ${JAIL_SOURCE}/boot/*.rc /boot/
${CP_BIN} -f ${JAIL_SOURCE}/boot/*.so /boot/
for disk in ${disks}; do
    wrun "${GRPART_BIN} bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ${disk}" && \
    dnote "Updated ZFS bootcode for disk: ${disk}" && \
    INSTALLED_BOOT_ZFS="1"
done
wrun "${KLDXREF_BIN} ${VKS_KERNEL}" && \
dnote "Generated kernel hints for kernel: ${VKS_KERNEL}"

wrun "${ZFS_BIN} set com.svd:version=${LATEST_VERSION} ${ZFS_DEF_POOL_NAME}/ROOT" && \
wrun "${ZFS_BIN} set com.svd:os_version=${SYSTEM_VERSION} ${ZFS_DEF_POOL_NAME}/ROOT" && \
wrun "${TOUCH_BIN} /.svdsysup" && \
dnote "ServeD system properties set successfully"

${UNAME_BIN} -a 2>/dev/null | ${GREP_BIN} VERKNOWSYS > /dev/null 2>&1
if [ "$?" = "0" ]; then
    dnote "ServeD update complete!"
else
    dnote "ServeD installation complete!" # with status: "jedenelement: 0 drugi: 0 jakis: 1 trzeci: 0 itd.."
fi

exit 0

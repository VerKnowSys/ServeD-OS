#!/bin/sh

set -e

# OS version same as destination system version 1:1
VKS_KERNEL="/boot/verknowsys"
SYSTEM_VERSION="11.0" # the default
ORIGIN="origin"
CACHE_DIR="/var/.cache"
DEFAULT_JAIL_PRISON_LOCATION='/Jails/Prison'
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
DEFAULT_ZPOOL="zroot"
DEFAULT_SYSTEM_PREFIX="/usr/bin"
UNBOUND_CONF_DIR="/etc/unbound/conf.d"
UNBOUND_CONF="/etc/unbound/unbound.conf"
BASE="ServeD-OS-Base"
LOG="/var/log/svd-install.log"
SERVED_REPO="/var/ServeD-OS"
SERVEDOS_GIT_ORIGIN="https://github.com/VerKnowSys/ServeD-OS.git"
SOFIN_REPO="/var/sofin"
BASE_SOURCE="http://served.verknowsys.com/"
ARCH="$(uname -m)"
INTERNAL_NETWORK="10.2.1.0"
PF_CONF_FILE="/etc/pf.conf"
RC_FILE="/etc/rc"
GIT_BIN="/Software/Git/exports/git"
SVDINIT_BIN="/sbin/svdinit"
LATEST_VERSION="$(fetch -q -o - ${BASE_SOURCE}/version-latest)"
VERSION="$(zfs get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT)"
if [ "${VERSION}" = "-" ]; then
    # zfs set com.svd:version=${LATEST_VERSION} ${DEFAULT_ZPOOL}/ROOT
    printf "No version specified. Picking last version: ${LATEST_VERSION}\n"
else
    if [ "${VERSION}" = "${LATEST_VERSION}" ]; then
        if [ "$1" = "-f" ]; then
            printf "Forcing installation of ServeD base system in version: ${VERSION}\n"
        else
            printf "You are already using latest version: ${VERSION} of ServeD base system\n"
            exit 0
        fi
    fi
fi
VERSION="${LATEST_VERSION}"

# sanity checks
if [ "$(uname)" != "FreeBSD" ]; then
    printf "Only 64bit HardenedBSD hosts are supported by installer\n"
    exit 1
fi

# set lz4 compression and checksum mechanism for all pools:
for pool in $(zpool list -H | awk '{print $1;}'); do
    printf "Setting compression: lz4, checksum: fletcher4 on zpool: ${pool}\n" >> ${LOG} 2>&1
    zfs set compression=lz4 ${pool}
    zfs set checksum=fletcher4 ${pool}
done

DEFAULT_JAILS_ROOT_DIR="${DEFAULT_JAIL_SHARED_LOCATION}/$(uname -s)-${SYSTEM_VERSION}-$(uname -m)"

mkdir -p ${CACHE_DIR} >> ${LOG} 2>&1
if [ ! -f "${CACHE_DIR}/Software-${SYSTEM_VERSION}-${ORIGIN}-${ARCH}.zfs.xz" ]; then
    printf "Base snapshot archive wasn't downloaded yet\n"
    fetch ${BASE_SOURCE}/Software-${SYSTEM_VERSION}-${ORIGIN}-${ARCH}.zfs.xz -o ${CACHE_DIR}/Software-${SYSTEM_VERSION}-${ORIGIN}-${ARCH}.zfs.xz
    if [ "$?" != "0" ]; then
        printf "Software snapshot isn't available, or something just went wrong while fetching archive\n"
        exit 1
    fi
fi

if [ ! -f "${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}.tar.xz" ]; then
    printf "Jails archive wasn't downloaded yet\n"
    fetch ${BASE_SOURCE}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}.tar.xz -o ${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}.tar.xz
    if [ "$?" != "0" ]; then
        printf "Jails binary snapshot isn't available, or something just went wrong while fetching archive\n"
        exit 1
    fi
fi

# create Software ${ORIGIN}:
printf "Initializing origin of /Software\n"
xzcat ${CACHE_DIR}/Software-${SYSTEM_VERSION}-${ORIGIN}-${ARCH}.zfs.xz | zfs receive ${DEFAULT_ZPOOL}/Software >> ${LOG} 2>&1 || true
zfs set mountpoint=none ${DEFAULT_ZPOOL}/Software >> ${LOG} 2>&1 || true
zfs set compression=lz4 ${DEFAULT_ZPOOL}/Software
zfs set dedup=on ${DEFAULT_ZPOOL}/Software
zfs snapshot ${DEFAULT_ZPOOL}/Software@${ORIGIN} >> ${LOG} 2>&1 || true
zfs clone ${DEFAULT_ZPOOL}/Software@${ORIGIN} ${DEFAULT_ZPOOL}/Software/root >> ${LOG} 2>&1 || true
zfs snapshot ${DEFAULT_ZPOOL}/ROOT/default@${ORIGIN} >> ${LOG} 2>&1 || true

# create zvols for special snappable dirs
for mntpoint in /Jails ${DEFAULT_JAIL_SHARED_LOCATION} ${DEFAULT_JAILS_ROOT_DIR} ${DEFAULT_JAIL_PRISON_LOCATION} ${DEFAULT_JAIL_PRISON_LOCATION}/Cells ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry /User /User/root /SystemUsers /Services /Services/root; do
    if [ ! -d "${mntpoint}" ]; then
        printf "Creating zvol: ${mntpoint}\n" >> ${LOG} 2>&1
        case ${mntpoint} in
            /Software|/User|/Services)
                zfs create -o compression=lz4 -o dedup=on -o mountpoint=none -o casesensitivity=sensitive "${DEFAULT_ZPOOL}${mntpoint}" || true
                    ;;
            *)
                zfs create -o compression=lz4 -o dedup=on -o mountpoint=${mntpoint} -o casesensitivity=sensitive "${DEFAULT_ZPOOL}${mntpoint}" || true
                ;;
        esac
    fi
done

zfs set mountpoint=/Software ${DEFAULT_ZPOOL}/Software/root || true
zfs set mountpoint=/Services ${DEFAULT_ZPOOL}/Services/root || true

# printf "Flushing secadm rules before installation\n"
# test -x /usr/sbin/secadm && secadm flush || true

if [ "$?" != "0" ]; then
    printf "ERROR: Binary snapshot is corrupted or something just went wrong with archive\n"
    exit 1
fi

printf "Installing Base ${SYSTEM_VERSION}-v${VERSION}\n"
tar xf ${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}.tar.xz --directory /

if [ "$?" != "0" ]; then
    printf "ERROR: Base snapshot is corrupted or something just went wrong with archive\n"
    exit 1
fi

if [ ! -d "${SOFIN_REPO}" ]; then
    cd /var
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone https://verknowsys@bitbucket.org/verknowsys/sofin.git
    cd ${SOFIN_REPO}
else
    cd ${SOFIN_REPO}
    ${GIT_BIN} stash save "install-update-$(date +%F)"
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull https://verknowsys@bitbucket.org/verknowsys/sofin.git
fi

bin/install
. /etc/sofin.conf.sh
JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${SYSTEM_VERSION}-${SYSTEM_ARCH}"
printf "Installing Sofin environment with jail source: ${JAIL_SOURCE}\n"
PREFIX="${JAIL_SOURCE}" bin/install

if [ "${SHELL}" != "/Software/Zsh/exports/zsh" ]; then
    note "Setting up ZSH shell"
    ${PRINTF_BIN} "/Software/Zsh/exports/zsh\n" >> /etc/shells
    ${CHSH_BIN} -s /Software/Zsh/exports/zsh >> ${LOG} 2>&1
fi

if [ -d "/SystemUsers" ]; then
    note "Setting up new root home dir: /SystemUsers"
    if [ -d "/root" ]; then
        ${CP_BIN} -R /root/ /SystemUsers
    fi
    ${PW_BIN} user mod root -d /SystemUsers >> ${LOG} 2>&1
fi

note "Installing additional Software"
if [ "${ARCH}" = "arm" ]; then
    sofin get Rsync Mosh Pstree Vim Tmux Atop Vifm
else
    sofin get Rsync Syslog-ng Mosh Pstree Vim Tmux Atop Vifm Mc
fi

note "Updating /boot"
rm -rf /tmp/tmp-loader.conf || true
cp -v /boot/loader.conf /tmp/tmp-loader.conf >> ${LOG}  2>&1
/Software/Rsync/exports/rsync --exclude 'kernel' --links --delete --compress --perms --executability --acls --xattrs --owner --group --times --recursive ${JAIL_SOURCE}/boot/ /boot >> ${LOG}  2>&1
cp -v /tmp/tmp-loader.conf /boot/loader.conf >> ${LOG}  2>&1

note "Installing custom kernel"
if [ ! -d "${VKS_KERNEL}" ]; then
    ${CP_BIN} -vr ${JAIL_SOURCE}/boot/kernel ${VKS_KERNEL} >> ${LOG} 2>&1
else
    ${RM_BIN} -rf ${VKS_KERNEL}.old >> ${LOG} 2>&1 || true
    ${MV_BIN} ${VKS_KERNEL} ${VKS_KERNEL}.old >> ${LOG} 2>&1
    ${CP_BIN} -vr ${JAIL_SOURCE}/boot/kernel ${VKS_KERNEL} >> ${LOG} 2>&1
fi

note "Updating sudo for ${SYSTEM_VERSION} jail base"
${CP_BIN} /Software/Sudo-static/bin/sudo ${JAIL_SOURCE}/usr/bin/
${CHMOD_BIN} 4755 ${JAIL_SOURCE}/usr/bin/sudo

if [ -d "${SERVED_REPO}" ]; then
    cd ${SERVED_REPO}
    ${GIT_BIN} reset --hard
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${SERVEDOS_GIT_ORIGIN}
    ${CP_BIN} -Rv usr/ /usr/ >> ${LOG} 2>&1
else
    cd /var
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${SERVEDOS_GIT_ORIGIN}
fi

note "Installing svdsysup"
${CP_BIN} -v ${SERVED_REPO}/etc/rc.svdsysup /etc/
chflags noschg ${SVDINIT_BIN} || true
clang -static -o ${SVDINIT_BIN} ${SERVED_REPO}/src/svdsysup.c -lutil -lcrypt -DSECURE -DLOGIN_CAP
chflags schg ${SVDINIT_BIN} || true

note "Setting up shell environment"
${TEST_BIN} -f /etc/zshenv || ${CP_BIN} -v ${SERVED_REPO}/etc/zshenv.served /etc/zshenv >> ${LOG} 2>&1

note "Setting up default boot loader configuration"
${TEST_BIN} -f /boot/loader.conf || ${CP_BIN} -v ${SERVED_REPO}/etc/loader.conf.served /boot/loader.conf >> ${LOG} 2>&1

note "Setting up make.conf and src.conf"
${CP_BIN} -v ${SERVED_REPO}/etc/make.conf /etc/make.conf >> ${LOG} 2>&1
${CP_BIN} -v ${SERVED_REPO}/etc/src.conf /etc/src.conf >> ${LOG} 2>&1

note "Setting up mime types"
${CP_BIN} -v ${SERVED_REPO}/etc/mime.types.served /etc/mime.types >> ${LOG} 2>&1

# replace default syslogd with preconfigured syslog-ng
note "Setting up system logger"
${MKDIR_BIN} -p /etc/syslog-ng
${CP_BIN} ${SERVED_REPO}/etc/syslog-ng/syslog-ng.conf /etc/syslog-ng/
${CP_BIN} ${SERVED_REPO}/etc/syslog-ng/scl.conf /etc/syslog-ng/

SYSLOGNG_PREFIX="/Software/Syslog-ng"
${RM_BIN} -rf ${SYSLOGNG_PREFIX}/etc
${LN_BIN} -s /etc/syslog-ng ${SYSLOGNG_PREFIX}/etc
test -d ${SYSLOGNG_PREFIX}/var && ${RM_BIN} -rf ${SYSLOGNG_PREFIX}/var && ${LN_BIN} -s /var/run ${SYSLOGNG_PREFIX}/var

note "Creating rc script for syslog-ng"
test ! -x /etc/rc.d/syslog-ng && ${CP_BIN} /etc/rc.d/syslogd /etc/rc.d/syslog-ng
${SED_BIN} -i '' -e 's#pidfile=.*$#pidfile="/var/run/syslog-ng.pid"#' /etc/rc.d/syslog-ng
${SED_BIN} -i '' -e 's#syslogd#syslog_ng#g' /etc/rc.d/syslog-ng
# ${SED_BIN} -i '' -e 's#command=.*$#command="/Software/Unbound/exports/unbound"#' /etc/rc.d/local_unbound

note "Setting up login"
${CP_BIN} -v ${SERVED_REPO}/etc/login.conf.served /etc/login.conf >> ${LOG} 2>&1
${CAP_MKDB_BIN} /etc/login.conf >> ${LOG} 2>&1

note "Setting up sysctl"
${TEST_BIN} -f /etc/sysctl.conf || ${CP_BIN} -v ${SERVED_REPO}/etc/sysctl.conf.served /etc/sysctl.conf >> ${LOG} 2>&1

note "Setting up periodic"
${TEST_BIN} -f /etc/periodic.conf ||${CP_BIN} -v ${SERVED_REPO}/etc/periodic.conf.served /etc/periodic.conf >> ${LOG} 2>&1

note "Setting up rc configuration"
${GREP_BIN} 'ServeD' ${RC_FILE}.conf > /dev/null || ${CAT_BIN} ${SERVED_REPO}${RC_FILE}.conf.served >> ${RC_FILE}.conf

# note "Installing secadm"
# ${MKDIR_BIN} -p /etc/rules
# ${CP_BIN} -v ${SERVED_REPO}/kernel/modules/${SYSTEM_VERSION}/secadm.ko /boot/modules/
# ${CP_BIN} -v ${SERVED_REPO}/etc/rc.d/secadm /etc/rc.d/
# ${CP_BIN} -v ${SERVED_REPO}/etc/secadm.rules /etc/
# ${CP_BIN} -v ${SERVED_REPO}/usr/sbin/secadm /usr/sbin/
# ${CP_BIN} -v ${SERVED_REPO}/usr/sbin/secadm ${JAIL_SOURCE}/usr/sbin/
# ${CP_BIN} -v ${SERVED_REPO}/usr/lib/libsecadm.so* /usr/lib/
# ${CP_BIN} -v ${SERVED_REPO}/usr/lib/libsecadm.so* ${JAIL_SOURCE}/usr/lib/

# note "Updating secadm.rules file in each governed cells"
# for cell in $(ls ${DEFAULT_JAIL_PRISON_LOCATION}/Cells); do
#     cp ${SERVED_REPO}/etc/secadm.rules ${DEFAULT_JAIL_PRISON_LOCATION}/Cells/${cell}/etc/
# done

note "Setting up network"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 | ${TAIL_BIN} -n 4 | ${HEAD_BIN} -n 1 | ${AWK_BIN} '{print $2;}')"
DEFAULT_HOST_ADDRESS="/etc/host.default"
NETS_LIST="$(${IFCONFIG_BIN} ${DEFAULT_INTERFACE} | ${GREP_BIN} inet | ${AWK_BIN} '{print $2;}')"
AMOUNT=$(${PRINTF_BIN} "${NETS_LIST}\n" | ${WC_BIN} -l)
NETS=""
if [ ${AMOUNT} -eq 1 ]; then
    ${PRINTF_BIN} "${NETS_LIST}\n" > ${DEFAULT_HOST_ADDRESS}
else
    note "Detected several IP addresses"
    for net in ${NETS_LIST}; do
        NETS="$NETS $net - "
    done
    ${DIALOG_BIN} --menu "Pick main IP address:" 0 0 0 ${NETS} 2> ${DEFAULT_HOST_ADDRESS}
fi

note "Setting up firewall"
DEFAULT_INTERFACE_ADDRESS="$(${CAT_BIN} ${DEFAULT_HOST_ADDRESS})"
${CP_BIN} -v ${SERVED_REPO}${PF_CONF_FILE}.served ${PF_CONF_FILE} >> ${LOG} 2>&1
${SED_BIN} -i '' -e "s/__INTERNAL_NETWORK/${INTERNAL_NETWORK}/g" ${PF_CONF_FILE}
${SED_BIN} -i '' -e "s/__EXTERNAL_INTERFACE/${DEFAULT_INTERFACE}/g" ${PF_CONF_FILE}
${SED_BIN} -i '' -e "s/__EXTERNAL_ADDRESS/${DEFAULT_INTERFACE_ADDRESS}/g" ${PF_CONF_FILE}
${TOUCH_BIN} ${PF_CONF_FILE}.local
service pf restart
debug "Applied firewall rules:\n$(${PFCTL_BIN} -sn)"

note "Setting up rc"
${GREP_BIN} 'ServeD' ${RC_FILE} > /dev/null || (${SED_BIN} -i '' -e '$d' ${RC_FILE} && ${SED_BIN} -i '' -e '$d' ${RC_FILE} && ${SED_BIN} -i '' -e '$d' ${RC_FILE} && ${CAT_BIN} ${SERVED_REPO}${RC_FILE}.served >> ${RC_FILE})

note "Setting up core services"
${TEST_BIN} -f /etc/ttys || ${CP_BIN} -v ${SERVED_REPO}/etc/ttys.served /etc/ttys >> ${LOG} 2>&1

note "Setting up Unbound DNS resolver for domains bound to Jails"
test ! -f ${UNBOUND_CONF_DIR}/jailed.conf && ${PRINTF_BIN} "include: ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry/*/jail-domains/*.conf\n" > ${UNBOUND_CONF_DIR}/jailed.conf
test -f ${UNBOUND_CONF} && ${MV_BIN} ${UNBOUND_CONF} ${UNBOUND_CONF}.old
${PRINTF_BIN} "# Generated by ServeD installer:
server:
    interface: 127.0.0.1
    interface: $(${CAT_BIN} ${DEFAULT_HOST_ADDRESS})
    access-control: 10.0.0.0/8 allow
    access-control: 192.168.0.0/16 allow
    username: unbound
    directory: /var/unbound
    chroot: /var/unbound
    pidfile: /var/run/local_unbound.pid
    auto-trust-anchor-file: /var/unbound/root.key

include: /var/unbound/forward.conf
include: /var/unbound/lan-zones.conf
include: /var/unbound/conf.d/*.conf
" > ${UNBOUND_CONF}
# XXX: these should be generated more precisely:
${TOUCH_BIN} /var/unbound/forward.conf
${TOUCH_BIN} /var/unbound/lan-zones.conf

note "Setting up default ssl root certificates"
${MKDIR_BIN} -p /etc/ssl >> ${LOG} 2>&1
${CP_BIN} -v ${SERVED_REPO}/etc/ssl/cacert.pem /etc/ssl/cert.pem >> ${LOG} 2>&1

TIMESTAMP="$(date +%F-%s)"
for snap_ in /Software; do
    snap="${DEFAULT_ZPOOL}${snap_}/root@${SYSTEM_VERSION}-v${VERSION}-${TIMESTAMP}"
    note "Creating Software/root snapshot: ${snap}"
    ${ZFS_BIN} snapshot "${snap}"
done

${PRINTF_BIN} "\nServeD OS v${VERSION}\n\n" > /etc/motd

note "Destroying unnecessary datasets.."
${ZFS_BIN} destroy ${DEFAULT_ZPOOL}/usr/src || true
${ZFS_BIN} destroy ${DEFAULT_ZPOOL}/var/mail >> ${LOG} 2>&1 || true
${ZFS_BIN} destroy ${DEFAULT_ZPOOL}/Software@--head-- >> ${LOG} 2>&1 || true

note "Cleaning unnecessary directories"
${RM_BIN} -rfv /root /mnt /media /proc /COPYRIGHT /sys >> ${LOG} 2>&1

set +e
note "Replacing syslogd with syslog-ng"
service syslogd stop >/dev/null 2>&1
service syslog-ng restart

note "Installing Governor to host system"
${INSTALL_BIN} ${SERVED_REPO}/gvr ${DEFAULT_SYSTEM_PREFIX}

note "Updating system version property"
${ZFS_BIN} set com.svd:version=${LATEST_VERSION} ${DEFAULT_ZPOOL}/ROOT
${ZFS_BIN} set com.svd:os_version=${SYSTEM_VERSION} ${DEFAULT_ZPOOL}/ROOT
${TOUCH_BIN} /.svdsysup
disks=$(geom disk list | grep 'Name:\ d.*' | sed 's/^.*\ //')
for disk in $disks; do
    note "Updating ZFS bootcode for disk: ${disk}"
    gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ${disk}
    if [ "$?" != "0" ]; then
        warn "Bootcode update finished with an error for disk: ${disk}!"
        sleep 2
    fi
    kldxref ${VKS_KERNEL}
done

${UNAME_BIN} -a | ${GREP_BIN} VERKNOWSYS > /dev/null 2>&1
if [ "$?" = "0" ]; then
    note
    note "ServeD system update complete!"
else
    note
    note "ServeD system installation complete!"
    note "You must reboot to apply new kernel and system configuration."
fi

exit 0

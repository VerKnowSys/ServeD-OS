#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#


# tunables:
export PATH="/bin:/usr/bin:/sbin:/usr/sbin"
SOFTWARE_PATCHES="P001 P002 P003"
INSTALL_SCRIPT_VERSION="0.6.3"
SYSTEM_VERSION="11.0" # the default
DEFAULT_ZPOOL="zroot"
INTERNAL_NETWORK="10.2.1.0"
ORIGIN="origin"
SYSSVD_LOGNG_PREFIX="/Services/Syslog-ng"
SOFIN_REPO="/var/sofin"
SERVED_REPO="/var/ServeD-OS"
CACERT_SOURCE="http://curl.haxx.se/ca/cacert.pem"
CACERT_SOURCE_ALT="http://raw.githubusercontent.com/bagder/ca-bundle/master/ca-bundle.crt"
DEFAULT_ARCHIVE_EXT=".txz"

# const definitions:
reset='\033[0m'
cyan='\033[36;40m'
green='\033[32;40m'
magenta='\033[35;40m'
red='\033[31;40m'
yellow='\033[33;40m'
error_char="âœ˜"
SERVEDOS_GIT_ORIGIN="https://verknowsys@bitbucket.org/verknowsys/served-os.git"
DEFAULT_SOFIN_REPOSITORY="https://verknowsys@bitbucket.org/verknowsys/sofin.git"
BASE="ServeD-OS-Base"
BASE_SOURCE="http://served.verknowsys.com/"
VKS_KERNEL="/boot/verknowsys"
CACHE_DIR="/var/.cache"
ZFS_CREATE_OPTS_FOR_ROOT_ELEMS=" -o dedup=on -o compression=lz4 -o mountpoint=none -o casesensitivity=sensitive"
DEFAULT_JAIL_PRISON_LOCATION="/Jails/Prison"
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
PF_CONF_FILE="/etc/pf.conf"
RC_FILE="/etc/rc"

DEFAULT_SHELL="/Software/Zsh/exports/zsh"
TAIL_BIN="/usr/bin/tail"
CHFLAGS_BIN="/bin/chflags"
GIT_BIN="/Software/Git/exports/git"
ZPOOL_BIN="/sbin/zpool"
ZFS_BIN="/sbin/zfs"
SVDINIT_BIN="/sbin/svdinit"
SVDINIT_BACKUP_BIN="/var/.svdinit"
TAR_BIN="/usr/bin/tar"
FETCH_BIN="/usr/bin/fetch"
BASENAME_BIN="/usr/bin/basename"
GRPART_BIN="/sbin/gpart"
GEOM_BIN="/sbin/geom"
KLDXREF_BIN="/usr/sbin/kldxref"
PRINTF_BIN="/usr/bin/printf"
MKDIR_BIN="/bin/mkdir"
UNAME_BIN="/usr/bin/uname"
DATE_BIN="/bin/date"
CLANG_BIN="/usr/bin/clang"
GREP_BIN="/usr/bin/grep"
EGREP_BIN="/usr/bin/egrep"
XZ_BIN="/usr/bin/xz"
SYNC_BIN="/bin/sync"
XZCAT_BIN="/usr/bin/xzcat"

TIMESTAMP="$(${DATE_BIN} +%s 2>/dev/null)"
ARCH="$(${UNAME_BIN} -m 2>/dev/null)"
UNAME_OS="$(${UNAME_BIN} -s 2>/dev/null)"
OS_TRIPPLE="${SYSTEM_VERSION}-${ORIGIN}-${ARCH}"
SVD_LOG="/var/log/svd-install-${TIMESTAMP}.log"
DEFAULT_JAILS_ROOT_DIR="${DEFAULT_JAIL_SHARED_LOCATION}/${UNAME_OS}-${SYSTEM_VERSION}-${ARCH}"
LATEST_VERSION="$(${FETCH_BIN} -q -o - ${BASE_SOURCE}/version-latest 2>/dev/null)"
VERSION="$(${ZFS_BIN} get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT 2>/dev/null)"
if [ "${VERSION}" = "-" ]; then
    ${PRINTF_BIN} "No version specified. Picking last version: ${LATEST_VERSION}\n"
else
    if [ "${VERSION}" = "${LATEST_VERSION}" ]; then
        if [ "$1" = "-f" ]; then
            ${PRINTF_BIN} "Forcing installation of ServeD base system in version: ${VERSION}\n"
        else
            ${PRINTF_BIN} "You are already using latest version: ${VERSION} of ServeD base system\n"
            exit 0
        fi
    fi
fi
VERSION="${LATEST_VERSION}"


# sanity check
if [ "${UNAME_OS}" != "FreeBSD" ]; then
    error "Only 64bit FreeBSD/HardenedBSD hosts are supported by installer"
fi


cecho () {
    ${PRINTF_BIN} "${2}${1}${reset}\n"
}

retry () {
    retries="***"
    while [ ! -z "${retries}" ]; do
        if [ ! -z "$1" ]; then
            gitroot="$(${BASENAME_BIN} $(${BASENAME_BIN} ${GIT_BIN}))"
            eval PATH="/bin:/usr/bin:${gitroot}/bin:${gitroot}/libexec/git-core" "$@" >> "${SVD_LOG}" 2>&1 && \
            return 0
        else
            error "An empty command to retry?"
        fi
        retries="$(echo "${retries}" | ${SED_BIN} 's/\*//' 2>/dev/null)"
    done
    ${PRINTF_BIN} "All retries exhausted for launch command: '$@'\n" && \
    return 2
}

error () {
    cecho "${error_char} $1" ${red}
    exit 1
}

debug () {
    if [ -f "/.build-host" ]; then
        cecho "# $1" "${magenta}"
    fi
}

warn () {
    cecho "$1" ${yellow}
}

note () {
    cecho "$1" "${green}"
}

dwarn () {
    cecho "$@" "${yellow}" && \
    cecho "$@" "${yellow}" >> ${SVD_LOG} 2>> ${SVD_LOG}
}

derror () {
    cecho "$@" "${red}" && \
    cecho "$@" "${red}" >> ${SVD_LOG} 2>> ${SVD_LOG}
}

dnote () {
    note "$@" && \
    note "$@" >> "${SVD_LOG}" 2>> ${SVD_LOG}
}

wrun () {
    commands="$@ && ${SYNC_BIN}"
    debug "Evaluating: '${commands}'" && \
    debug "Evaluating: '${commands}'" >> "${SVD_LOG}" 2>> "${SVD_LOG}"

    gitroot="$(${BASENAME_BIN} $(${BASENAME_BIN} ${GIT_BIN} 2>/dev/null) 2>/dev/null)"
    eval PATH="/bin:/sbin:/usr/bin:/usr/sbin:${gitroot}/bin:${gitroot}/libexec/git-core" "${commands}" >> "${SVD_LOG}" 2>> "${SVD_LOG}"
    if [ "$?" != "0" ]; then
        cecho "Failed to evaluate: '${commands}'" "${red}" && \
        cecho "Failed to evaluate: '${commands}'" "${red}" >> "${SVD_LOG}" 2>> "${SVD_LOG}"
        return 1
    fi
    unset commands gitroot
}

dnote "Installer is setting no-op traps for some shell signals.."
trap '' EXIT INT TERM QUIT TTIN TTOU


${MKDIR_BIN} -p ${CACHE_DIR}
if [ ! -f "${CACHE_DIR}/Software-${OS_TRIPPLE}.zfs.xz" ]; then
    retry "${FETCH_BIN} ${BASE_SOURCE}/Software-${OS_TRIPPLE}.zfs.xz -o ${CACHE_DIR}/Software-${OS_TRIPPLE}.zfs.xz" && \
    dnote "ServeD base archive fetched successfully" && \
    INSTALLED_SERVED_BASE="1"
fi

for some_patch in ${SOFTWARE_PATCHES}; do
    if [ ! -f "${CACHE_DIR}/Software-${OS_TRIPPLE}.${some_patch}.zfs.xz" ]; then
        retry "${FETCH_BIN} ${BASE_SOURCE}/Software-${OS_TRIPPLE}.${some_patch}.zfs.xz -o ${CACHE_DIR}/Software-${OS_TRIPPLE}.${some_patch}.zfs.xz" && \
        dnote "ServeD support binary patch: ${cyan}${some_patch} ${green}fetched successfully"
    fi
done

if [ ! -f "${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}${DEFAULT_ARCHIVE_EXT}" ]; then
    retry "${FETCH_BIN} ${BASE_SOURCE}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}${DEFAULT_ARCHIVE_EXT} -o ${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}${DEFAULT_ARCHIVE_EXT}" && \
    dnote "Jails archive fetched successfully" && \
    INSTALLED_JAILS_ARCHIVE="1"
fi

${ZFS_BIN} list 2>/dev/null | grep 'Software/root' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    wrun ${ZFS_BIN} create ${ZFS_CREATE_OPTS_FOR_ROOT_ELEMS} ${DEFAULT_ZPOOL}/Software && \
    dnote "Initialized origin of: ${DEFAULT_ZPOOL}/Software"
    ${XZCAT_BIN} ${CACHE_DIR}/Software-${OS_TRIPPLE}.zfs.xz | ${ZFS_BIN} receive -v ${DEFAULT_ZPOOL}/Software/root 2>/dev/null | ${TAIL_BIN} -n1 && \
    wrun ${ZFS_BIN} rename ${DEFAULT_ZPOOL}/Software/root@--head-- @${ORIGIN} && \
    wrun ${ZFS_BIN} set mountpoint=/Software ${DEFAULT_ZPOOL}/Software/root && \
    dnote "Dataset: '${DEFAULT_ZPOOL}/Software/root' received successfully" && \
    INSTALLED_SOFTWARE_ROOT="1"
fi

for some_patch in ${SOFTWARE_PATCHES}; do
    # don't apply same patch more than once.
    ${ZFS_BIN} list -H -t snap 2>/dev/null | ${EGREP_BIN} "Software/root@${some_patch}" >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        dnote "Patch: ${cyan}${some_patch} ${green}already applied on dataset: ${cyan}${DEFAULT_ZPOOL}/Software/root"
    else
        dnote "Applying binary patches for dataset: ${cyan}${DEFAULT_ZPOOL}/Software/root"
        ${XZCAT_BIN} ${CACHE_DIR}/Software-${OS_TRIPPLE}.${some_patch}.zfs.xz 2>/dev/null | \
        ${ZFS_BIN} receive -vF ${DEFAULT_ZPOOL}/Software/root 2>/dev/null | \
        ${TAIL_BIN} -n1 && \
        dnote "Patch: ${cyan}${some_patch} ${green}applied successfully on: ${cyan}${DEFAULT_ZPOOL}/Software/root"
    fi
done

${ZFS_BIN} list 2>/dev/null | grep 'User/root' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    wrun "${ZFS_BIN} create ${ZFS_CREATE_OPTS_FOR_ROOT_ELEMS} ${DEFAULT_ZPOOL}/User" && \
    dnote "Initialized origin of: '${DEFAULT_ZPOOL}/User\n"
    wrun "${ZFS_BIN} create -o mountpoint=/User ${DEFAULT_ZPOOL}/User/root" && \
    dnote "Dataset: ${DEFAULT_ZPOOL}/User/root created successfully" && \
    INSTALLED_USER_ROOT="1"
fi

create_dset_if_doesnt_exist () {
    mntpt="${1}"
    mount_opt="${2}"
    debug "Checking existence of dataset: ${DEFAULT_ZPOOL}${mntpt}"
    ${ZFS_BIN} list 2>/dev/null | ${EGREP_BIN} "${DEFAULT_ZPOOL}${mntpt} " > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        wrun "${ZFS_BIN} create -o mountpoint=${mount_opt} ${DEFAULT_ZPOOL}${mntpt}" && \
        dnote "Dataset: ${DEFAULT_ZPOOL}${mntpt} created successfully"
    fi
}

# create zvols for special snappable dirs
for mntpoint in /Jails ${DEFAULT_JAIL_SHARED_LOCATION} ${DEFAULT_JAILS_ROOT_DIR} ${DEFAULT_JAIL_PRISON_LOCATION} ${DEFAULT_JAIL_PRISON_LOCATION}/Cells ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry /Services /Services/root /Shared /Shared/root; do
    if [ ! -d "${mntpoint}" ]; then
        case ${mntpoint} in
            /Services|/Shared)
                create_dset_if_doesnt_exist "${mntpoint}" "none" # mountpoint=none for all "root" datasets
                ;;
            *)
                create_dset_if_doesnt_exist "${mntpoint}" "${mntpoint}"
                ;;
        esac
    fi
done

locations="User Services Shared"
for loc in ${locations}; do
    elem="${DEFAULT_ZPOOL}/${loc}/root"
    sroot="$(${ZFS_BIN} get -H -o value mountpoint ${elem} 2>/dev/null)"
    if [ "${sroot}" != "/${loc}" ]; then
        wrun "${ZFS_BIN} set mountpoint=/${loc} ${elem}" && \
        dnote "Mount point of dataset: ${elem} was reset to: /${loc}"
    fi
done

dnote "Checking ${ORIGIN} snapshots.."
origin_snap_regexp="@[a-z]{6}[$ ]{1}" # origin
for snap in "ROOT" "ROOT/default" "User/root" "Services/root"; do
    ${ZFS_BIN} list -t snap 2>/dev/null | ${EGREP_BIN} "${snap}${origin_snap_regexp}" > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        dnote " * ${DEFAULT_ZPOOL}/${snap}@${ORIGIN} (untouched)"
    else
        wrun "${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}/${snap}@${ORIGIN}" && \
        dnote " * ${DEFAULT_ZPOOL}/${snap}@${ORIGIN}"
    fi
done
wrun "${TAR_BIN} -xJf ${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}${DEFAULT_ARCHIVE_EXT} --directory /" && \
dnote "Installed ServeD software base: ${SYSTEM_VERSION}-v${VERSION}" && \
INSTALLED_BASE_SOFTWARE="1"

export HOME="/User"
export PWD="/User"
if [ -f "${HOME}/.gitconfig" ]; then
    ${GREP_BIN} -R 'ServeD' "${HOME}/.gitconfig" >/dev/null 2>&1
    if [ "$?" != "0" ]; then
        dnote "Detected no local Git configuration" && \
        wrun "GIT_SSL_NO_VERIFY=true ${GIT_BIN} config --global user.name 'ServeD node'" && \
        wrun "GIT_SSL_NO_VERIFY=true ${GIT_BIN} config --global user.email 'admin@verknowsys.com'" && \
        dnote "Git configuration set in HOME: ${HOME}"
    else
        dnote "Local Git configuration looks fine"
    fi
fi

if [ ! -d "${SOFIN_REPO}" ]; then
    wrun "cd /var" && \
    wrun "GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${DEFAULT_SOFIN_REPOSITORY}" && \
    wrun "cd ${SOFIN_REPO}" && \
    method="cloned"
else
    wrun "cd ${SOFIN_REPO}" && \
    wrun "${GIT_BIN} stash save \"install-update-${TIMESTAMP}\"" && \
    wrun "GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${DEFAULT_SOFIN_REPOSITORY}" && \
    method="pulled"
fi && \
dnote "Sofin repository ${method} successfully" && \
wrun "bin/install" && \
INSTALLED_SOFIN="1" && \
unset method

. /usr/share/sofin/loader

################################################################################
#
#                   Sofin environment initialized from now on.
#
################################################################################

JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${SYSTEM_VERSION}-${SYSTEM_ARCH}"

wrun "${TEST_BIN} -d ${JAIL_SOURCE}" # ASSERT:

if [ "${SHELL}" != "${DEFAULT_SHELL}" ]; then
    ${GREP_BIN} -R 'Zsh/exports/zsh' /etc/shells > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        ${PRINTF_BIN} "${DEFAULT_SHELL}\n" >> /etc/shells && \
        debug "Appending: ${DEFAULT_SHELL} to: /etc/shells"
    fi
    wrun "${CHSH_BIN} -s ${DEFAULT_SHELL}" && \
    dnote "Default shell set to: ${DEFAULT_SHELL}" && \
    INSTALLED_SYSTEM_SHELL="1"
fi

if [ ! -d "${VKS_KERNEL}" ]; then
    wrun "${CP_BIN} -vr ${JAIL_SOURCE}/boot/kernel ${VKS_KERNEL}" && \
    dnote "Kernel: ${VKS_KERNEL} installed successfully" && \
    INSTALLED_KERNEL="1"
else
    ${RM_BIN} -rf ${VKS_KERNEL}.old
    debug "Kernel update from: ${JAIL_SOURCE}"
    wrun "${MV_BIN} ${VKS_KERNEL} ${VKS_KERNEL}.old" && \
    wrun "${CP_BIN} -vr ${JAIL_SOURCE}/boot/kernel ${VKS_KERNEL}" && \
    dnote "Kernel updated successfully" && \
    INSTALLED_KERNEL="1"
fi

# ${CP_BIN} /Software/Sudo-static/bin/sudo ${JAIL_SOURCE}/usr/bin/
# ${CHMOD_BIN} 4755 ${JAIL_SOURCE}/usr/bin/sudo
# note "Updating sudo for ${SYSTEM_VERSION} jail base"

if [ -d "${SERVED_REPO}" ]; then
    method="fetched"
    cd ${SERVED_REPO} && \
    wrun "${GIT_BIN} reset --hard" && \
    wrun "GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${SERVEDOS_GIT_ORIGIN}"
else
    method="cloned"
    cd /var && \
    wrun "GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${SERVEDOS_GIT_ORIGIN} ServeD-OS"
fi && \
dnote "ServeD-OS repository ${method} successfully" && \
INSTALLED_SERVED_OS="1" && \
unset method

for f in ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}; do
    ${TEST_BIN} -f ${f} && wrun "${CHFLAGS_BIN} -v noschg ${f}"
done
if [ -f "${SVDINIT_BIN}" ]; then
    wrun "${RM_BIN} -fv ${SVDINIT_BIN}" && \
    debug "Removed old: ${SVDINIT_BIN}"
fi
wrun "${CLANG_BIN} -c ${SERVED_REPO}/src/getmntopts.c -o ${SERVED_REPO}/src/getmntopts.o" && \
wrun "${CLANG_BIN} -static -o ${SVDINIT_BIN} ${SERVED_REPO}/src/svdsysup.c -lutil -lcrypt -DSECURE -DSVD_LOGIN_CAP ${SERVED_REPO}/src/getmntopts.o" && \
wrun "${STRIP_BIN} ${SVDINIT_BIN}" && \
wrun "${RM_BIN} -f ${SVDINIT_BACKUP_BIN}" && \
wrun "${INSTALL_BIN} -v ${SVDINIT_BIN} ${DEFAULT_JAILS_ROOT_DIR}/sbin" && \
wrun "${CP_BIN} -v ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}" && \
dnote "Installed: ${SVDINIT_BIN}" && \
INSTALLED_SVDINIT="1"

for f in ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}; do
    ${TEST_BIN} -f ${f} && wrun "${CHFLAGS_BIN} -v schg ${f}"
done

wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/rc.svdsysup /etc" && \
dnote "Installed: system binary updater" && \
INSTALLED_SVDSYSUP="1"

${GREP_BIN} -v -R 'ServeD' /boot/loader.conf >/dev/null 2>&1 && \
echo >> /boot/loader.conf && \
${CAT_BIN} ${SERVED_REPO}/etc/loader.conf.served >> /boot/loader.conf && \
dnote "Installed: boot loader configuration" && \
INSTALLED_BOOT_CONF="1"

${MKDIR_BIN} -p ${SYSSVD_LOGNG_PREFIX}/etc ${SYSSVD_LOGNG_PREFIX}/var
wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/syslog-ng/syslog-ng.conf ${SYSSVD_LOGNG_PREFIX}/etc/" && \
wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/syslog-ng/scl.conf ${SYSSVD_LOGNG_PREFIX}/etc/" && \
dnote "Installed: system logger" && \
INSTALLED_SYSLOGNG="1"

if [ ! -L "/etc/malloc.conf" ]; then
    # <Zer0P> it's a "hack" to elliminate the cost of the open and parsing
    ${LN_BIN} -s 'abort:false,junk:false,lg_chunk:14' /etc/malloc.conf
fi

if [ ! -x "/etc/rc.d/buildhost" ]; then
    wrun "${INSTALL_BIN} -v ${SERVED_REPO}/etc/rc.d/buildhost /etc/rc.d" && \
    dnote "Created rc script for buildhost" && \
    INSTALLED_BUILDHOST_RC="1"
fi
if [ ! -x "/etc/rc.d/syslog-ng" ]; then
    wrun "${CP_BIN} -v /etc/rc.d/syslogd /etc/rc.d/syslog-ng" && \
    ${SED_BIN} -i '' -e 's#pidfile=.*$#pidfile="/var/run/syslog-ng.pid"#' /etc/rc.d/syslog-ng && \
    ${SED_BIN} -i '' -e 's#syslogd#syslog_ng#g' /etc/rc.d/syslog-ng && \
    dnote "Created rc script for: Syslog-ng" && \
    INSTALLED_SYSLOGNG_RC="1"
fi

${GREP_BIN} -R 'syslogd_enable' /etc/rc.conf 2>/dev/null | ${GREP_BIN} '"YES"' > /dev/null 2>&1
if [ "$?" = "0" ]; then
    service syslogd stop >/dev/null 2>&1
    killall -9 syslogd >/dev/null 2>&1
    ${SED_BIN} -i '' -e 's#^.*syslogd_enable.*=.*$##g' /etc/rc.conf && \
    dnote "Disabled syslogd, enabled: syslog-ng" && \
    INSTALLED_DISABLE_FOR_SYSLOGD="1"
else
    ${PS_BIN} axv 2>/dev/null | ${GREP_BIN} -v grep 2>/dev/null | ${GREP_BIN} 'syslog-ng' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        wrun "service syslog-ng reload" && \
        dnote "Reloaded: Syslog-ng"
    fi
fi

wrun "${CP_BIN} -v ${SERVED_REPO}/etc/sysctl.conf.served /etc/sysctl.conf" && \
dnote "Installed: sysctl configuration" && \
INSTALLED_SYSCTL_CONF="1"

dnote "Installed: periodic configuration" && \

wrun "${CP_BIN} -v ${SERVED_REPO}/etc/src.conf /etc/" && \
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/make.conf /etc/" && \
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/mime.types.served /etc/mime.types" && \
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/ttys.served /etc/ttys" && \
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/login.conf.served /etc/login.conf" && \
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/periodic.conf.served /etc/periodic.conf" && \
wrun "${CAP_MKDB_BIN} /etc/login.conf" && \
dnote "Installed to /etc: make.conf, src.conf, mime.types, ttys, login.conf, periodic.conf" && \
INSTALLED_LOGIN_CONF="1"

dnote "Setting up network"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 2>/dev/null | ${TAIL_BIN} -n 4 2>/dev/null | ${HEAD_BIN} -n 1 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
GVR_HOST_IP_ADDR="$(ifconfig ${DEFAULT_INTERFACE} 2>/dev/null | ${GREP_BIN} -v grep 2>/dev/null | ${GREP_BIN} inet 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
DEFAULT_HOST_ADDRESS_FILE="/etc/host.default"
NETS_LIST="$(${IFCONFIG_BIN} ${DEFAULT_INTERFACE} 2>/dev/null | ${GREP_BIN} inet 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
AMOUNT=$(${PRINTF_BIN} "${NETS_LIST}\n" | ${WC_BIN} -l 2>/dev/null)
NETS=""
if [ ${AMOUNT} -eq 1 ]; then
    ${PRINTF_BIN} "${NETS_LIST}\n" > ${DEFAULT_HOST_ADDRESS_FILE}
else
    dnote "Detected several IP addresses!"
    sleep 2
    for net in ${NETS_LIST}; do
        NETS="$NETS $net - "
    done
    ${DIALOG_BIN} --menu "Pick main IP address:" 0 0 0 ${NETS} 2> ${DEFAULT_HOST_ADDRESS_FILE}
fi

DEFAULT_INTERFACE_ADDRESS="$(${CAT_BIN} ${DEFAULT_HOST_ADDRESS_FILE} 2>/dev/null)"
wrun "${CP_BIN} -v ${SERVED_REPO}${PF_CONF_FILE}.served ${PF_CONF_FILE}" && \
${SED_BIN} -i '' -e "s/__INTERNAL_NETWORK/${INTERNAL_NETWORK}/g" ${PF_CONF_FILE} && \
${SED_BIN} -i '' -e "s/__EXTERNAL_INTERFACE/${DEFAULT_INTERFACE}/g" ${PF_CONF_FILE} && \
${SED_BIN} -i '' -e "s/__EXTERNAL_ADDRESS/${DEFAULT_INTERFACE_ADDRESS}/g" ${PF_CONF_FILE} && \
wrun "${TOUCH_BIN} ${PF_CONF_FILE}.local" && \
dnote "Installed Packet Filter configuration" && \
INSTALLED_SYSLOGNG_CONF="1"

${GREP_BIN} -R 'pf_enable' /etc/rc.conf 2>/dev/null | ${GREP_BIN} '"YES"' > /dev/null 2>&1
if [ "$?" = "0" ]; then
    wrun "service pf restart" && \
    dnote "Applied firewall rules:\n$(${PFCTL_BIN} -sn 2>/dev/null)"
else
    dwarn "Packet Filter is disabled in: '/etc/rc.conf'"
fi

${GREP_BIN} -R 'ServeD-Install-Script' /etc/rc.conf >/dev/null 2>&1
if [ "$?" != "0" ]; then
    ${CAT_BIN} ${SERVED_REPO}/etc/rc.conf.served >> /etc/rc.conf && \
    dnote "Installed: ServeD specific rc configuration"
fi
${GREP_BIN} -R 'gvr boot' /etc/rc >/dev/null 2>&1
if [ "$?" != "0" ]; then
    ${SED_BIN} -i '' -e "s/^date$/gvr boot/" /etc/rc && \
    dnote "Added ${cyan}gvr boot${green} to rc configuration"
fi

TIMESTAMP="$(${DATE_BIN} +%s 2>/dev/null)"
${MKDIR_BIN} -p /etc/ssl
wrun "${CP_BIN} -v ${SERVED_REPO}/etc/ssl/cacert.pem /etc/ssl/cert.pem"
${FETCH_BIN} --no-verify-peer ${CACERT_SOURCE} -o /etc/ssl/cert.pem >> ${SVD_LOG} 2>&1 || \
${FETCH_BIN} --no-verify-peer ${CACERT_SOURCE_ALT} -o /etc/ssl/cert.pem >> ${SVD_LOG} 2>&1 || \
warn "CA CERTS: Both sources are unavailable!"

cert_size="$(${STAT_BIN} -f'%z' /etc/ssl/cert.pem 2>/dev/null)"
if [ -z "${cert_size}" ]; then
    cert_size="0"
elif [ "${cert_size}" = "0" ]; then
    wrun "${CP_BIN} -v ${SERVED_REPO}/etc/ssl/cacert.pem /etc/ssl/cert.pem" && \
    dnote "CA CERTS: Used bundled version of cert.pem from ServeD-OS repository" && \
    INSTALLED_ROOT_SSL_CERTS="2"
elif [ ${cert_size} -gt 220000 ]; then
    dnote "System ROOT-TLS/SSL certificates installed successfully" && \
    INSTALLED_ROOT_SSL_CERTS="1"
fi

# note "Checking for a ZFS-feature-updates of zpool: ${DEFAULT_ZPOOL}"
# ${ZPOOL_BIN} upgrade ${DEFAULT_ZPOOL} | ${HEAD_BIN} -n1

disks=$(${GEOM_BIN} disk list 2>/dev/null | ${EGREP_BIN} 'Name: [a-z]?da.*$' 2>/dev/null | ${SED_BIN} 's/^.*\ //' 2>/dev/null)
if [ -z "${disks}" ]; then
    error "System GEOM detected NO hard disks available on this machine. Installer can't do his thing -_-"
fi
for disk in ${disks}; do
    wrun "${GRPART_BIN} bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ${disk}" && \
    dnote "Updated ZFS bootcode for disk: ${disk}" && \
    INSTALLED_BOOT_ZFS="1"
done
wrun "${KLDXREF_BIN} ${VKS_KERNEL}" && \
dnote "Generated kernel hints for kernel: ${VKS_KERNEL}"

wrun "${ZFS_BIN} set com.svd:version=${LATEST_VERSION} ${DEFAULT_ZPOOL}/ROOT" && \
wrun "${ZFS_BIN} set com.svd:os_version=${SYSTEM_VERSION} ${DEFAULT_ZPOOL}/ROOT" && \
wrun "${TOUCH_BIN} /.svdsysup" && \
dnote "ServeD system properties set successfully"

${UNAME_BIN} -a 2>/dev/null | ${GREP_BIN} VERKNOWSYS > /dev/null 2>&1
if [ "$?" = "0" ]; then
    dnote "ServeD update complete!\n"
else
    dnote "ServeD installation complete!\n" # with status: "jedenelement: 0 drugi: 0 jakis: 1 trzeci: 0 itd.."
fi

exit 0

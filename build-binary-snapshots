#!/bin/sh

commit_snapshots_build () {


    clean_before () {
        cd "${SHARED_DIR}/${SYSTEM_NAME}-${SYSTEM_VERSION}-${ARCH}"
        for unnec in /etc /tmp /dev /mnt /media /proc /COPYRIGHT /sys /var/mail /usr/home /var/mail /var/tmp /.profile /rescue /root; do
            ${FIND_BIN} ".${unnec}" -delete 2>> ${LOG_BBS} && \
            permnote "Removed dir: .${unnec}"
        done
    }


    compile_jails () {
        ${MKDIR_BIN} -p "${CACHE_DIR}"
        BASE_SNAPSHOT="${SYSTEM_NAME}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}"
        permnote "Compiling snapshot: ${BASE_SNAPSHOT}"
        realpath="${SHARED_DIR}/${SYSTEM_NAME}-${SYSTEM_VERSION}-${ARCH}"

        # if [ -x "${LLD_BIN}" ]; then
        #     permnote "Installing additional linker: $(distn "${LLD_BIN}")"
        #     ${INSTALL_BIN} -v "${LLD_BIN}" "${realpath}/usr/bin/ld.lld" >> "${LOG_BBS}" 2>> "${LOG_BBS}"
        # fi

        # if [ -x "${GOLD_BIN}" ] && [ -x "${GOLD_PLUGIN}" ]; then
        #     permnote "Installing additional linker: $(distn "${GOLD_BIN}")"
        #     ${INSTALL_BIN} -v "${GOLD_BIN}" "${realpath}/usr/bin" >> "${LOG_BBS}" 2>> "${LOG_BBS}"
        #     ${INSTALL_BIN} -v "${GOLD_PLUGIN}" "${realpath}/usr/lib" >> "${LOG_BBS}" 2>> "${LOG_BBS}"
        # fi

        # for file in ${GOLD_BIN}/lib/LLVMgold.so ${GOLD_BIN}/lib/libLTO.so; do
        #     ${INSTALL_BIN} -v "${file}" "${realpath}/usr/lib" >> "${LOG_BBS}" 2>> "${LOG_BBS}"
        # done
        # for file in $(${FIND_BIN} ${GOLD_BIN}/${TARGET_TRIPPLE}/bin -type f); do
        #     ${INSTALL_BIN} -v "${file}" "${realpath}/usr/bin" >> "${LOG_BBS}" 2>> "${LOG_BBS}"
        # done
        # ${MKDIR_BIN} -p "${realpath}/usr/lib/ldscripts"
        # for file in $(${FIND_BIN} ${GOLD_BIN}/${TARGET_TRIPPLE}/lib/ldscripts -type f); do
        #     ${INSTALL_BIN} -v "${file}" "${realpath}/usr/lib/ldscripts" >> "${LOG_BBS}" 2>> "${LOG_BBS}"
        # done
        # permnote "Golden linker merged with current software base"

        cd "${CACHE_DIR}"
        # destroy a snapshot if already exists
        ${ZFS_BIN} destroy "${ZPOOL}${realpath}@v${VERSION}" 2>/dev/null || true
        ${ZFS_BIN} snapshot "${ZPOOL}${realpath}@v${VERSION}"
        ${ZFS_BIN} send -D -L -e -p -v "${ZPOOL}${realpath}@v${VERSION}" | ${XZ_BIN} --threads=${XZ_THREADS} > ${BASE_SNAPSHOT}${DEFAULT_ARCHIVE_EXT} 2>> "${LOG_BBS}"
        if [ "$?" = "0" ]; then
            permnote "Snapshot successfully sent."
            # if [ -f "${BUILD_HOST_MARKER}" ]; then
            #     permnote "Detected built-host type, removing version snapshot: ${ZPOOL}${realpath}@v${VERSION}.."
            #     ${ZFS_BIN} destroy "${ZPOOL}${realpath}@v${VERSION}"
            # fi
        else
            error "Something went wrong while sending snapshot!"
        fi

        ${CHMOD_BIN} a+r ${BASE_SNAPSHOT}${DEFAULT_ARCHIVE_EXT} || \
            error "Snapshot should be readable by everyone."

        permnote "Uploading Jail snapshot: ${BASE_SNAPSHOT}"
        ${CHMOD_BIN} 600 ~/.ssh/* >/dev/null 2>&1
        ${SCP_BIN} \
            -o UserKnownHostsFile=/dev/null \
            -o StrictHostKeyChecking=no \
            ${BASE_SNAPSHOT}${DEFAULT_ARCHIVE_EXT} \
            ${DESTINATION} 2>> ${LOG_BBS} && \
            permnote "Uploaded successfully."

        if [ "$?" = "0" ]; then
            permnote "Finished successfully. Checking latest version on remote destination.."
            ${SSH_BIN} \
                -o UserKnownHostsFile=/dev/null \
                -o StrictHostKeyChecking=no \
                dmilith@served.verknowsys.com \
                "${GREP_BIN} -R '${VERSION}' /Users/dmilith/ServeD/Web/version-latest >/dev/null 2>&1 || \
                 echo '${VERSION}' > /Users/dmilith/ServeD/Web/version-latest" 2>> ${LOG_BBS} && \
                permnote "Remote version file updated successfully with version: ${VERSION}"
        else
            error "Something went wrong while uploading Jails base!"
        fi
    }


    clean_before
    compile_jails
}


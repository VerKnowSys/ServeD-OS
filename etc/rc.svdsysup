#!/bin/sh
#
# system script to perform lockless filesystem binary updates

stty status '^T' 2> /dev/null

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user.
#
trap : 2
trap "echo 'Update interrupted'; exit 1" 3

# ANSI color definitions
readonly red='\033[31;40m'
readonly green='\033[32;40m'
readonly yellow='\033[33;40m'
readonly blue='\033[34;40m'
readonly magenta='\033[35;40m'
readonly cyan='\033[36;40m'
readonly gray='\033[37;40m'
readonly white='\033[38;40m'
readonly reset='\033[0m'
readonly DEFAULT_HOST_ADDRESS_FILE="/etc/host.default"
readonly UPDATE_PENDING_INDICATOR="/.svdsysup"
readonly SERVED_REPO="/var/ServeD-OS"
readonly SOFIN_REPO="/var/sofin"
readonly DEFAULT_ZPOOL="zroot"
readonly BACKUP_SVDINIT="/var/.svdinit"
readonly UNBOUND_CONF_DIR="/var/unbound/conf.d"
readonly UNBOUND_CONF="/var/unbound/unbound.conf"
readonly UNBOUND_CONTROL_CONF="/var/unbound/control.conf"
readonly DEFAULT_JAIL_PRISON_LOCATION="/Jails/Prison"
readonly DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
readonly RSYNC_DEFAULT_OPTIONS="-l -p -E -A -X -o -g -t -r --delete"
readonly PATH=/sbin:/bin:/usr/sbin:/usr/bin
readonly OS_NAME="$(uname -s)"
readonly OS_ARCH="$(uname -m)"

export HOME=/
export RSYNC_BIN="/Software/Rsync-static/exports/rsync"
export GIT_BIN="/Software/Git/exports/git"

export OS_VERSION="11.0" # the default
export TRIPPLE="${OS_NAME}-${OS_VERSION}-${OS_ARCH}"


TTY="false"
if [ -t 1 ]; then
    TTY="true"
fi

cecho () {
    if [ "${TTY}" = "true" ]; then # if it's terminal then use colors
        printf "${2}${1}${reset}\n"
    else
        printf "${1}\n"
    fi
}

debug () {
    if [ "${DEBUG}" = "true" ]; then
        cecho "# $1" ${magenta} # NOTE: this "#" is required for debug mode to work properly with generation of ~/.profile and /etc/profile_sofin files!
    else
        cecho "# $1" ${magenta} >> ${LOG} 2>>/dev/null
        # cecho " ~ $1" ${magenta} >> ${LOG}
    fi
}

warn () {
    cecho "$1" ${yellow}
}

note () {
    cecho "$1" ${green}
}

error () {
    cecho "${ERROR_CHAR} $1" ${red}
    exit 1
}


TIMESTAMP="$(date +%s)"
SVD_LOG="/var/log/svdsysup-${TIMESTAMP}.log"

note "Performing pre-update snapshots: @${TIMESTAMP}"
zfs snapshot ${DEFAULT_ZPOOL}/ROOT/default@${TIMESTAMP}
zfs snapshot ${DEFAULT_ZPOOL}/usr@${TIMESTAMP}
zfs snapshot ${DEFAULT_ZPOOL}/var@${TIMESTAMP}
zfs set readonly=off ${DEFAULT_ZPOOL}/var
zfs set readonly=off ${DEFAULT_ZPOOL}/var/log
zfs set readonly=off ${DEFAULT_ZPOOL}/ROOT/default
zfs set readonly=off ${DEFAULT_ZPOOL}/usr
zfs set readonly=off ${DEFAULT_ZPOOL}/User/root

# Set snochg flags.
chflags noschg /bin/rsh /bin/rlogin /sbin/svdinit /sbin/init /lib/libthr.so.3 /lib/libc.so.7 /lib/libcrypt.so.5 /libexec/ld-elf.so.1 /usr/lib/librt.so.1 /usr/bin/chfn /usr/bin/chsh /usr/bin/opiepasswd /usr/bin/crontab /usr/bin/passwd /usr/bin/chpass /usr/bin/opieinfo /usr/bin/su /usr/bin/login >> ${SVD_LOG} 2>&1 || true

# Update system version from system property
served_version="$(zfs get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT)"
stored_version="$(zfs get -H -o value com.svd:os_version ${DEFAULT_ZPOOL}/ROOT)"
if [ "${stored_version}" != "-" ]; then
    export OS_VERSION="${stored_version}"
    export TRIPPLE="${OS_NAME}-${OS_VERSION}-${OS_ARCH}"
fi

note "Mounting core datasets in read-write mode"
zfs mount ${DEFAULT_ZPOOL}/User/root
zfs mount ${DEFAULT_ZPOOL}/Software/root
zfs mount ${DEFAULT_ZPOOL}/Jails/Shared/${TRIPPLE}
for folder in bin lib libexec sbin usr; do
    note "Synchronizing /Jails/Shared/${TRIPPLE}/${folder}/ with /${folder}"
    ${RSYNC_BIN} -v ${RSYNC_DEFAULT_OPTIONS} \
        --exclude=/usr/home --exclude=/usr/ports \
        /Jails/Shared/${TRIPPLE}/${folder}/ /${folder} >> ${SVD_LOG} 2>&1
done

note "Installing core software.."
install -v ${SERVED_REPO}/gvr /usr/bin
install -v ${BACKUP_SVDINIT} /sbin

# install Sofin
cd ${SOFIN_REPO}
bin/install

# motd setup
MOTD_TEMPLATE="\n\tYou deserve to be ServeD!\t(ServeD-base v${served_version} on top of hBSD"
if [ -x "${GIT_BIN}" ]; then
    if [ -d /var/${OS_VERSION}-src/ ]; then
        head16_hbsd_sha="$(${GIT_BIN} rev-parse HEAD 2>/dev/null | ${CUT_BIN} -c -16 2>/dev/null)"
        ${PRINTF_BIN} "${MOTD_TEMPLATE} v${OS_VERSION} #${head16_hbsd_sha}â€¦)\n\n" > /etc/motd
    else
        ${PRINTF_BIN} "${MOTD_TEMPLATE} v${OS_VERSION})\n\n" > /etc/motd
    fi
else # no git motd fallback:
    ${PRINTF_BIN} "${MOTD_TEMPLATE} v${OS_VERSION})\n\n" > /etc/motd
fi

cd /

# Bring back schg flags
chflags schg /sbin/svdinit /sbin/init /lib/libthr.so.3 /lib/libc.so.7 /lib/libcrypt.so.5 /libexec/ld-elf.so.1 /usr/lib/librt.so.1 /usr/bin/chfn /usr/bin/chsh /usr/bin/opiepasswd /usr/bin/crontab /usr/bin/passwd /usr/bin/chpass /usr/bin/opieinfo /usr/bin/su /usr/bin/login >> ${SVD_LOG} 2>&1

TIMESTAMP="$(date +%s)"
note "Performing post-update snapshots: @${TIMESTAMP}"
zfs snapshot ${DEFAULT_ZPOOL}/ROOT/default@${TIMESTAMP}
zfs snapshot ${DEFAULT_ZPOOL}/usr@${TIMESTAMP}
zfs snapshot ${DEFAULT_ZPOOL}/var@${TIMESTAMP}

for dataset in ${DEFAULT_ZPOOL}/ROOT/default ${DEFAULT_ZPOOL}/usr ${DEFAULT_ZPOOL}/var; do
    value="$(zfs list -H -t snap -o name | grep "${dataset}@" 2>/dev/null | wc -l 2>/dev/null | sed 's/ //g' 2>/dev/null)"
    if [ ${value} -gt 5 ]; then
        LAST="$(zfs list -H -t snap -o name | grep "${dataset}@" 2>/dev/null | sed 's/.*@//;s/ .*//' 2>/dev/null | tail -n 1 2>/dev/null)"
        note "Removing oldest snapshot of: '${dataset}@${LAST}' (${value} snapshots)"
        zfs destroy "${dataset}@${LAST}"
    fi
done

if [ -d "/root" ]; then
    note "Syncing root home dir to dataset: ${DEFAULT_ZPOOL}/User/root"
    ${RSYNC_BIN} ${RSYNC_DEFAULT_OPTIONS} /root/ /User 2>/dev/null && \
    pw user mod root -d /User && \
    rm -rf /root && \
    note "Sync complete"
fi


generate_conf_for_unbound_resolver () {
    DEFAULT_INTERFACE_ADDRESS="$(cat ${DEFAULT_HOST_ADDRESS_FILE} 2>/dev/null)"

    note "Generating base configuration for Unbound"
    /usr/sbin/local-unbound-setup -n

    if [ ! -f "${UNBOUND_CONF_DIR}/jailed.conf" ]; then
        note "Setting up autoloading Sentry domains configuration file"
        printf "include: ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry/*/jail-domains/*.conf\n" > ${UNBOUND_CONF_DIR}/jailed.conf
    fi

    printf "# Generated by ServeD updater #
server:
    username: unbound
    directory: /var/unbound
    chroot: /var/unbound
    pidfile: /var/run/local_unbound.pid
    interface: 127.0.0.1
    interface: ${DEFAULT_INTERFACE_ADDRESS}
    access-control: 10.0.0.0/8 allow
    access-control: 172.116.0.0/12 allow
    access-control: 192.168.0.0/16 allow
    outgoing-num-tcp: 1 # this limits TCP service, uses less buffers.
    incoming-num-tcp: 1
    outgoing-range: 60  # uses less memory, but less performance.
    msg-buffer-size: 8192   # note this limits service, 'no huge stuff'.
    msg-cache-size: 100k
    msg-cache-slabs: 1
    rrset-cache-size: 100k
    rrset-cache-slabs: 1
    infra-cache-numhosts: 200
    infra-cache-slabs: 1
    key-cache-size: 100k
    key-cache-slabs: 1
    neg-cache-size: 10k
    num-queries-per-thread: 30
    target-fetch-policy: \"2 1 0 0 0 0\"
    harden-large-queries: \"yes\"
    harden-short-bufsize: \"yes\"
    prefetch: yes
    num-threads: 1
    use-caps-for-id: yes
    harden-dnssec-stripped: yes
    harden-glue: yes
    hide-identity: yes
    hide-version: yes
    # This option requires DNSSEC setup:
    # auto-trust-anchor-file: /var/unbound/root.key

include: /var/unbound/forward.conf
include: /var/unbound/lan-zones.conf
include: /var/unbound/control.conf
include: /var/unbound/conf.d/*.conf
" > ${UNBOUND_CONF}

    # XXX: TODO: not really secure, consider using SSL certs per server and local user domains
    printf "# Generated by ServeD updater #
remote-control:
    control-enable: yes
    control-interface: /var/run/local_unbound.ctl
    control-use-cert: no
" > ${UNBOUND_CONTROL_CONF}
    chown -R unbound /var/unbound
}

# Generate Unbound configuration with a little help from local-unbound-setup:
generate_conf_for_unbound_resolver
rm -f ${UPDATE_PENDING_INDICATOR}


sleep 2
note
note "Update complete."
note
exit 0

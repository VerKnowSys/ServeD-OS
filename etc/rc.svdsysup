#!/bin/sh
#
# system script to perform lockless filesystem binary updates

stty status '^T' 2> /dev/null

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user.
#
trap : 2
trap "echo 'Update interrupted'; exit 1" 3

# ANSI color definitions
readonly red='\033[31;40m'
readonly green='\033[32;40m'
readonly yellow='\033[33;40m'
readonly blue='\033[34;40m'
readonly magenta='\033[35;40m'
readonly cyan='\033[36;40m'
readonly gray='\033[37;40m'
readonly white='\033[38;40m'
readonly reset='\033[0m'
export HOME PATH

HOME=/
PATH=/sbin:/bin:/usr/sbin:/usr/bin
UPDATE_PENDING_INDICATOR="/.svdsysup"
SERVED_REPO="/var/ServeD-OS"
SOFIN_REPO="/var/sofin"
DEFAULT_ZPOOL="zroot"
OS_NAME="FreeBSD"
OS_ARCH="amd64"
OS_VERSION="11.0" # the default
TRIPPLE="${OS_NAME}-${OS_VERSION}-${OS_ARCH}"
TIMESTAMP="$(date +%s)"
SVD_LOG="/var/log/svdsysup-${TIMESTAMP}.log"
# svd part:

TTY="false"
if [ -t 1 ]; then
    TTY="true"
fi

cecho () {
    if [ "${TTY}" = "true" ]; then # if it's terminal then use colors
        printf "${2}${1}${reset}\n"
    else
        printf "${1}\n"
    fi
}

debug () {
    if [ "${DEBUG}" = "true" ]; then
        cecho "# $1" ${magenta} # NOTE: this "#" is required for debug mode to work properly with generation of ~/.profile and /etc/profile_sofin files!
    else
        cecho "# $1" ${magenta} >> ${LOG} 2>>/dev/null
        # cecho " ~ $1" ${magenta} >> ${LOG}
    fi
}

warn () {
    cecho "$1" ${yellow}
}

note () {
    cecho "$1" ${green}
}

error () {
    cecho "${ERROR_CHAR} $1" ${red}
    exit 1
}


note "Performing before-update-snapshot: ${TIMESTAMP}"
zfs snapshot ${DEFAULT_ZPOOL}/ROOT/default@${TIMESTAMP}
zfs snapshot ${DEFAULT_ZPOOL}/usr@${TIMESTAMP}

zfs set readonly=off ${DEFAULT_ZPOOL}/var/log
zfs set readonly=off ${DEFAULT_ZPOOL}/ROOT/default
zfs set readonly=off ${DEFAULT_ZPOOL}/usr
zfs set readonly=off ${DEFAULT_ZPOOL}/User/root
touch ${SVD_LOG}

# Set snochg flags.
chflags noschg /bin/rsh /bin/rlogin /sbin/svdinit /sbin/init /lib/libthr.so.3 /lib/libc.so.7 /lib/libcrypt.so.5 /libexec/ld-elf.so.1 /usr/lib/librt.so.1 /usr/bin/chfn /usr/bin/chsh /usr/bin/opiepasswd /usr/bin/crontab /usr/bin/passwd /usr/bin/chpass /usr/bin/opieinfo /usr/bin/su /usr/bin/login >> ${SVD_LOG} 2>&1 || true
cp -v /sbin/svdinit /var/svdinit

# Update system version from system property
stored_version="$(zfs get -H -o value com.svd:os_version ${DEFAULT_ZPOOL}/ROOT)"
if [ "${stored_version}" != "-" ]; then
    export OS_VERSION="${stored_version}"
fi

note "Mounting core datasets"
zfs mount ${DEFAULT_ZPOOL}/var/log || true
zfs mount ${DEFAULT_ZPOOL}/User/root || true
zfs mount ${DEFAULT_ZPOOL}/Software/root || true
zfs mount ${DEFAULT_ZPOOL}/Jails/Shared/${TRIPPLE} || true
for folder in bin lib libexec sbin usr; do
    note "Synchronizing /Jails/Shared/${TRIPPLE}/${folder}/ with /${folder}"
    /Software/Rsync-static/exports/rsync -v -l -p -E -A -X -o -g -t -r --delete --exclude=/usr/home --exclude=/usr/ports /Jails/Shared/${TRIPPLE}/${folder}/ /${folder} >> ${SVD_LOG} 2>&1
done

note "Installing core software.."
install -v ${SERVED_REPO}/gvr /usr/bin
install -v /var/svdinit /sbin

# install Sofin
cur_dir="$(pwd)"
cd ${SOFIN_REPO}
bin/install
rm -f /var/svdinit
cd "${cur_dir}"

# Bring back schg flags
chflags schg /sbin/svdinit /sbin/init /lib/libthr.so.3 /lib/libc.so.7 /lib/libcrypt.so.5 /libexec/ld-elf.so.1 /usr/lib/librt.so.1 /usr/bin/chfn /usr/bin/chsh /usr/bin/opiepasswd /usr/bin/crontab /usr/bin/passwd /usr/bin/chpass /usr/bin/opieinfo /usr/bin/su /usr/bin/login >> ${SVD_LOG} 2>&1

TIMESTAMP="$(date +%s)"
note "Creating after update snapshot: ${TIMESTAMP}"
zfs snapshot ${DEFAULT_ZPOOL}/ROOT/default@${TIMESTAMP}
zfs snapshot ${DEFAULT_ZPOOL}/usr@${TIMESTAMP}

for dataset in ${DEFAULT_ZPOOL}/ROOT/default ${DEFAULT_ZPOOL}/usr; do
    value="$(zfs list -H -t snap -o name | grep "${dataset}@" 2>/dev/null | wc -l 2>/dev/null | sed 's/ //g' 2>/dev/null)"
    if [ ${value} -gt 5 ]; then
        LAST="$(zfs list -H -t snap -o name | grep "${dataset}@" 2>/dev/null | sed 's/.*@//;s/ .*//' 2>/dev/null | tail -n 1 2>/dev/null)"
        note "Removing oldest snapshot of: '${dataset}@${LAST}' (snapshots: ${value})"
        zfs destroy "${dataset}@${LAST}"
    fi
done

if [ -d "/root" ]; then
    note "Switching home dir for root to: ${DEFAULT_ZPOOL}/User/root"
    cp -R /root/ /User
    pw user mod root -d /User
    rm -rf /root
fi

sleep 2
note "Update complete."
sleep 2
rm -f ${UPDATE_PENDING_INDICATOR}
note
exit 0

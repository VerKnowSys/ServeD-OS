#!/bin/sh
#
# system script to perform lockless filesystem binary updates

stty status '^T' 2> /dev/null

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user.
#
trap : 2
trap "echo 'Update interrupted'; exit 1" 3

# ANSI color definitions
readonly red='\033[31;40m'
readonly green='\033[32;40m'
readonly yellow='\033[33;40m'
readonly blue='\033[34;40m'
readonly magenta='\033[35;40m'
readonly cyan='\033[36;40m'
readonly gray='\033[37;40m'
readonly white='\033[38;40m'
readonly reset='\033[0m'
export HOME PATH

HOME=/
PATH=/sbin:/bin:/usr/sbin:/usr/bin
UPDATE_PENDING_INDICATOR="/.svdsysup"
SERVED_REPO="/var/ServeD-OS"
DEFAULT_ZPOOL="zroot"
OS_NAME="FreeBSD"
OS_ARCH="amd64"
OS_VERSION="11.0" # the default

# svd part:

TTY="false"
if [ -t 1 ]; then
    TTY="true"
fi

cecho () {
    if [ "${TTY}" = "true" ]; then # if it's terminal then use colors
        printf "${2}${1}${reset}\n"
    else
        printf "${1}\n"
    fi
}

debug () {
    if [ "${DEBUG}" = "true" ]; then
        cecho "# $1" ${magenta} # NOTE: this "#" is required for debug mode to work properly with generation of ~/.profile and /etc/profile_sofin files!
    else
        cecho "# $1" ${magenta} >> ${LOG} 2>>/dev/null
        # cecho " ~ $1" ${magenta} >> ${LOG}
    fi
}

warn () {
    cecho "$1" ${yellow}
}

note () {
    cecho "$1" ${green}
}

error () {
    cecho "${ERROR_CHAR} $1" ${red}
    exit 1
}

TIMESTAMP="$(date +%F-%s)"
note "ServeD Binary Updates working on an update #${TIMESTAMP}. Please wait.."
zfs snapshot ${DEFAULT_ZPOOL}/ROOT/default@${TIMESTAMP}_before
zfs snapshot ${DEFAULT_ZPOOL}/usr@${TIMESTAMP}_before

zfs set readonly=off ${DEFAULT_ZPOOL}/ROOT/default || true
zfs set readonly=off ${DEFAULT_ZPOOL}/usr || true

rm -f /svdsysupdate-sync-${TIMESTAMP}.log || true
touch /svdsysupdate-sync-${TIMESTAMP}.log || true

# lower your voices
chflags noschg /bin/rsh /bin/rlogin /sbin/svdinit /sbin/init /lib/libthr.so.3 /lib/libc.so.7 /lib/libcrypt.so.5 /libexec/ld-elf.so.1 /usr/lib/librt.so.1 /usr/bin/chfn /usr/bin/chsh /usr/bin/opiepasswd /usr/bin/crontab /usr/bin/passwd /usr/bin/chpass /usr/bin/opieinfo /usr/bin/su /usr/bin/login >> /svdsysupdate-sync-${TIMESTAMP}.log 2> /svdsysupdate-sync-${TIMESTAMP}.log.err

# Update system version from system property
stored_version="$(zfs get -H -o value com.svd:os_version ${DEFAULT_ZPOOL}/ROOT)"
if [ "${stored_version}" != "-" ]; then
    export OS_VERSION="${stored_version}"
fi
zfs mount ${DEFAULT_ZPOOL}/Software/root || true
zfs mount ${DEFAULT_ZPOOL}/Jails/Shared/${OS_NAME}-${OS_VERSION}-${OS_ARCH} || true
for folder in bin lib libexec sbin usr; do
    note "Synchronizing /Jails/Shared/${OS_NAME}-${OS_VERSION}-${OS_ARCH}/${folder}/ with /${folder}"
    /Software/Rsync-static/exports/rsync -v -l -p -E -A -X -o -g -t -r --delete --exclude=/usr/home --exclude=/usr/ports /Jails/Shared/${OS_NAME}-${OS_VERSION}-${OS_ARCH}/${folder}/ /${folder} >> /svdsysupdate-sync-${TIMESTAMP}.log 2> /svdsysupdate-sync-${TIMESTAMP}.log.err
done

note "Installing core software (gvr, svdinit)"
/usr/bin/install ${SERVED_REPO}/gvr /usr/bin
clang -static -o ${SERVED_REPO}/svdinit ${SERVED_REPO}/src/svdsysup.c -lutil -lcrypt -DSECURE -DLOGIN_CAP
/usr/bin/install ${SERVED_REPO}/svdinit /sbin/
# cp ${SERVED_REPO}/usr/sbin/secadm /usr/sbin/
# cp ${SERVED_REPO}/usr/lib/libsecadm.so* /usr/lib/

# return my powers
chflags schg /sbin/svdinit /sbin/init /lib/libthr.so.3 /lib/libc.so.7 /lib/libcrypt.so.5 /libexec/ld-elf.so.1 /usr/lib/librt.so.1 /usr/bin/chfn /usr/bin/chsh /usr/bin/opiepasswd /usr/bin/crontab /usr/bin/passwd /usr/bin/chpass /usr/bin/opieinfo /usr/bin/su /usr/bin/login >> /svdsysupdate-sync-${TIMESTAMP}.log 2> /svdsysupdate-sync-${TIMESTAMP}.log.err

rm -f ${UPDATE_PENDING_INDICATOR}
note "Upgrading zpool if necessary"
zpool upgrade ${DEFAULT_ZPOOL} >> /svdsysupdate-sync-${TIMESTAMP}.log 2>&1
disks=$(geom disk list | grep 'Name:\ d.*' | sed 's/^.*\ //')
for disk in $disks; do
    note "Updating ZFS bootcode for disk: ${disk}"
    gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ${disk} >> /svdsysupdate-sync-${TIMESTAMP}.log 2>&1
    if [ "$?" != "0" ]; then
        warn "Bootcode update finished with an error for disk: ${disk}!"
        sleep 2
    fi
done

zfs snapshot ${DEFAULT_ZPOOL}/ROOT/default@${TIMESTAMP}_after
zfs snapshot ${DEFAULT_ZPOOL}/usr@${TIMESTAMP}_after

sleep 2

note
exit 0

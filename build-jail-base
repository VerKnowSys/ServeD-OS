#!/Software/Zsh/exports/zsh

unset CC CPP CXX CFLAGS CXXFLAGS LDFLAGS MANPATH PATH PKG_CONFIG_PATH MAIL

export PATH=/bin:/sbin:/usr/bin:/usr/sbin

set -e

# FreeBSD base version:
readonly OS_VER="$1"
if [ "${OS_VER}" = "" ]; then
    error "No version specified!"
fi

readonly MAIN_REPOSITORY="$2"
if [ "${MAIN_REPOSITORY}" = "" ]; then
    error "No main repository specified!"
fi

readonly CURRENT_BRANCH="$3"
if [ "${CURRENT_BRANCH}" = "" ]; then
    error "No current branch specified!"
fi

readonly ARCH="$4"
if [ "${ARCH}" = "" ]; then
    error "No architecture specified!"
fi
if [ "${ARCH}" = "arm" ]; then
    readonly ARCH_SUBTYPE="armv6hf"
else
    readonly ARCH_SUBTYPE="${ARCH}"
fi

readonly ZROOT="zroot"
readonly PARALLEL_JOBS="10"
readonly SHARED_DIR="/Jails/Shared"
readonly DIFFS_DIR="${SHARED_DIR}/Diffs"
readonly CONF_FILE="/etc/sofin.conf.sh"
readonly LOG_OUTPUT="/var/log/build-$(date +%F).log"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
    validate_env
else
    echo "FATAL: No configuration file found: ${CONF_FILE}. Sofin isn't installed properly."
    exit 1
fi

if [ ! -d "/var/ServeD-OS" ]; then
    cd /var
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git clone https://github.com/VerKnowSys/ServeD-OS.git
else
    cd /var/ServeD-OS
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git pull https://github.com/VerKnowSys/ServeD-OS.git
fi

# main()
echo "Process started for version: ${OS_VER}: $(date +%F@%H-%M)" > ${LOG_OUTPUT}
note "Process started for version: ${OS_VER}: $(date +%F@%H-%M)"
note "Processing version: ${OS_VER} with architecture: ${ARCH}"

cd /var
if [ ! -d "${OS_VER}-src" ]; then
    # svn co http://svn0.eu.FreeBSD.org/base/releng/${OS_VER} ${OS_VER}-src
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git clone --single-branch --branch ${CURRENT_BRANCH} ${MAIN_REPOSITORY} ${OS_VER}-src
    cd ${OS_VER}-src
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git checkout -B ${CURRENT_BRANCH} > /dev/null 2>&1 || true
else
    cd ${OS_VER}-src
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git checkout ${CURRENT_BRANCH} > /dev/null 2>&1
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git pull origin ${CURRENT_BRANCH}
    note "Working on branch: $(/Software/Git/exports/git branch)"
fi

note "Setting up src.conf"
${RM_BIN} -fv /etc/src.conf >> ${LOG_OUTPUT}
${CP_BIN} -v /var/ServeD-OS/etc/src.conf /etc/ >> ${LOG_OUTPUT}

mkdir -p /var/ccache /usr/src /usr/obj > /dev/null 2>&1 || true
set +e
grep '/usr/src' /etc/fstab > /dev/null 2>&1
if [ "$?" != "0" ]; then
    printf "md     /usr/src    mfs   rw,-s4G 0 0\n" >> /etc/fstab
fi
grep '/usr/obj' /etc/fstab > /dev/null 2>&1
if [ "$?" != "0" ]; then
    printf "md     /usr/obj    mfs   rw,-s4G 0 0\n" >> /etc/fstab
fi
set -e
cd /

note "ReMounting ramdisks"
umount -f /usr/src || true
umount -f /usr/obj || true
mount /usr/src
mount /usr/obj

note "Syncing sources to src"
time /Software/Rsync-static/exports/rsync -a -r /var/${OS_VER}-src/ /usr/src/

note "Setting up build host specific settings"
zfs set primarycache=metadata ${ZROOT}
zfs set secondarycache=metadata ${ZROOT}
zfs set dedup=off ${ZROOT}
zfs set compression=lz4 ${ZROOT}
sysctl vfs.zfs.prefetch_disable=1

cd /usr/src
TIMESTAMP="$(date +%F-%s)"
DESTBASE="${SHARED_DIR}/FreeBSD-${OS_VER}-${ARCH}"
zfs create ${ZROOT}${DESTBASE} 2>> ${LOG_OUTPUT} || true
# DESTDIR="${DESTBASE}-${TIMESTAMP}"

note "Preparing kernel configuration"
GIT_SSL_NO_VERIFY=true /Software/Git/exports/git reset --hard >> ${LOG_OUTPUT}
rm -fv sys/${ARCH}/conf/VERKNOWSYS >> ${LOG_OUTPUT}
if [ "${ARCH}" = "arm" ]; then
    cp -v /var/ServeD-OS/kernel/VERKNOWSYS-${OS_VER}-RPI2 sys/${ARCH}/conf/VERKNOWSYS >> ${LOG_OUTPUT}
else
    cp -v /var/ServeD-OS/kernel/VERKNOWSYS-${OS_VER} sys/${ARCH}/conf/VERKNOWSYS >> ${LOG_OUTPUT}
fi

note "Patching sources" # (exporting libucl, libxo, adding svdsysup to init apps)"
# spawn svdinit first:
sed -i '' -e 's#"/sbin/init:/sbin/oinit:/sbin/init.bak:/rescue/init"#"/sbin/svdinit:/sbin/init:/sbin/oinit:/sbin/init.bak:/rescue/init"#' sys/kern/init_main.c
# export libucl:
# sed -i '' -e 's/PRIVATELIB=.*$//' lib/libucl/Makefile
# export libxo:
set +e
echo ${OS_VER} | grep "11" > /dev/null 2>&1
if [ "$?" = "0" ]; then
    # https://github.com/freebsd/freebsd/commit/6471c2fc7c1fced2b5d2073b1629aa76588c61e2:
    sed -i '' -e 's#32#48#' sys/boot/efi/loader/copy.c
else
    # https://github.com/freebsd/freebsd/commit/6471c2fc7c1fced2b5d2073b1629aa76588c61e2:
    sed -i '' -e 's#32#48#' sys/boot/amd64/efi/copy.c
    # sed -i '' -e 's/PRIVATELIB=.*$//' contrib/libxo/Makefile
fi

# echo ${OS_VER} | grep "11" > /dev/null 2>&1
# test "$?" = "0" && sed -i '' -e 's/PRIVATELIB=.*$//' contrib/libxo/Makefile # not available in 10.2
set -e

if [ -z "${DONT_BUILD_WORLD}" ]; then
    note "Building world"
    make buildworld -j${PARALLEL_JOBS} DEBUG= DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE}  >> ${LOG_OUTPUT}  2>&1
fi

note "Building kernel"
make buildkernel -j${PARALLEL_JOBS} DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE} >> ${LOG_OUTPUT} 2>&1

note "Wiping out previous world"
rm -rf ${DESTBASE}/* >> ${LOG_OUTPUT}  2>&1

note "Creating snapshot of destbase: ${DESTBASE}@${TIMESTAMP}_begin"
zfs snapshot ${ZROOT}${DESTBASE}@${TIMESTAMP}_begin

note "Installing kernel"
make installkernel DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE} >> ${LOG_OUTPUT}  2>&1

if [ -z "${DONT_BUILD_WORLD}" ]; then
    rm -rf /var/tmp/temproot
    note "Merging Pre-buildworld configuration"
    mergemaster -p -a

    note "Installing world"
    make installworld DEBUG= DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE} >> ${LOG_OUTPUT}  2>&1

    note "Merging configuration: ${DESTBASE}"
    mergemaster -P -a -D${DESTBASE}

    note "Deleting old dirs, files and libs"
    yes | make delete-old delete-old-libs DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE} >> ${LOG_OUTPUT}  2>&1 || true
fi

if [ -e /usr/src/contrib/libucl/include/ucl.h ]; then
    note "Installing private headers (ucl)"
    cp /usr/src/contrib/libucl/include/ucl.h /usr/include/ucl.h
    cp /usr/src/contrib/libucl/include/ucl.h ${DESTBASE}/usr/include/ucl.h || true
fi

# if [ -e /usr/src/contrib/libxo/include/ucl.h ]; then
#     note "Installing private headers (ucl)"
#     cp /usr/src/contrib/libucl/include/ucl.h /usr/include/ucl.h
#     cp /usr/src/contrib/libucl/include/ucl.h ${DESTBASE}/usr/include/ucl.h || true
# fi

note "Cleaning up"
make clean >> ${LOG_OUTPUT} 2>&1
rm -vrf ${DESTBASE}/{media,mnt,proc,root,sys,etc,dev,rescue,tmp} >> ${LOG_OUTPUT}

note "Snapshotting after installation"
zfs snapshot ${ZROOT}${DESTBASE}@${TIMESTAMP}_end

note "Storing fs diff"
mkdir -p ${DIFFS_DIR} > /dev/null 2>&1
zfs send -i ${ZROOT}${DESTBASE}@${TIMESTAMP}_begin ${ZROOT}${DESTBASE}@${TIMESTAMP}_end > ${DIFFS_DIR}/build-${TIMESTAMP}.zfs

note "Stopping any running jails"
for node in $(gvr list | awk '{print $1;}'); do
    gvr stop ${node}
done

echo "Process finished: $(date +%F@%H-%M)" >> ${LOG_OUTPUT}
note "Process finished: $(date +%F@%H-%M)"

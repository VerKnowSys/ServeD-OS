#!/Software/Zsh/exports/zsh

unset CC CPP CXX CFLAGS CXXFLAGS LDFLAGS MANPATH PATH PKG_CONFIG_PATH MAIL

export PATH=/bin:/sbin:/usr/bin:/usr/sbin

set -e

readonly CURRENT_BRANCH="HardenedBSD-10-STABLE-v32.4"
readonly ZROOT="zroot"
readonly PARALLEL_JOBS="12"
readonly ARCH="$(uname -m)"
readonly SHARED_DIR="/Jails/Shared"
readonly DIFFS_DIR="${SHARED_DIR}/Diffs"
readonly CONF_FILE="/etc/sofin.conf.sh"
readonly LOG_OUTPUT="/var/log/build-$(date +%F).log"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
    validate_env
else
    echo "FATAL: No configuration file found: ${CONF_FILE}. Sofin isn't installed properly."
    exit 1
fi

if [ ! -d "/var/ServeD-OS" ]; then
    cd /var
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git clone https://github.com/VerKnowSys/ServeD-OS.git
else
    cd /var/ServeD-OS
    GIT_SSL_NO_VERIFY=true /Software/Git/exports/git pull https://github.com/VerKnowSys/ServeD-OS.git
fi

note "Setting up src.conf and make.conf"
${RM_BIN} -f /etc/make.conf /etc/src.conf
${CP_BIN} -v /var/ServeD-OS/etc/src.conf /etc/
${CP_BIN} -v /var/ServeD-OS/etc/make.conf /etc/

# main()
version="10.2"
echo "Process started for version: ${version}: $(date +%F@%H-%M)" > ${LOG_OUTPUT}
note "Process started for version: ${version}: $(date +%F@%H-%M)"
note "Processing version: ${version}"
rm -rf /usr/obj /usr/src
cd /var
if [ ! -d "${version}-src" ]; then
    # svn co http://svn0.eu.FreeBSD.org/base/releng/${version} ${version}-src
    /Software/Git/exports/git clone --single-branch --branch hardened/10-stable/master https://github.com/hardenedbsd/hardenedbsd-stable/ ${version}-src
    cd ${version}-src
    /Software/Git/exports/git checkout ${CURRENT_BRANCH}
    /Software/Git/exports/git pull
else
    cd ${version}-src
    /Software/Git/exports/git checkout ${CURRENT_BRANCH} || true
    /Software/Git/exports/git pull
fi

mkdir -p /usr/obj /var/ccache /usr/ramdisk-src /usr/ramdisk-obj > /dev/null 2>&1 || true
set +e
grep '/usr/ramdisk-' /etc/fstab > /dev/null 2>&1
if [ "$?" != "0" ]; then
    printf "md     /usr/ramdisk-src    mfs   rw,-s3G 0 0\n" >> /etc/fstab
    printf "md     /usr/ramdisk-obj    mfs   rw,-s4G 0 0\n" >> /etc/fstab
fi
set -e

note "ReMounting ramdisks"
umount -f /usr/ramdisk-src > /dev/null 2>&1 || true
umount -f /usr/ramdisk-obj > /dev/null 2>&1 || true
mount /usr/ramdisk-src > /dev/null 2>&1 || true
mount /usr/ramdisk-obj > /dev/null 2>&1 || true

note "Syncing sources to ramdisk-src"
time cp -R /var/${version}-src/ /usr/ramdisk-src/
ln -s /usr/ramdisk-src /usr/src
ln -s /usr/ramdisk-obj /usr/obj
cd /usr/src

note "Preparing new Jail builds for timestamp: ${TIMESTAMP}"
TIMESTAMP="$(date +%F-%s)"
DESTBASE="${SHARED_DIR}/FreeBSD-${version}-${ARCH}"
zfs create ${ZROOT}${DESTBASE} 2>> ${LOG_OUTPUT} || true
# DESTDIR="${DESTBASE}-${TIMESTAMP}"

note "Preparing kernel configuration"
GIT_SSL_NO_VERIFY=true /Software/Git/exports/git reset --hard
rm -fv /var/${version}-src/sys/${ARCH}/conf/VERKNOWSYS >> ${LOG_OUTPUT}
cp -v /var/ServeD-OS/kernel/VERKNOWSYS-${version} /var/${version}-src/sys/${ARCH}/conf/VERKNOWSYS >> ${LOG_OUTPUT}

note "Patching sources (exporting libucl, libxo, adding svdsysup to init apps)"
sed -i '' -e 's/PRIVATELIB=.*$//' lib/libucl/Makefile
sed -i '' -e 's/PRIVATELIB=.*$//' contrib/libxo/Makefile || true # not available in 10.2
sed -i '' -e 's#"/sbin/init:/sbin/oinit:/sbin/init.bak:/rescue/init"#"/sbin/svdinit:/sbin/init:/sbin/oinit:/sbin/init.bak:/rescue/init"#' sys/kern/init_main.c

if [ -z "${DONT_BUILD_WORLD}" ]; then
    note "Building world"
    make buildworld -j${PARALLEL_JOBS} DEBUG= DESTDIR=${DESTBASE} >> ${LOG_OUTPUT}  2>&1
fi

note "Building kernel"
make buildkernel -j${PARALLEL_JOBS} DESTDIR=${DESTBASE} >> ${LOG_OUTPUT} 2>&1

note "Creating snapshot of destbase: ${DESTBASE}@${TIMESTAMP}_begin"
zfs snapshot ${ZROOT}${DESTBASE}@${TIMESTAMP}_begin

# note "Cloning ${ZROOT}${DESTBASE}@${TIMESTAMP} to ${ZROOT}${DESTBASE}"
# zfs clone ${ZROOT}${DESTBASE}@${TIMESTAMP} ${ZROOT}${DESTBASE}
# zfs snapshot ${ZROOT}${DESTBASE}@${TIMESTAMP}_begin

note "Installing kernel"
make installkernel DESTDIR=${DESTBASE} >> ${LOG_OUTPUT}  2>&1

if [ -z "${DONT_BUILD_WORLD}" ]; then
    note "Installing world"
    make installworld DEBUG= DESTDIR=${DESTBASE} >> ${LOG_OUTPUT}  2>&1
fi

if [ -e /usr/src/contrib/libucl/include/ucl.h ]; then
    note "Installing private headers (ucl)"
    cp /usr/src/contrib/libucl/include/ucl.h /usr/include/ucl.h
    cp /usr/src/contrib/libucl/include/ucl.h ${DESTBASE}/usr/include/ucl.h || true
fi

note "Cleaning up"
make clean >> ${LOG_OUTPUT} 2>&1
rm -vrf ${DESTBASE}/{media,mnt,proc,root,sys,etc,dev,rescue,tmp} >> ${LOG_OUTPUT}

note "Snapshotting after installation"
zfs snapshot ${ZROOT}${DESTBASE}@${TIMESTAMP}_end

note "Storing fs diff"
mkdir -p ${DIFFS_DIR} > /dev/null 2>&1
zfs send -i ${ZROOT}${DESTBASE}@${TIMESTAMP}_begin ${ZROOT}${DESTBASE}@${TIMESTAMP}_end > ${DIFFS_DIR}/build-${TIMESTAMP}.zfs

# note "Stopping any running jails"
# for node in $(gvr list | awk '{print $1;}'); do
#     gvr stop ${node}
# done

# note "Installing base update in: ${ZROOT}${DESTBASE}-new"
# zfs receive ${ZROOT}${DESTBASE}-new < /tmp/build-${TIMESTAMP}.zfs

# note "Switching to new kernel and software base"
# zfs rename ${ZROOT}${DESTBASE} ${ZROOT}${DESTBASE}-old
# zfs rename ${ZROOT}${DESTBASE}-new ${ZROOT}${DESTBASE}

# note "Destroying additional datasets"
# zfs destroy -R ${ZROOT}${DESTBASE}@${TIMESTAMP}
# zfs destroy -R ${ZROOT}${DESTBASE}-old
# zfs destroy -R ${ZROOT}${DESTBASE}

echo "Process finished: $(date +%F@%H-%M)" >> ${LOG_OUTPUT}
note "Process finished: $(date +%F@%H-%M)"

#!/usr/bin/env sh
#
# @author Daniel (dmilith) Dettaff
#
# TODO: gvr copy-attrs sourcejailname destjailname

. /Software/Sofin/share/loader

GVR_VERSION="0.28.1"
GVR_LOG="/var/log/gvr.log"
ORIGIN="origin"
KERN_SECURELEVEL="0"

# TODO: XXX: replace hardcodes by some kind of global config file:
SHARED_DOMAIN_NAME="__JAIL_SHARED_DOMAIN" # for local zones it can simply be: "local"
JAIL_ROUTER_NETWORK="__JAIL_ROUTER_NETWORK" # NOTE: this has to be replaced with default local network. For example: "100.64.1" or "172.16.3".
JAIL_ROUTER_ADDRESS="${JAIL_ROUTER_NETWORK}.1"

BRIDGE_DEVICE="bridge0"
EPAIR_DEVICE="epair"
SERVED_REPO="/Projects/svdOS"
SOFIN_REPO="/Projects/Sofin"
DEFAULT_SOFIN_REPO="https://github.com/VerKnowSys/sofin.git"
SERVED_SYSTEM_SNAPSHOT_RESOURCE="http://software.verknowsys.com/binary/ServeD"

DEFAULT_ZPOOL="zroot"
DEFAULT_VERSION="11.2"
DEFAULT_ARCH="amd64"
DEFAULT_SHELL="/Software/Zsh/exports/zsh"
LOG="${LOGS_DIR}gvr.log"
DEFAULT_JAIL_USER="worker"
DEFAULT_QUOTA_LIMIT="10G"
DEFAULT_ROOT_QUOTA_LIMIT="2G"
DEFAULT_SENTRY_LIMIT="128M"
DEFAULT_LIMIT_STACK_SIZE="2M"
DEFAULT_LIMIT_MAX_MEMORY="8G"
DEFAULT_LIMIT_MAX_VMEMORY="32G"
DEFAULT_LIMIT_MAXPROC="512"
DEFAULT_LIMIT_OPENFILES="16384" # this is required f.e. for Postgresql to work properly
DEFAULT_LIMIT_MAXPTS="16"
DEFAULT_JAIL_SHARED_LOCATION="/Shared"
DEFAULT_CELLS_LOCATION="${DEFAULT_JAIL_SHARED_LOCATION}/Prison/Cells"
DEFAULT_SENTRY_LOCATION="${DEFAULT_JAIL_SHARED_LOCATION}/Prison/Sentry"
DEFAULT_IGNITERS_LOCATION="${DEFAULT_JAIL_SHARED_LOCATION}/Igniters"
CELL_IP_ADDRESSES_ATTRIBUTE="jail.ip.addresses"
CELL_OS_VERSION_ATTRIBUTE="jail.os.version"
CELL_EPAIR_NUMBER_ATTRIBUTE="jail.vlan.number"
CELL_ATTRIBUTES_DIR="jail-attributes"
CELL_DOMAINS_DIR="jail-domains"
CELL_WEBCONF_DIR="jail-webconfs"
CELL_LOGS_DIR="jail-loggers"
JAIL_CONF_NAME="jail.conf"
JAIL_TRUSS_NAME="jail.truss.log"
JAIL_TRUSS_EXEC_NAME="jail.truss.exec.log"
JAIL_ID_NAME="jail.id"
JAIL_STATUS_NAME="jail.status"
JAIL_RUNNING_INDICATOR="jail.running"
DEFAULT_HOST_ADDRESS="/etc/host.default"
DEFAULT_JAILS_FIB="0"
DEFAULT_UNAME="FreeBSD"
GVR_SCRIPT_NAME="$(${BASENAME_BIN} "${0}" 2>/dev/null)"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 2>/dev/null | ${TAIL_BIN} -n 4 2>/dev/null | ${HEAD_BIN} -n1 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
GVR_HOST_IP_ADDR="$(${IFCONFIG_BIN} "${DEFAULT_INTERFACE}" 2>/dev/null | ${GREP_BIN} -v grep 2>/dev/null | ${GREP_BIN} inet 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
GVR_START_TIMESTAMP_S="$(${DATE_BIN} +%s 2>/dev/null)"


#
# Sanity checks start here:

if [ -z "${DEFAULT_INTERFACE}" ]; then
    error "Something is wrong with network routing configuration. Governor can't continue on this host"
fi
DEFAULT_JAIL_ETC_SOURCE="${SERVED_REPO}/etc-jail/"
if [ ! -d "${DEFAULT_JAIL_ETC_SOURCE}" ]; then
    error "Sanity check failed: Could not found etc source location: ${DEFAULT_JAIL_ETC_SOURCE}. Governor can't continue"
fi

# Create default jail sentry and cells location
if [ ! -d "${DEFAULT_JAIL_SHARED_LOCATION}" ]; then
    # No deduplication on /Shared
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=none ${DEFAULT_ZPOOL}${DEFAULT_JAIL_SHARED_LOCATION}"
fi
if [ ! -d "${DEFAULT_IGNITERS_LOCATION}" ]; then
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=${DEFAULT_IGNITERS_LOCATION} ${DEFAULT_ZPOOL}${DEFAULT_IGNITERS_LOCATION}"
fi
if [ ! -d "${DEFAULT_JAIL_SHARED_LOCATION}/DNS" ]; then
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=${DEFAULT_JAIL_SHARED_LOCATION}/DNS ${DEFAULT_ZPOOL}${DEFAULT_JAIL_SHARED_LOCATION}/DNS"
fi
if [ ! -d "${DEFAULT_JAIL_SHARED_LOCATION}/Custody" ]; then
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=${DEFAULT_JAIL_SHARED_LOCATION}/Custody ${DEFAULT_ZPOOL}${DEFAULT_JAIL_SHARED_LOCATION}/Custody"
fi
if [ ! -d "${DEFAULT_JAIL_SHARED_LOCATION}/Prison" ]; then
    # No deduplication on /Shared/Prison
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=none ${DEFAULT_ZPOOL}${DEFAULT_JAIL_SHARED_LOCATION}/Prison"
fi

if [ ! -d "${DEFAULT_SENTRY_LOCATION}" ]; then
    # Deduplication on /Sentry
    try "${ZFS_BIN} create -o dedup=on -o mountpoint=none ${DEFAULT_ZPOOL}${DEFAULT_SENTRY_LOCATION}"
fi
if [ ! -d "${DEFAULT_CELLS_LOCATION}" ]; then
    # Deduplication on /Cells
    try "${ZFS_BIN} create -o dedup=on -o mountpoint=none ${DEFAULT_ZPOOL}${DEFAULT_CELLS_LOCATION}"
fi

JAIL_CACHE_DIR="${DEFAULT_JAIL_SHARED_LOCATION}/Cache"
if [ ! -d "${JAIL_CACHE_DIR}" ]; then
    try "${ZFS_BIN} create -o compression=lz4 -o checksum=fletcher4 -o primarycache=metadata -o secondarycache=metadata -o mountpoint=${JAIL_CACHE_DIR} ${DEFAULT_ZPOOL}${JAIL_CACHE_DIR}"
fi

DEFAULT_JAIL_SYSTEM_PATH="${DEFAULT_JAIL_SHARED_LOCATION}/${DEFAULT_UNAME}-${DEFAULT_VERSION}-${DEFAULT_ARCH}"
if [ ! -d "${DEFAULT_JAIL_SYSTEM_PATH}" ]; then
    fetch "${SERVED_SYSTEM_SNAPSHOT_RESOURCE}/current-stable" -o "${JAIL_CACHE_DIR}/current-stable" >/dev/null 2>&1
    CURRENT_VERSION="$(cat "${JAIL_CACHE_DIR}/current-stable" 2>/dev/null)"
    if [ -n "${CURRENT_VERSION}" ]; then
        if [ ! -f "${JAIL_CACHE_DIR}/${CURRENT_VERSION}" ]; then
            printf "%b\n" "${ColorGreen}Fetching ServeD stable snapshot: $(distn "${CURRENT_VERSION}") as jail base system: $(distn "${DEFAULT_ZPOOL}${DEFAULT_JAIL_SYSTEM_PATH}")${ColorReset}"
            fetch "${SERVED_SYSTEM_SNAPSHOT_RESOURCE}/${CURRENT_VERSION}" -o "${JAIL_CACHE_DIR}/${CURRENT_VERSION}"
        else
            debug "ServeD stable system snapshot already fetchedâ€¦"
        fi

        zfs list "${DEFAULT_ZPOOL}${DEFAULT_JAIL_SYSTEM_PATH}" >/dev/null || \
            {
                lz4cat "${JAIL_CACHE_DIR}/${CURRENT_VERSION}" 2>/dev/null | zfs receive -u "${DEFAULT_ZPOOL}${DEFAULT_JAIL_SYSTEM_PATH}";
                zfs snapshot "${DEFAULT_ZPOOL}${DEFAULT_JAIL_SYSTEM_PATH}@${ORIGIN}";
            }
    else
        error "Failed to fetch file with current stable. Network issues?"
    fi
fi


# This is where all jail settings are put into global scope of script:
set_values () {
    ENTERED_NAME="${1}"
    if [ -z "${ENTERED_NAME}" ]; then
        error "Empty cell name!"
    fi
    CELL="${DEFAULT_CELLS_LOCATION}/${ENTERED_NAME}"
    SENTRY="${DEFAULT_SENTRY_LOCATION}/${ENTERED_NAME}"
    debug "Processing CELL: ${CELL}, Sentry: ${SENTRY}"
    JAIL_DOMAINS_DIR="${SENTRY}/${CELL_DOMAINS_DIR}"
    JAIL_CONF_FILE="${SENTRY}/${JAIL_CONF_NAME}"
    JAIL_ATTRIBUTES_DIR="${SENTRY}/${CELL_ATTRIBUTES_DIR}"
    JAIL_NAME="$(printf "%s\n" "${ENTERED_NAME}" | ${SED_BIN} 's/\./-/g' 2>/dev/null)"
    JAIL_ID_FILE="${SENTRY}/${JAIL_ID_NAME}"
    JAIL_TRACE_LOG="${SENTRY}/${JAIL_TRUSS_NAME}"
    JAIL_EXEC_LOG="${SENTRY}/${JAIL_TRUSS_EXEC_NAME}"
    DEBUG_COMMAND=""
    DEBUG_EXEC_COMMAND=""
    if [ "${DEBUG}" = "truss" ]; then
        DEBUG_COMMAND="${TRUSS_BIN} -o ${JAIL_TRACE_LOG}"
        DEBUG_EXEC_COMMAND="${TRUSS_BIN} -o ${JAIL_EXEC_LOG}"
    fi
    JAIL_EPAIR_NUMBER_FILE="${SENTRY}/${CELL_EPAIR_NUMBER_ATTRIBUTE}"
    JAIL_VERSION_FILE="${SENTRY}/${CELL_OS_VERSION_ATTRIBUTE}"
    JAIL_ADDRESSES_FILE="${SENTRY}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
    JAIL_WEBSERVER_CONF_DIR="${SENTRY}/${CELL_WEBCONF_DIR}"
    JAIL_LOGS_CONF_DIR="${SENTRY}/${CELL_LOGS_DIR}"
    JAIL_STATUS_FILE="${SENTRY}/${JAIL_STATUS_NAME}"
    JAIL_STATUS_DETAIL=""
    if [ -f "${JAIL_STATUS_FILE}" ]; then
        JAIL_STATUS_DETAIL="$(${CAT_BIN} "${JAIL_STATUS_FILE}" 2>/dev/null)"
    fi
    JAIL_STATUS="${ColorRed}*off*${ColorGray} ${JAIL_STATUS_DETAIL}${ColorReset}"
    ${JLS_BIN} -v 2>/dev/null | ${EGREP_BIN} "${JAIL_NAME} .*ACTIVE" >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        JAIL_STATUS="${ColorGreen}*on*${ColorGray} ${JAIL_STATUS_DETAIL}${ColorReset}"
    fi
    debug "Jail status: $(printf "%b\n" "${JAIL_STATUS}")"
    JAIL_VERSION="${DEFAULT_VERSION}"
    if [ -f "${JAIL_VERSION_FILE}" ]; then
        JAIL_VERSION="$(${CAT_BIN} "${JAIL_VERSION_FILE}" 2>/dev/null)"
    fi
    if [ -f "${JAIL_EPAIR_NUMBER_FILE}" ]; then
        EPAIR_NUMBER="$(${CAT_BIN} "${JAIL_EPAIR_NUMBER_FILE}" 2>/dev/null)"
    fi
    debug "Got jail os version: ${JAIL_VERSION}"
    JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${JAIL_VERSION}-${SYSTEM_ARCH}"
    debug "Got jail source: ${JAIL_SOURCE}"
    if [ -f "${JAIL_ADDRESSES_FILE}" ]; then
        JAIL_IPS="$(${CAT_BIN} "${JAIL_ADDRESSES_FILE}" 2>/dev/null)"
    fi
    debug "Got jail IP(s): ${JAIL_IPS}"
    HOSTNAMES=""
    for hostnfile in $(${FIND_BIN} "${JAIL_DOMAINS_DIR}" -type f 2>> "${GVR_LOG}"); do
        hostn="$(${CAT_BIN} "${hostnfile}" 2>/dev/null | ${GREP_BIN} "local-zone:" 2>/dev/null | ${SED_BIN} 's/^.* "//;s/.".*//' 2>/dev/null)"
        debug "hostn: ${hostn}"
        HOSTNAMES="*.${hostn} ${HOSTNAMES}"
    done
    debug "Got jail hostnames: ${HOSTNAMES}"
    JAIL_LOCAL_DOMAIN_CONF="${JAIL_DOMAINS_DIR}/local.conf"
}


show_version () {
    printf "%b\n" "${ColorGreen}GoVeRnor: ${ColorCyan}v${GVR_VERSION}${ColorReset}"
}


check_cell_name () {
    GIVEN_NAME="${1}"
    NAME="$(${BASENAME_BIN} "${GIVEN_NAME}" 2>/dev/null)"
    if [ ! -d "${GIVEN_NAME}" ]; then
        error "Bad jail name: ${NAME}"
    fi
}


apply_attributes () {
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:stacksize:deny=${DEFAULT_LIMIT_STACK_SIZE}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:memoryuse:deny=${DEFAULT_LIMIT_MAX_MEMORY}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:vmemoryuse:deny=${DEFAULT_LIMIT_MAX_VMEMORY}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:maxproc:deny=${DEFAULT_LIMIT_MAXPROC}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:openfiles:deny=${DEFAULT_LIMIT_OPENFILES}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:pseudoterminals:deny=${DEFAULT_LIMIT_MAXPTS}" && \
        debug "Applied default attributes for jail: $(distd "${JAIL_NAME}")"

    debug "Applying attributes from location: ${JAIL_ATTRIBUTES_DIR} for jail: ${JAIL_NAME}"
    ${MKDIR_BIN} -p "${JAIL_DOMAINS_DIR}" "${JAIL_ATTRIBUTES_DIR}" "${JAIL_WEBSERVER_CONF_DIR}" "${JAIL_LOGS_CONF_DIR}"
    cd "${JAIL_ATTRIBUTES_DIR}"
    for attribute in $(${LS_BIN} 2>/dev/null); do
        value="$(${CAT_BIN} "${JAIL_ATTRIBUTES_DIR}/${attribute}" 2>/dev/null)"
        debug "Attribute: ${attribute}, value: ${value}"
        case "${attribute}" in
            key)
                a_key="ssh-ed25519 ${value} ${JAIL_NAME}"
                ${JEXEC_BIN} "${JAIL_NAME}" "${DEFAULT_SHELL}" -c "${MKDIR_BIN} -p /User/.ssh; printf \"%s\n\" '${a_key}' >> /User/.ssh/authorized_keys"
                ${JEXEC_BIN} "${JAIL_NAME}" "${DEFAULT_SHELL}" -c "${CHOWN_BIN} -R ${DEFAULT_JAIL_USER} /User/.ssh"
                ;;

            ip)
                printf "%b\n" "${ColorGreen}Setting IPs: ${ColorCyan}${value}${ColorGreen} for jail: ${ColorCyan}${JAIL_NAME}"
                debug "conf: ${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
                printf "%s" "${value}" > "${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
                ${SED_BIN} -i '' -e "s#ip4\.addr.*;\$#ip4.addr = ${value};#" "${JAIL_CONF_FILE}"
                ${RM_BIN} -f "${JAIL_ATTRIBUTES_DIR}/${attribute}"
                ;;

            +ip)
                file_size="$(${STAT_BIN} -f%z "${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}" 2>/dev/null)"
                if [ "${file_size}" -gt "0" ]; then
                    printf "%s" ",${value}" >> "${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
                    current_value="$(${CAT_BIN} "${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}" 2>/dev/null | ${TR_BIN} '\n' ',' 2>/dev/null | ${SED_BIN} -E 's/[,]{2,}/,/g;s/,$//;s/^[,]{1,}//g' 2>/dev/null)"
                    debug "Current value: ${current_value}"
                    ${SED_BIN} -i '' -e "s#ip4\.addr.*;\$#ip4.addr = ${current_value};#" "${JAIL_CONF_FILE}"
                fi
                ${RM_BIN} -f "${JAIL_ATTRIBUTES_DIR}/${attribute}"
                ;;

            quota-root)
                printf "%b\n" "${ColorGreen}Setting root dir quota of: ${ColorCyan}${value}${ColorGreen} to: ${ColorCyan}${DEFAULT_ZPOOL}${CELL}"
                run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}${CELL}"
                ;;

            quota)
                printf "%b\n" "${ColorGreen}Setting quota of: ${value} to ${DEFAULT_ZPOOL}/*/${JAIL_NAME}"
                for dest in Software Services User; do
                    run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}/${dest}/${JAIL_NAME}"
                done
                ;;

            quota-software)
                printf "%b\n" "${ColorGreen}Setting quota of: ${ColorCyan}${value}${ColorGreen} to: ${ColorCyan}${DEFAULT_ZPOOL}/Software/${JAIL_NAME}"
                run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}"
                ;;

            quota-services)
                printf "%b\n" "${ColorGreen}Setting quota of: ${ColorCyan}${value}${ColorGreen} to: ${ColorCyan}${DEFAULT_ZPOOL}/Services/${JAIL_NAME}"
                run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}"
                ;;

            quota-user)
                printf "%b\n" "${ColorGreen}Setting quota of: ${ColorCyan}${value}${ColorGreen} to: ${ColorCyan}${DEFAULT_ZPOOL}/User/${JAIL_NAME}"
                run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}/User/${JAIL_NAME}"
                ;;

            *)
                ${RCTL_BIN} -a "jail:${JAIL_NAME}:${attribute}:deny=${value}" >> "${GVR_LOG}" 2>&1
                if [ "$?" = "0" ]; then
                    printf "%b\n" "${ColorGreen}Overriden attribute: ${ColorCyan}${attribute}${ColorGreen} with value: ${ColorCyan}${value}"
                else
                    warn "Wrong attribute: $(distw "${attribute}")"
                fi
                ;;

        esac
    done
}


check_jail_address () {
    JAIL_ADDRESS_CHECK="${1}"
    for jail in $(${LS_BIN} ${DEFAULT_SENTRY_LOCATION} 2>/dev/null); do
        IP_FILE="${DEFAULT_SENTRY_LOCATION}/${jail}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
        if [ -f "${IP_FILE}" ]; then
            for ip in $(${CAT_BIN} "${IP_FILE}" 2>/dev/null | ${TR_BIN} ',' '\n' 2>/dev/null); do
                JAIL_ADDRESS_CHECK=$(printf "%s" "${JAIL_ADDRESS_CHECK}" | ${TR_BIN} ',' '\n' 2>/dev/null)
                for addrchk in ${JAIL_ADDRESS_CHECK}; do
                    echo "${ip}" | ${GREP_BIN} "${addrchk}" > /dev/null 2>&1
                    if [ "$?" = "0" ]; then
                        error "Address: ${addrchk} is already assigned to jail: ${jail}"
                    fi
                done
            done
        fi
    done
}


check_jail_name () {
    GIVEN_NAME="${1}"
    for jail in $(${LS_BIN} ${DEFAULT_SENTRY_LOCATION} 2>/dev/null); do
        if [ "${jail}" = "${GIVEN_NAME}" ]; then
            error "Name: ${GIVEN_NAME} is already used"
        fi
    done
}


attributes_show () {
    # NOTE: resources, taken from FreeBSD "rctl" man page:
    printf "%b\n" "${ColorGreen}Attributes with description:"
    printf "%b\n" "   ${ColorCyan}pcpu${ColorGray}: ${ColorGreen}CPU percentage${ColorReset}"
    printf "%b\n" "   ${ColorCyan}cputime${ColorGray}: ${ColorGreen}CPU time, in seconds${ColorReset}"
    printf "%b\n" "   ${ColorCyan}datasize${ColorGray}: ${ColorGreen}data size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}stacksize${ColorGray}: ${ColorGreen}stack size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}coredumpsize${ColorGray}: ${ColorGreen}core dump size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}memoryuse${ColorGray}: ${ColorGreen}resident set size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}memorylocked${ColorGray}: ${ColorGreen}locked memory, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}maxproc${ColorGray}: ${ColorGreen}number of processes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}openfiles${ColorGray}: ${ColorGreen}file descriptor table size${ColorReset}"
    printf "%b\n" "   ${ColorCyan}vmemoryuse${ColorGray}: ${ColorGreen}address space limit, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}pseudoterminals${ColorGray}: ${ColorGreen}number of PTYs${ColorReset}"
    printf "%b\n" "   ${ColorCyan}swapuse${ColorGray}: ${ColorGreen}swap usage, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nthr${ColorGray}: ${ColorGreen}number of threads${ColorReset}"
    printf "%b\n" "   ${ColorCyan}msgqqueued${ColorGray}: ${ColorGreen}number of queued SysV messages${ColorReset}"
    printf "%b\n" "   ${ColorCyan}msgqsize${ColorGray}: ${ColorGreen}SysV message queue size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nmsgq${ColorGray}: ${ColorGreen}number of SysV message queues${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nsem${ColorGray}: ${ColorGreen}number of SysV semaphores${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nsemop${ColorGray}: ${ColorGreen}number of SysV semaphores modified in a single semop(2) call${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nshm${ColorGray}: ${ColorGreen}number of SysV shared memory segments${ColorReset}"
    printf "%b\n" "   ${ColorCyan}shmsize${ColorGray}: ${ColorGreen}SysV shared memory size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}wallclock${ColorGray}: ${ColorGreen}wallclock time, in seconds${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota${ColorGray}: ${ColorGreen}quota value for /Services, /User and /Software datasets (fmt: 1G 512M 128K). ${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota-services${ColorGray}: ${ColorGreen}quota value for /Services dataset only (fmt: 1G 512M 128K). ${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota-user${ColorGray}: ${ColorGreen}quota value for /User dataset only (fmt: 1G 512M 128K). ${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota-software${ColorGray}: ${ColorGreen}quota value for /Software dataset only (fmt: 1G 512M 128K). ${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota-root${ColorGray}: ${ColorGreen}quota value for jail base (/) system dataset only (fmt: 1G 512M 128K)${ColorReset}"
    printf "%b\n" "   ${ColorCyan}key${ColorGray}: ${ColorGreen}SSH public key (Skip public key header and comment parts) to be added to authorized keys of jail${ColorRes}\n"
    printf "%b\n" "   ${ColorCyan}ip${ColorGray}: ${ColorGreen}change jail IP addresses (comma separated) [requires jail restart]${ColorReset}"
    printf "%b\n" "   ${ColorCyan}+ip${ColorGray}: ${ColorGreen}adds specified (comma separated) IP addresses to jail [requires jail restart]${ColorReset}"
}


mark_running () {
    printf "%s\n" "$(${DATE_BIN} +%F-%H%M%S 2>/dev/null)" > "${SENTRY}/${JAIL_RUNNING_INDICATOR}"
}


jail_create () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} create myname IP/Netmask,IP2/Netmask(, â€¦ )"
        note
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail name given"
    fi
    check_jail_name "${GIVEN_NAME}"
    JAIL_ADDRESSES="${2}"
    if [ "${JAIL_ADDRESSES}" = "" ]; then
        usage
        error "No ip given"
    fi
    check_jail_address "${JAIL_ADDRESSES}"

    JAIL_VERSION="${3}"
    if [ "${JAIL_VERSION}" = "" ]; then
        JAIL_VERSION="${DEFAULT_VERSION}"
    fi

    EPAIR_NUMBER="$(${JOT_BIN} -r 1 10 4090 2>/dev/null)" # pick Random vlan Number between 10 and 4090
    EPAIR="${EPAIR_DEVICE}${EPAIR_NUMBER}"
    ${IFCONFIG_BIN} "${EPAIR}" > /dev/null 2>&1
    while [ "$?" = "0" ]; do
        EPAIR_NUMBER="$(${JOT_BIN} -r 1 10 4090 2>/dev/null)"
        run "${IFCONFIG_BIN} ${EPAIR}" && \
            printf "%b\n" "${ColorGreen}Picked network vlan: ${EPAIR}"
    done

    set_values "${GIVEN_NAME}"

    run "${ZFS_BIN} create -o mountpoint=${SENTRY} ${DEFAULT_ZPOOL}${SENTRY}" && \
    run "${ZFS_BIN} set quota=${DEFAULT_SENTRY_LIMIT} ${DEFAULT_ZPOOL}${SENTRY}" && \
        debug "Mounted and set sentry"

    if [ -f "${JAIL_CONF_FILE}" ]; then
        warn "Jail already configured"
    else
        ADDRESSES_LIST="$(echo "${JAIL_ADDRESSES}" | ${TR_BIN} ',' '\n' 2>/dev/null)"
        if [ -z "${ADDRESSES_LIST}" ]; then
            error "Addresses list can't be empty!"
        fi
        # printf "%b\n" "${ColorGreen}Configuring jail for addresses: ${ColorCyan}${JAIL_ADDRESSES}"
        # run "${IFCONFIG_BIN} ${EPAIR} create" && \
        # run "${IFCONFIG_BIN} ${EPAIR} ${EPAIR_DEVICE} ${EPAIR_NUMBER} vlandev ${DEFAULT_INTERFACE}" && \
        # if [ "${ip}" != "${ADDRESSES_LIST}" ]; then
        #     for ip in ${ADDRESSES_LIST}; do
        #         run "${IFCONFIG_BIN} ${EPAIR} ${ip} alias" || \
        #         warn "Failed to alias to IP: ${ip} on dev: ${EPAIR}"
        #     done
        # fi

        printf "
${JAIL_NAME} {
    # name = \"${JAIL_NAME}\";
    exec.fib = ${DEFAULT_JAILS_FIB};
    exec.prestart += \"${IFCONFIG_BIN} ${EPAIR} create up; ${IFCONFIG_BIN} ${EPAIR}a up; ${IFCONFIG_BIN} ${BRIDGE_DEVICE} addm ${EPAIR}a up;\";
    exec.start  = \"${IFCONFIG_BIN} lo0 127.0.0.1 up\";
    exec.start  += \"${IFCONFIG_BIN} ${EPAIR}b up\";
    exec.start  += \"${IFCONFIG_BIN} ${EPAIR}b inet ${JAIL_ADDRESSES} up\";
    exec.start  += \"${ROUTE_BIN} add default ${JAIL_ROUTER_ADDRESS}\";
    exec.start  += \"service sshd restart; service cron restart\";
    exec.start  += \"test -f /etc/rc.local && ${SH_BIN} /etc/rc.local\";
    # NOTE: not actually required if we don't want any additional subsystems: exec.start  += \"${SH_BIN} /etc/rc\";
    exec.stop = \"${SH_BIN} /etc/rc.shutdown\";
    exec.poststop  = \"${IFCONFIG_BIN} ${BRIDGE_DEVICE} deletem ${EPAIR}a\";
    exec.poststop  += \"${IFCONFIG_BIN} ${EPAIR}a destroy\";
    exec.clean;

    host.hostname = \"${JAIL_NAME}\";
    path = \"${CELL}\";

    enforce_statfs = 1;
    allow.mount = 1;
    allow.mount.zfs = 1;
    allow.mount.nullfs = 1;
    allow.mount.tmpfs = 1;
    allow.raw_sockets = 1;
    allow.sysvipc = 1;
    mount.devfs;

    persist;
    vnet;
    vnet.interface  = \"${EPAIR}b\";
}
" >> "${JAIL_CONF_FILE}"
    fi

    LAST=""
    DEFAULT_JAILS_ROOT_DIR="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}"
    debug "Looking for snapshots of: $(distd "${DEFAULT_JAILS_ROOT_DIR}")"
    ${ZFS_BIN} list -t snap 2>/dev/null | ${EGREP_BIN} "${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}@[a-z0-9_-]" > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        LAST="$(${ZFS_BIN} list -H -S creation -t snap -o name 2>/dev/null | ${EGREP_BIN} "${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}@[a-z0-9_-]" 2>/dev/null | ${SED_BIN} 's/.*@//;s/ .*//' | ${HEAD_BIN} -n 1 2>/dev/null)"
        debug "Last snapshot of: $(distd "${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}")is: $(distd "${LAST}")"
    fi
    if [ -z "${LAST}" ]; then
        LAST="${ORIGIN}"
        run "${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}@${LAST}" && \
        warn "No snapshots found of base: '${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}'. Created ${ORIGIN} snapshot"
    fi

    run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}@${LAST} ${DEFAULT_ZPOOL}${CELL}" && \
        debug "Cloned last jail system base: $(distd "${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}@${LAST}") to: $(distd "${CELL}${ColorReset}")"

    mst_recent_soft="$(${ZFS_BIN} list -H -S creation -t snap -o name 2>/dev/null | ${EGREP_BIN} "${DEFAULT_ZPOOL}/Software/root@[Pa-z0-9_-]" 2>/dev/null | ${SED_BIN} 's/.*@//;s/ .*//' | ${HEAD_BIN} -n 1 2>/dev/null)"
    ${ZFS_BIN} list -t snap | ${GREP_BIN} "${DEFAULT_ZPOOL}/Software/root@${mst_recent_soft}" > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        error "Something went wrong. Missing ${ORIGIN} snapshot: '$(diste "${DEFAULT_ZPOOL}/Software/root@${mst_recent_soft}")'. Aborting"
    else
        debug "Found an software root ${ORIGIN} of snapshot: $(distd "${DEFAULT_ZPOOL}/Software/root@${mst_recent_soft}")"
    fi
    {
        printf "%b\n" "${ColorGreen}Cloning: ${ColorCyan}${DEFAULT_ZPOOL}/Software/${JAIL_NAME} ${ColorGreen}from most recent snapshot: ${ColorCyan}${DEFAULT_ZPOOL}/Software/root@${mst_recent_soft}";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root@${mst_recent_soft} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root/Sofin@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}/Sofin";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root/Git@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}/Git";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root/Zsh@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}/Zsh";
    }

    for dset in Software Services User Shared; do
        ${ZFS_BIN} list 2>/dev/null | ${EGREP_BIN} "${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" >/dev/null 2>&1 || \
        run "${ZFS_BIN} create -p ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        run "${ZFS_BIN} set dedup=on ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
        run "${ZFS_BIN} set checksum=fletcher4 ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
        run "${ZFS_BIN} set aclinherit=passthrough ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
        run "${ZFS_BIN} set aclmode=passthrough ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
        run "${ZFS_BIN} set canmount=off ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
        run "${ZFS_BIN} set mountpoint=none ${DEFAULT_ZPOOL}/${dset}" && \
        run "${ZFS_BIN} set mountpoint=/${dset} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
        run "${ZFS_BIN} set quota=${DEFAULT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
        run "${ZFS_BIN} allow -u ${DEFAULT_JAIL_USER} xattr,atime,casesensitivity,checksum,copies,logbias,primarycache,secondarycache,snapdir,userused,dedup,mountpoint,canmount,userprop,create,destroy,snapshot,rollback,clone,promote,rename,mount,send,receive,reservation,readonly ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME} 2>/dev/null" && \
            debug "Dataset configured: $(distd "${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}")"
    done
    run "${ZFS_BIN} set quota=${DEFAULT_ROOT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}${CELL}"
    run "${ZFS_BIN} set mountpoint=${CELL} ${DEFAULT_ZPOOL}${CELL}"
    {
        debug "Installing software services data"
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Services/root/Git@${ORIGIN} ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}/Git";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Services/root/Zsh@${ORIGIN} ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}/Zsh";
    }

    ${MKDIR_BIN} -p "${JAIL_WEBSERVER_CONF_DIR}" \
                    "${JAIL_ATTRIBUTES_DIR}" \
                    "${JAIL_DOMAINS_DIR}" \
                    "${JAIL_LOGS_CONF_DIR}" \
                    "${CELL}/tmp" \
                    "${CELL}/dev" \
                    "${CELL}/var/log" \
                    "${CELL}/var/www" \
                    "${CELL}/var/tmp" \
                    "${CELL}/SystemUsers" \
                    "${CELL}/Software" \
                    "${CELL}/Services" \
                    "${CELL}/Shared" \
                    "${CELL}/User"

    if [ ! -f "${JAIL_EPAIR_NUMBER_FILE}" ]; then
        printf "%s\n" "${EPAIR_NUMBER}" > "${JAIL_EPAIR_NUMBER_FILE}"
    fi
    if [ ! -f "${JAIL_VERSION_FILE}" ]; then
        printf "%s\n" "${JAIL_VERSION}" > "${JAIL_VERSION_FILE}"
    fi
    printf "%s\n" "${JAIL_ADDRESSES}" >> "${JAIL_ADDRESSES_FILE}"

    run "${CP_BIN} -R ${DEFAULT_JAIL_ETC_SOURCE} ${CELL}/etc" && \
    run "${SED_BIN} -i '' -e \"s:__JAIL_NAME:${JAIL_NAME}.${SHARED_DOMAIN_NAME}:\" ${CELL}/etc/rc.conf" && \
    run "${RM_BIN} -f ${CELL}/etc/rc.conf.local" && \
    run "${SED_BIN} -i '' -e \"s:__HOST_IP:${JAIL_ROUTER_ADDRESS}:\" ${CELL}/etc/resolv.conf" && \
        run "${CHMOD_BIN} g+w ${CELL}/etc/resolv.conf /etc/rc.local /etc/rc.shutdown /etc/cron.d /etc/hosts" && \
        debug "Built initial jail environment"

    if [ ! -f "${CELL}/etc/sysctl.conf" ]; then
        run "${CP_BIN} -v ${SERVED_REPO}/etc-jail/sysctl.conf ${CELL}/etc/sysctl.conf" && \
        debug "Created sysctl.conf from svdOS repository"
    fi

    run "${CP_BIN} -f /usr/bin/igni ${CELL}/usr/bin/igni" && \
    run "${CP_BIN} -f /usr/bin/rsync ${CELL}/usr/bin/rsync" && \
    run "${RM_BIN} -f ${CELL}/etc/zshenv ${CELL}/etc/zshrc" && \
    run "${MKDIR_BIN} -p ${CELL}/etc/zsh" && \
    run "${CP_BIN} -R ${SERVED_REPO}/shell/ ${CELL}/etc/zsh" && \
    run "${MV_BIN} -v ${CELL}/etc/zsh/zshrc ${CELL}/etc/zshrc" && \
    run "${MV_BIN} -v ${CELL}/etc/zsh/zshenv ${CELL}/etc/zshenv" && \
        debug "Jail system shell configured"

    # XXX: TODO: complete versionning (consider if necessary)
    # svd_version="$(${ZFS_BIN} get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT 2>/dev/null)"
    # run "${ZFS_BIN} set com.svd:version=${svd_version} ${DEFAULT_ZPOOL}${CELL}" && \
    #     debug "Updated client ServeD version property from base system"

    for logger in messages production staging development; do
        run "${MKFIFO_BIN} -m \"a=-rwx,u=rw\" \"${CELL}/var/log/${logger}\"" && \
        ${CHOWN_BIN} "${EPAIR_NUMBER}" "${CELL}/var/log/${logger}" && \
        printf "
source s_${JAIL_NAME}_${logger} {
    pipe(\"${CELL}/var/log/${logger}\");
};
destination d_${JAIL_NAME}_${logger}_file {
    file(\"/var/log/${JAIL_NAME}-${logger}.log\" template(t_default_format));
};
log {
    source(s_${JAIL_NAME}_${logger});
    destination(d_${JAIL_NAME}_${logger}_file);
};
" > "${JAIL_LOGS_CONF_DIR}/${logger}.conf" && \
        debug "Created logger: $(distd "${logger}")"
    done

    debug "Reloading syslog"
    service syslog-ng reload >/dev/null || service syslog-ng restart >/dev/null

    debug "Setting up local domains from main IPs: $(distd "${JAIL_ADDRESSES}")"
    MAIN_JAIL_ADDRESS="$(echo "${JAIL_ADDRESSES}" | ${SED_BIN} -e 's#/.*# #g' 2>/dev/null)"

    printf "\n%b\n\n%b\n%b\n%b\n\n" \
        "# DNS record template" \
        "local-zone: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}.\" redirect" \
        "local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 360 IN A ${MAIN_JAIL_ADDRESS}\"" \
        "local-data: \"pma.${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 360 IN A ${MAIN_JAIL_ADDRESS}\"" \
        "local-data-ptr: \"${MAIN_JAIL_ADDRESS} ${JAIL_NAME}.${SHARED_DOMAIN_NAME}\"" >> "${JAIL_LOCAL_DOMAIN_CONF}"

    # NOTE: old template, just in case:
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 10800 IN NS ns1.${SHARED_DOMAIN_NAME}.\"
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 10800 IN NS ns2.${SHARED_DOMAIN_NAME}.\"
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 1800  IN SRV 10 10 22 ${JAIL_NAME}.${SHARED_DOMAIN_NAME}.\"
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 10800 IN SOA ns1.${SHARED_DOMAIN_NAME}. ns2.${SHARED_DOMAIN_NAME}. $(${DATE_BIN} +%s 2>/dev/null) 3600 600 86400 3600\"
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 10800 IN A ${MAIN_JAIL_ADDRESS}\"

    # NOTE: DNS_IGNITER has to do restarting since Unbound is not loading new zone configurations on SIGHUP
    note "Reloading $(distn "DNS") and $(distn "Web-proxy") configuration."
    try "igni dns reload"
    try "igni proxy reload"

    note "Starting jail: $(distd "${JAIL_NAME}")"
    jail_start "${JAIL_NAME}" && \
        debug "Zone: $(distd "${JAIL_NAME}.${SHARED_DOMAIN_NAME}") is now locally resolvable. Owned by: $(distd "${JAIL_NAME}")" && \
        return 0

    error "Failed to successfully reload zone: ${ColorCyan}${JAIL_NAME}.${SHARED_DOMAIN_NAME}"
}


jail_status () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} status jail-name${ColorReset}"
    }
    GIVEN_NAME="${1}"
    VERBOSE="${2}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail name given"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"

    printf "%b\n" "${ColorGreen}Status: ${JAIL_STATUS}${ColorReset}"
    printf "%b\n" "${ColorGreen}Name: ${ColorCyan}${JAIL_NAME}${ColorReset}"
    echo "${JAIL_STATUS}" | ${GREP_BIN} '\*on\*' > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        JAIL_NUM_ID="$(${JLS_BIN} 2>/dev/null | ${EGREP_BIN} "${JAIL_NAME}[\.\ ]" 2>/dev/null | ${AWK_BIN} '{print $1;}' 2>/dev/null)"
        debug "JAIL_NUM_ID: ${JAIL_NUM_ID}"
        printf "%b\n" "${ColorGreen}JID: ${ColorCyan}${JAIL_NUM_ID}${ColorReset}"
    fi
    EPAIR="${EPAIR_DEVICE}$(${CAT_BIN} "${SENTRY}/jail.vlan.number" 2>/dev/null)"
    printf "%b\n" "${ColorGreen}JUID: $(distn "${EPAIR_NUMBER}")${ColorReset}"
    printf "%b\n" "${ColorGreen}IPv4s: ${ColorCyan}${JAIL_IPS}${ColorReset}"
    printf "%b\n" "${ColorGreen}Interface: ${ColorCyan}${EPAIR}${ColorReset}"
    printf "%b\n" "${ColorGreen}Hostnames: ${ColorCyan}${HOSTNAMES}${ColorReset}"
    printf "%b\n\n" "${ColorGreen}OS version: ${ColorCyan}${JAIL_VERSION}${ColorReset}"
    if [ -d "${JAIL_ATTRIBUTES_DIR}" ]; then
        printf "%b\n" "${ColorGreen}Overriden attributes:"
        for attr in $(${FIND_BIN} "${JAIL_ATTRIBUTES_DIR}" -type f 2>/dev/null); do
            printf "%b\n" "${ColorCyan}${attr##*/}: $(${CAT_BIN} "${attr}" 2>/dev/null)"
        done
        printf "\n"
    fi
    printf "%b\n" "${ColorGreen}Live attributes:\n${ColorCyan}$(${RCTL_BIN} -h "jail:${JAIL_NAME}" 2>/dev/null | ${SED_BIN} 's/jail:n1://g' 2>/dev/null | ${SED_BIN} 's/:deny=/: /g' 2>/dev/null)${ColorReset}"
    case ${VERBOSE} in
        v|-v|-verbose|verbose|more)
            printf "\nFull configuration:\n%b\n" "${ColorCyan}$(${CAT_BIN} "${JAIL_CONF_FILE}" 2>/dev/null)"
            ;;
    esac
}


jail_list () {
    if [ ! -d "${DEFAULT_CELLS_LOCATION}" ]; then
        mkdir -p "${DEFAULT_CELLS_LOCATION}"
    fi
    cd ${DEFAULT_CELLS_LOCATION}
    for cell in $(${LS_BIN} 2>/dev/null); do
        cellname="$(printf "%s" "${cell}" | ${AWK_BIN} '{print substr($1,0,29);}' 2>/dev/null)" # first 29 chars visible in jls output
        printf "%s" "${cell}"
        if [ -f "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESSES_ATTRIBUTE}" ]; then
            JAIL_IPS="$(${CAT_BIN} "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESSES_ATTRIBUTE}" 2>/dev/null | ${TR_BIN} '\n' ',' 2>/dev/null | ${SED_BIN} -e 's/,$//' 2>/dev/null)"
        fi
        ${JLS_BIN} -v | ${EGREP_BIN} "${cellname} .*ACTIVE" >> "${GVR_LOG}" 2>&1
        if [ "$?" = "0" ]; then
            printf "%b" " ${ColorCyan}${JAIL_IPS}${ColorReset} ${ColorGreen}*on*${ColorReset}"
        else
            printf "%b" " ${ColorCyan}${JAIL_IPS}${ColorReset} ${ColorRed}*off*${ColorReset}"
        fi
        printf "\n"
    done
}


# Apply settings and start jail
jail_start () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} start jail-name"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail to start"
    fi
    set_values "${GIVEN_NAME}"

    ${JLS_BIN} 2>/dev/null | ${EGREP_BIN} "${GIVEN_NAME}[\.\ ]" > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        printf "%b\n" "${ColorGreen}Jail with name: ${ColorCyan}${GIVEN_NAME}${ColorGreen} is already running"
        exit 0
    fi

    check_cell_name "${CELL}"
    if [ -f "${JAIL_ADDRESSES_FILE}" ]; then
        JAIL_IPS="$(${CAT_BIN} "${JAIL_ADDRESSES_FILE}" 2>/dev/null | ${TR_BIN} ',' '\n' 2>/dev/null)"
    fi

    ${DEBUG_COMMAND} "${JAIL_BIN}" -c -J "${JAIL_ID_FILE}" -f "${JAIL_CONF_FILE}" >> "${GVR_LOG}" 2>> "${GVR_LOG}"
    if [ "$?" = "0" ]; then
        JAIL_NUM_ID="$(${JLS_BIN} 2>/dev/null | ${EGREP_BIN} "${JAIL_NAME}[\.\ ]" 2>/dev/null | ${AWK_BIN} '{print $1;}' 2>/dev/null)"

        GVR_AFTER_START_TIMESTAMP_S="$(${DATE_BIN} +%s 2>/dev/null)"
        GVR_ELAPSED_S="$(( ${GVR_AFTER_START_TIMESTAMP_S} - ${GVR_START_TIMESTAMP_S} ))"

        printf "%s\n" "[launched by ${USER} on $(${DATE_BIN} +%F-%H%M%S 2>/dev/null)]" > "${JAIL_STATUS_FILE}"
        ${JEXEC_BIN} "${JAIL_NAME}" "${PW_BIN}" usermod "${DEFAULT_JAIL_USER}" -u "${EPAIR_NUMBER}" && \
            note "Took: $(distn "${GVR_ELAPSED_S}s") to deploy jail: $(distn "${JAIL_NAME}") (JID: $(distn "${JAIL_NUM_ID}"); UID: $(distn "${EPAIR_NUMBER}"), Zone: $(distn "${JAIL_NAME}.${SHARED_DOMAIN_NAME}"))"

        apply_attributes

        if [ -z "${JAIL_NUM_ID}" ]; then
            error "Jail ID is empty!"
        fi
        for dset in Services Software Shared User; do
            run "${ZFS_BIN} jail ${JAIL_NUM_ID} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
            run "${ZFS_BIN} set canmount=on ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
            run "${ZFS_BIN} set jailed=on ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
                debug "Filesystem jailed: $(distd "${dset}")"
        done

        run "${JEXEC_BIN} ${JAIL_NAME} ${CHMOD_BIN} +s ${SYSCTL_BIN} ${ZFS_BIN} ${CHOWN_BIN}"
        run "${JEXEC_BIN} ${JAIL_NAME} ${SYSCTL_BIN} -f /etc/sysctl.conf || :" && debug "Jail sysctl.conf loaded"
        run "${JEXEC_BIN} ${JAIL_NAME} mount -a" && debug "Mounted /dev and /tmp"
        run "${JEXEC_BIN} ${JAIL_NAME} ${ZFS_BIN} mount -a" && debug "Zfs datasets mounted"
        run "${JEXEC_BIN} ${JAIL_NAME} ${SYSCTL_BIN} kern.securelevel=${KERN_SECURELEVEL}" && debug "Securelevel: ${ColorCyan}${KERN_SECURELEVEL}"
        run "${JEXEC_BIN} ${JAIL_NAME} touch /User/.zshrc" # Avoid Zsh welcome bullshit
        run "${JEXEC_BIN} ${JAIL_NAME} ${CHOWN_BIN} ${DEFAULT_JAIL_USER} /Services /User /Software /Shared /var/log /var/www"

        mark_running && \
            debug "Jail is running"
    else
        try "${IFCONFIG_BIN} ${EPAIR}b destroy 2>/dev/null"
        error "Jail launch failed. Look into log file: ${ColorCyan}${GVR_LOG}"
    fi
}


jail_stop () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} stop jail-name${ColorReset}"
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail to stop"
    fi
    SENTRY="${DEFAULT_SENTRY_LOCATION}/${GIVEN_NAME}"
    EPAIR="${EPAIR_DEVICE}$(${CAT_BIN} "${SENTRY}/jail.vlan.number" 2>/dev/null)"
    try "${IFCONFIG_BIN} ${EPAIR}a down; ${IFCONFIG_BIN} ${EPAIR}a destroy"

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    JAIL_NUM_ID="$(${JLS_BIN} 2>/dev/null | ${EGREP_BIN} -F "${JAIL_NAME}[\.\ ]" 2>/dev/null | ${AWK_BIN} '{print $1;}' 2>/dev/null)"
    for dir in /dev /tmp; do
        try "${UMOUNT_BIN} -f ${CELL}${dir}" && \
            debug "Unmounted: $(distd "${dir}")"
    done
    for dset in User Services Software; do
        if [ ! -z "${JAIL_NUM_ID}" ]; then
            run "${ZFS_BIN} unjail ${JAIL_NUM_ID} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        fi
        # run "${ZFS_BIN} umount -f ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" || \
        run "${ZFS_BIN} set canmount=off ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" || \
            printf "%b\n" "${ColorGreen}Unjailed and unmounted: ${ColorCyan}${dset}"
    done

    run "${DEBUG_EXEC_COMMAND} ${JAIL_BIN} -r ${JAIL_NAME}" && \
        printf "%b\n" "${ColorGreen}Terminated jail: ${ColorCyan}${JAIL_NAME}"

    printf "%s\n" "[terminated by ${USER} on $(${DATE_BIN} +%F-%H-%M-%S)]" > "${JAIL_STATUS_FILE}"

    run "${RM_BIN} -f ${SENTRY}/${JAIL_RUNNING_INDICATOR}" && \
        debug "Removed jail running indicator: $(distd "${SENTRY}/${JAIL_RUNNING_INDICATOR}")"
}


jail_set () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} set jail-name attribute=value attr2=val2 (...)"
    }
    GIVEN_NAME="${1}"
    shift
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail name given"
    fi

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    for argument_pair in ${*}; do
        ATTRIBUTE="$(printf "%s\n" "${argument_pair}" | ${AWK_BIN} '{split($0, a, "="); print a[1];}' 2>/dev/null)"
        JAIL_VALUE="$(printf "%s\n" "${argument_pair}" | ${AWK_BIN} '{split($0, a, "="); print a[2];}' 2>/dev/null)"
        debug "arg: ${ATTRIBUTE}, val: ${JAIL_VALUE} "
        printf "%b\n" "${ColorGreen}Setting attribute: ${ColorCyan}${ATTRIBUTE}${ColorGreen}, value: ${ColorCyan}${JAIL_VALUE}${ColorGreen} for jail: ${ColorCyan}${JAIL_NAME}"
        printf "%s\n" "${JAIL_VALUE}" > "${JAIL_ATTRIBUTES_DIR}/${ATTRIBUTE}"
    done
    apply_attributes
}


jail_unset () {
    usage () {
        printf "%b\n" "Usage: ${ColorCyan}${GVR_SCRIPT_NAME} unset jail-name attribute value"
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail name given"
    fi
    shift

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    for jail_attribute in ${*}; do
        run "${RM_BIN} -f ${JAIL_ATTRIBUTES_DIR}/${jail_attribute}" && \
        try "${RCTL_BIN} -r jail:${JAIL_NAME}:${jail_attribute}" && \
            printf "%b\n" "${ColorGreen}Unset attribute: ${ColorCyan}${jail_attribute}${ColorGreen} for jail: ${ColorCyan}${JAIL_NAME}"
    done
    apply_attributes
}


jail_login () {
    usage () {
        printf "%b\n" "Usage: ${ColorCyan}${GVR_SCRIPT_NAME} login jail-name"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail to enter"
    fi
    JAIL_LOGIN="${DEFAULT_JAIL_USER}"
    GIVEN_USER="${2}"
    if [ "${GIVEN_USER}" != "" ]; then
        JAIL_LOGIN="${GIVEN_USER}"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    ${JLS_BIN} -v 2>/dev/null | ${GREP_BIN} "$(${BASENAME_BIN} "${CELL}" 2>/dev/null) .*ACTIVE" >> ${GVR_LOG} 2>> ${GVR_LOG}
    if [ "$?" = "0" ]; then
        debug "Logging in as: ${JAIL_LOGIN} to jail: ${JAIL_NAME}" && \
        ${DEBUG_EXEC_COMMAND} "${JEXEC_BIN}" "${JAIL_NAME}" "su" "${DEFAULT_JAIL_USER}" && \
            printf "%b\n" "${ColorGreen}Logged out from jail: ${ColorCyan}${JAIL_NAME}"
    else
        error "Start jail first!"
    fi
}


jail_restart () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} restart jail-name${ColorReset}"
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail to restart"
    fi
    jail_stop ${*}
    jail_start ${*}
}


jail_destroy () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} destroy jail-name${ColorReset}"
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No jail to destroy"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"

    printf "%b\n" "${ColorGreen}Are you sure you want to destroy jail: ${ColorCyan}$(${BASENAME_BIN} "${GIVEN_NAME}")${ColorGreen} with ${ColorRed}ALL SERVICES DATA?"
    printf "%b\n" "${ColorGreen}Type ${ColorCyan}YES${ColorGreen} to confirm"
    read -r ans
    if [ "${ans}" = "YES" ]; then
        if [ -f "${SENTRY}/${JAIL_RUNNING_INDICATOR}" ]; then
            jail_stop ${*}
        fi
        run "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}" && \
        run "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}" && \
        run "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}/Shared/${JAIL_NAME}" && \
        run "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}/User/${JAIL_NAME}" && \
        run "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}${SENTRY}" && \
        run "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}${CELL}" && \
        run "${RM_BIN} -rf ${CELL}" && \
        run "${RM_BIN} -rf ${SENTRY}" && \
            printf "%b\n" "${ColorGreen}Destroyed datasets of jail: ${ColorCyan}${JAIL_NAME}" && \
            service local_unbound configtest >> ${GVR_LOG} 2>&1 && \
            service local_unbound restart >> ${GVR_LOG} 2>&1 && \
                printf "%b\n" "${ColorGreen}Unbound resolver restarted"
    else
        printf "%b\n" "${ColorGreen}Jail: ${ColorCyan}$(${BASENAME_BIN} "${GIVEN_NAME}" 2>/dev/null) left intact"
    fi
}


case $1 in
    ver|v|version)
        shift
        show_version
        ;;

    create|c)
        shift
        jail_create ${*}
        ;;

    destroy)
        shift
        jail_destroy ${*}
        ;;

    status|s|stat)
        shift
        jail_status ${*}
        ;;

    start)
        shift
        jail_start ${*}
        ;;

    stop)
        shift
        jail_stop ${*}
        ;;

    restart)
        shift
        jail_restart ${*}
        ;;

    list|l|lst)
        shift
        jail_list ${*}
        ;;

    set)
        shift
        jail_set ${*}
        ;;

    unset)
        shift
        jail_unset ${*}
        ;;

    login)
        shift
        jail_login ${*}
        ;;

    attributes|attrs)
        attributes_show
        ;;

    boot)
        cd ${DEFAULT_SENTRY_LOCATION}
        for jail in *; do
            if [ -f "${DEFAULT_SENTRY_LOCATION}/${jail}/${JAIL_RUNNING_INDICATOR}" ]; then
                printf "%b\n" "${ColorGreen}Initializing boot of jail: ${ColorCyan}${jail}"
                nohup "${0}" start "${jail}" > /dev/null 2>&1 &
            else
                warn "Boot skipped for: $(distw "${jail}")"
            fi
        done
        ;;

    *)
        CMD="${GVR_SCRIPT_NAME}"
        note "Usage:"
        printf "%b\n" "  ${ColorCyan}${CMD} command arg1 arg2 [...]${ColorReset}"

        note "List of commands:"
        printf "%b\n" "  ${ColorCyan}ver${ColorReset}: ${ColorGreen}prints Governor and svdOS versions${ColorReset}"
        printf "%b\n" "  ${ColorCyan}boot${ColorReset}: ${ColorGreen}launches all previously running jails${ColorReset}"
        printf "%b\n" "  ${ColorCyan}create${ColorReset}: ${ColorGreen}creates new jail${ColorReset}"
        printf "%b\n" "  ${ColorCyan}list${ColorReset} | ${ColorCyan}lst${ColorReset} | ${ColorCyan}l${ColorReset}: ${ColorGreen}lists created jails${ColorReset}"
        printf "%b\n" "  ${ColorCyan}set${ColorReset}: ${ColorGreen}set attributes for jails${ColorReset}"
        printf "%b\n" "  ${ColorCyan}attributes${ColorReset} | ${ColorCyan}attrs${ColorReset}: ${ColorGreen}shows attributes list modifiable by '${CMD} set â€¦' ${ColorReset}"
        printf "%b\n" "  ${ColorCyan}login${ColorReset}: ${ColorGreen}logins to jail${ColorReset}"
        printf "%b\n" "  ${ColorCyan}start${ColorReset}: ${ColorGreen}starts created, non running jail${ColorReset}"
        printf "%b\n" "  ${ColorCyan}stop${ColorReset}: ${ColorGreen}stops running jail${ColorReset}"
        printf "%b\n" "  ${ColorCyan}restart${ColorReset}: ${ColorGreen}restarts a jail${ColorReset}"
        printf "%b\n" "  ${ColorCyan}status${ColorReset}: ${ColorGreen}shows detailed configuration of a jail${ColorReset}"
        printf "%b\n" "  ${ColorCyan}destroy${ColorReset}: ${ColorGreen}destroys a jail${ColorReset}"

        printf "\n%b\n" "${ColorGreen}Run '${ColorCyan}${CMD} [command]${ColorReset}${ColorGreen}' without arguments to see detailed help about command params.${ColorReset}"
        ;;
esac


exit 0

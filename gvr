#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#
# TODO: gvr copy-attrs sourcejailname destjailname

. /Software/Sofin/share/loader

GVR_VERSION="0.36.0"
GVR_LOG="/var/log/gvr.log"
GVR_LOCK="/var/run/gvr.lock"

GVR_PID="${$}"

# TODO: XXX: replace hardcodes by some kind of global config file:
SHARED_DOMAIN_NAME="__JAIL_SHARED_DOMAIN" # for local zones it can simply be: "local"
JAIL_ROUTER_NETWORK="__JAIL_ROUTER_NETWORK" # NOTE: this has to be replaced with default local network. For example: "100.64.1" or "172.16.3".
JAIL_ROUTER_ADDRESS="${JAIL_ROUTER_NETWORK}.1"

BRIDGE_DEVICE="bridge0"
EPAIR_DEVICE="epair"
SERVED_REPO="/Projects/svdOS"
SOFIN_REPO="/Projects/sofin"
DEFAULT_SOFIN_REPO="https://github.com/VerKnowSys/sofin.git"
SERVED_SYSTEM_SNAPSHOT_RESOURCE="http://software.verknowsys.com/binary/ServeD"

ORIGIN="origin"
DEFAULT_ZPOOL="zroot"
DEFAULT_VERSION="11.2"
DEFAULT_ARCH="amd64"
KERN_SECURELEVEL="0"
# DEFAULT_SHELL="/Software/Zsh/exports/zsh"
LOG="${LOGS_DIR}gvr.log"
DEFAULT_JAIL_USER="worker"
DEFAULT_QUOTA_LIMIT="10G"
DEFAULT_ROOT_QUOTA_LIMIT="2G"
DEFAULT_SENTRY_LIMIT="128M"
DEFAULT_LIMIT_STACK_SIZE="2M"
DEFAULT_LIMIT_MAX_MEMORY="8G"
DEFAULT_LIMIT_MAX_VMEMORY="32G"
DEFAULT_LIMIT_MAXPROC="512"
DEFAULT_LIMIT_OPENFILES="16384" # this is required f.e. for Postgresql to work properly
DEFAULT_LIMIT_MAXPTS="16"
SHARED_DIR="/Shared"
PRISON_DIR="${SHARED_DIR}/Prison"
CELLS_DIR="${PRISON_DIR}/Cells"
SENTRY_DIR="${PRISON_DIR}/Sentry"
IGNITERS_DIR="${SHARED_DIR}/Igniters"
SYSTEM_NETIDS_DIR="${SHARED_DIR}/NetIDs"
SYSTEM_IPS_DIR="${SHARED_DIR}/IPs"
SYSTEM_DNS_DIR="${SHARED_DIR}/DNS"
CELL_IP_ADDRESSES_ATTRIBUTE="cell.ip.addresses"
CELL_OS_VERSION_ATTRIBUTE="cell.os.version"
CELL_EPAIR_NUMBER_ATTRIBUTE="cell.vlan.number"
CELL_ATTRIBUTES_DIR="cell-attributes"
CELL_DOMAINS_DIR="cell-domains"
CELL_WEBCONF_DIR="cell-webconfs"
CELL_LOGS_DIR="cell-loggers"
JAIL_CONF_NAME="cell.conf"
JAIL_TRUSS_NAME="cell.truss.log"
JAIL_TRUSS_EXEC_NAME="cell.truss.exec.log"
JAIL_ID_NAME="cell.id"
JAIL_STATUS_NAME="cell.status"
JAIL_RUNNING_INDICATOR="cell.running"
DEFAULT_HOST_ADDRESS="/etc/host.default"
DEFAULT_JAILS_FIB="0"
DEFAULT_UNAME="FreeBSD"
GVR_SCRIPT_NAME="${0##*/}" # basename()
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 2>/dev/null | ${TAIL_BIN} -n 4 2>/dev/null | ${HEAD_BIN} -n1 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
GVR_HOST_IP_ADDR="$(${IFCONFIG_BIN} "${DEFAULT_INTERFACE}" 2>/dev/null | ${GREP_BIN} -v grep 2>/dev/null | ${GREP_BIN} inet 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
GVR_START_TIMESTAMP_S="$(${DATE_BIN} +%s 2>/dev/null)"


create_lock () {
    printf "%s\n" "${GVR_PID}" > "${GVR_LOCK}"
}


acquire_lock_for () {
    _lock_pid="$(${CAT_BIN} "${GVR_LOCK}" 2>/dev/null)"
    if [ -n "${_lock_pid}" ]; then
        debug "Lock pid: $(distd "${_lock_pid}"). GVR pid: $(distd "${GVR_PID}"), GVR PPID: $(distd "${PPID}")"
        try "${KILL_BIN} -0 ${_lock_pid} 2>/dev/null"
        if [ "${?}" = "0" ]; then # NOTE: process is alive
            if [ "${_lock_pid}" = "${GVR_PID}" ] \
            || [ "${PPID}" = "${GVR_PID}" ]; then
                debug "Dealing with own process or it's fork, process may continue.."
            elif [ "${_lock_pid}" = "${GVR_PID}" ] && \
                 [ -z "${PPID}" ]; then
                debug "Dealing with no fork, process may continue.."
            else
                note "Awaiting lock. Another instance is running with PID: $(distn "${_lock_pid}…")"
                sleep 5
                acquire_lock_for
            fi
        else # NOTE: process is dead
            debug "Found lock file acquired by dead process. Acquring a new lock.."
            create_lock
        fi
    else
        debug "Lock pid: $(distd "None"), GVR pid: $(distd "${GVR_PID}")"
        create_lock
    fi
}


# TODO: currently gvr is not parallel safe, hence pid locking is used:
acquire_lock_for


#
# Sanity checks start here:

if [ -z "${DEFAULT_INTERFACE}" ]; then
    error "Something is wrong with network routing configuration. Governor can't continue on this host"
fi
DEFAULT_JAIL_ETC_SOURCE="${SERVED_REPO}/etc-jail/"
if [ ! -d "${DEFAULT_JAIL_ETC_SOURCE}" ]; then
    error "Sanity check failed: Could not found etc source location: ${DEFAULT_JAIL_ETC_SOURCE}. Governor can't continue"
fi

# Create default jail sentry and cells location
if [ ! -d "${SHARED_DIR}" ]; then
    # No deduplication on /Shared
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=none ${DEFAULT_ZPOOL}${SHARED_DIR}"
fi
if [ ! -d "${IGNITERS_DIR}" ]; then
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=${IGNITERS_DIR} ${DEFAULT_ZPOOL}${IGNITERS_DIR}"
fi
if [ ! -d "${PRISON_DIR}" ]; then
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=none ${DEFAULT_ZPOOL}${PRISON_DIR}"
fi
if [ ! -d "${SYSTEM_DNS_DIR}" ]; then
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=${SYSTEM_DNS_DIR} ${DEFAULT_ZPOOL}${SYSTEM_DNS_DIR}"
fi
if [ ! -d "${SYSTEM_NETIDS_DIR}" ]; then
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=${SHARED_DIR}/NetIDs ${DEFAULT_ZPOOL}${SYSTEM_NETIDS_DIR}"
fi
if [ ! -d "${SYSTEM_IPS_DIR}" ]; then
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=${SYSTEM_IPS_DIR} ${DEFAULT_ZPOOL}${SYSTEM_IPS_DIR}"
fi

if [ ! -d "${SENTRY_DIR}" ]; then
    # Deduplication on /Sentry
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=none ${DEFAULT_ZPOOL}${SENTRY_DIR}"
fi
if [ ! -d "${CELLS_DIR}" ]; then
    # Deduplication on /Cells
    try "${ZFS_BIN} create -o dedup=off -o mountpoint=none ${DEFAULT_ZPOOL}${CELLS_DIR}"
fi

JAIL_CACHE_DIR="${SHARED_DIR}/Cache"
if [ ! -d "${JAIL_CACHE_DIR}" ]; then
    try "${ZFS_BIN} create -o compression=lz4 -o checksum=fletcher4 -o primarycache=metadata -o secondarycache=metadata -o mountpoint=${JAIL_CACHE_DIR} ${DEFAULT_ZPOOL}${JAIL_CACHE_DIR}"
fi

DEFAULT_JAIL_SYSTEM_PATH="${SHARED_DIR}/${DEFAULT_UNAME}-${DEFAULT_VERSION}-${DEFAULT_ARCH}"
if [ ! -d "${DEFAULT_JAIL_SYSTEM_PATH}" ]; then
    fetch "${SERVED_SYSTEM_SNAPSHOT_RESOURCE}/current-stable" -o "${JAIL_CACHE_DIR}/current-stable" >/dev/null 2>&1
    CURRENT_VERSION="$(cat "${JAIL_CACHE_DIR}/current-stable" 2>/dev/null)"
    if [ -n "${CURRENT_VERSION}" ]; then
        if [ ! -f "${JAIL_CACHE_DIR}/${CURRENT_VERSION}" ]; then
            printf "%b\n" "${ColorGreen}Fetching ServeD stable snapshot: $(distn "${CURRENT_VERSION}") as cell base system: $(distn "${DEFAULT_ZPOOL}${DEFAULT_JAIL_SYSTEM_PATH}")${ColorReset}"
            fetch "${SERVED_SYSTEM_SNAPSHOT_RESOURCE}/${CURRENT_VERSION}" -o "${JAIL_CACHE_DIR}/${CURRENT_VERSION}"
        else
            debug "ServeD stable system snapshot already fetched…"
        fi

        zfs list "${DEFAULT_ZPOOL}${DEFAULT_JAIL_SYSTEM_PATH}" >/dev/null || \
            {
                lz4cat "${JAIL_CACHE_DIR}/${CURRENT_VERSION}" 2>/dev/null | zfs receive -u "${DEFAULT_ZPOOL}${DEFAULT_JAIL_SYSTEM_PATH}";
                zfs snapshot "${DEFAULT_ZPOOL}${DEFAULT_JAIL_SYSTEM_PATH}@${ORIGIN}";
            }
    else
        error "Failed to fetch file with current stable. Network issues?"
    fi
fi

invoke_sofin_install () {
    _pwd="${PWD}"
    cd "${SOFIN_REPO}"
    bin/upgrade >/dev/null 2>/dev/null && \
        debug "Upgraded Sofin, since no @origin snapshot found for dataset: ${DEFAULT_ZPOOL}/Software/root/Sofin"
    cd "${_pwd}"
}
# Make sure Sofin dataset has at least origin snapshot present::
zfs list -H -r -t snap -o name "${DEFAULT_ZPOOL}/Software/root/Sofin@${ORIGIN}" >/dev/null 2>&1 || \
    invoke_sofin_install


# This is where all cell settings are put into global scope of script:
set_values () {
    ENTERED_NAME="${1}"
    if [ -z "${ENTERED_NAME}" ]; then
        error "Empty cell name!"
    fi
    CELL="${CELLS_DIR}/${ENTERED_NAME}"
    SENTRY="${SENTRY_DIR}/${ENTERED_NAME}"
    debug "Processing CELL: ${CELL}, Sentry: ${SENTRY}"
    JAIL_DOMAINS_DIR="${SENTRY}/${CELL_DOMAINS_DIR}"
    JAIL_CONF_FILE="${SENTRY}/${JAIL_CONF_NAME}"
    JAIL_ATTRIBUTES_DIR="${SENTRY}/${CELL_ATTRIBUTES_DIR}"
    JAIL_NAME="$(printf "%s\n" "${ENTERED_NAME}" | ${SED_BIN} 's/\./-/g' 2>/dev/null)"
    JAIL_ID_FILE="${SENTRY}/${JAIL_ID_NAME}"
    JAIL_TRACE_LOG="${SENTRY}/${JAIL_TRUSS_NAME}"
    JAIL_EXEC_LOG="${SENTRY}/${JAIL_TRUSS_EXEC_NAME}"
    DEBUG_COMMAND=""
    DEBUG_EXEC_COMMAND=""
    if [ "${DEBUG}" = "truss" ]; then
        DEBUG_COMMAND="${TRUSS_BIN} -o ${JAIL_TRACE_LOG}"
        DEBUG_EXEC_COMMAND="${TRUSS_BIN} -o ${JAIL_EXEC_LOG}"
    fi
    JAIL_EPAIR_NUMBER_FILE="${SENTRY}/${CELL_EPAIR_NUMBER_ATTRIBUTE}"
    JAIL_VERSION_FILE="${SENTRY}/${CELL_OS_VERSION_ATTRIBUTE}"
    JAIL_ADDRESSES_FILE="${SENTRY}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
    JAIL_WEBSERVER_CONF_DIR="${SENTRY}/${CELL_WEBCONF_DIR}"
    JAIL_LOGS_CONF_DIR="${SENTRY}/${CELL_LOGS_DIR}"
    JAIL_STATUS_FILE="${SENTRY}/${JAIL_STATUS_NAME}"
    JAIL_STATUS_DETAIL=""
    if [ -f "${JAIL_STATUS_FILE}" ]; then
        JAIL_STATUS_DETAIL="$(${CAT_BIN} "${JAIL_STATUS_FILE}" 2>/dev/null)"
    fi
    JAIL_STATUS="${ColorRed}*off*${ColorGray} ${JAIL_STATUS_DETAIL}${ColorReset}"
    ${JLS_BIN} -v 2>/dev/null | ${EGREP_BIN} -o " ${JAIL_NAME} .*ACTIVE" >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        JAIL_STATUS="${ColorGreen}*on*${ColorGray} ${JAIL_STATUS_DETAIL}${ColorReset}"
    fi
    debug "Cell status: $(printf "%b\n" "${JAIL_STATUS}")"
    JAIL_VERSION="${DEFAULT_VERSION}"
    if [ -f "${JAIL_VERSION_FILE}" ]; then
        JAIL_VERSION="$(${CAT_BIN} "${JAIL_VERSION_FILE}" 2>/dev/null)"
    fi
    if [ -f "${JAIL_EPAIR_NUMBER_FILE}" ]; then
        EPAIR_NUMBER="$(${CAT_BIN} "${JAIL_EPAIR_NUMBER_FILE}" 2>/dev/null)"
    fi
    debug "Got cell os version: ${JAIL_VERSION}"
    JAIL_SOURCE="${SHARED_DIR}/${SYSTEM_NAME}-${JAIL_VERSION}-${SYSTEM_ARCH}"
    debug "Got cell source: ${JAIL_SOURCE}"
    if [ -f "${JAIL_ADDRESSES_FILE}" ]; then
        JAIL_IPS="$(${CAT_BIN} "${JAIL_ADDRESSES_FILE}" 2>/dev/null)"
    fi
    # debug "Got cell IP(s): ${JAIL_IPS}"
    HOSTNAMES=""
    if [ -d "${JAIL_DOMAINS_DIR}" ]; then
        debug "Cell domains dir is present: $(distd "${JAIL_DOMAINS_DIR}")"
        for hostnfile in $(${FIND_BIN} "${JAIL_DOMAINS_DIR}" -type f 2>> "${GVR_LOG}"); do
            hostn="$(${CAT_BIN} "${hostnfile}" 2>/dev/null | ${GREP_BIN} "local-zone:" 2>/dev/null | ${SED_BIN} 's/^.* "//;s/.".*//' 2>/dev/null)"
            debug "hostn: ${hostn}"
            HOSTNAMES="*.${hostn} ${HOSTNAMES}"
        done
        debug "Got cell hostnames: ${HOSTNAMES}"
    else
        debug "Cell domains dir is absent: $(distd "${JAIL_DOMAINS_DIR}")"
    fi

    JAIL_LOCAL_DOMAIN_CONF="${JAIL_DOMAINS_DIR}/local.conf"
}


show_version () {
    printf "%b\n" "${ColorGreen}GoVeRnor: ${ColorCyan}v${GVR_VERSION}${ColorReset}"
}


# check_cell_name () {
#     _given_name="${1}"
#     _filename="${_given_name##*/}"
#     if [ ! -d "${_given_name}" ]; then
#         error "No such cell: $(diste "${_given_name}"), file: $(diste "${_filename}")"
#     fi
# }


apply_attributes () {
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:stacksize:deny=${DEFAULT_LIMIT_STACK_SIZE}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:memoryuse:deny=${DEFAULT_LIMIT_MAX_MEMORY}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:vmemoryuse:deny=${DEFAULT_LIMIT_MAX_VMEMORY}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:maxproc:deny=${DEFAULT_LIMIT_MAXPROC}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:openfiles:deny=${DEFAULT_LIMIT_OPENFILES}" && \
    run "${RCTL_BIN} -a jail:${JAIL_NAME}:pseudoterminals:deny=${DEFAULT_LIMIT_MAXPTS}" && \
        debug "Applied default attributes for cell: $(distd "${JAIL_NAME}")"

    debug "Applying attributes from location: ${JAIL_ATTRIBUTES_DIR} for cell: ${JAIL_NAME}"
    ${MKDIR_BIN} -p "${JAIL_DOMAINS_DIR}" "${JAIL_ATTRIBUTES_DIR}" "${JAIL_WEBSERVER_CONF_DIR}" "${JAIL_LOGS_CONF_DIR}"
    cd "${JAIL_ATTRIBUTES_DIR}"
    for attribute in $(${LS_BIN} 2>/dev/null); do
        value="$(${CAT_BIN} "${JAIL_ATTRIBUTES_DIR}/${attribute}" 2>/dev/null)"
        debug "Attribute: ${attribute}, value: ${value}"
        case "${attribute}" in
            key)
                a_key="ssh-ed25519 ${value} ${JAIL_NAME}"
                ${JEXEC_BIN} "${JAIL_NAME}" "${SH_BIN}" -c "${MKDIR_BIN} -p /User/.ssh; printf \"%s\n\" '${a_key}' >> /User/.ssh/authorized_keys"
                ${JEXEC_BIN} "${JAIL_NAME}" "${SH_BIN}" -c "${CHOWN_BIN} -R ${DEFAULT_JAIL_USER} /User/.ssh"
                ;;

            ip)
                printf "%b\n" "${ColorGreen}Setting IPs: ${ColorCyan}${value}${ColorGreen} for cell: ${ColorCyan}${JAIL_NAME}${ColorReset}"
                debug "conf: ${SENTRY_DIR}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
                printf "%s" "${value}" > "${SENTRY_DIR}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
                ${SED_BIN} -i '' -e "s#ip4\.addr.*;\$#ip4.addr = ${value};#" "${JAIL_CONF_FILE}"
                ${RM_BIN} -f "${JAIL_ATTRIBUTES_DIR}/${attribute}"
                ;;

            +ip)
                file_size="$(${STAT_BIN} -f%z "${SENTRY_DIR}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}" 2>/dev/null)"
                if [ "${file_size}" -gt "0" ]; then
                    printf "%s" ",${value}" >> "${SENTRY_DIR}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
                    current_value="$(${CAT_BIN} "${SENTRY_DIR}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}" 2>/dev/null | ${TR_BIN} '\n' ',' 2>/dev/null | ${SED_BIN} -E 's/[,]{2,}/,/g;s/,$//;s/^[,]{1,}//g' 2>/dev/null)"
                    debug "Current value: ${current_value}"
                    ${SED_BIN} -i '' -e "s#ip4\.addr.*;\$#ip4.addr = ${current_value};#" "${JAIL_CONF_FILE}"
                fi
                ${RM_BIN} -f "${JAIL_ATTRIBUTES_DIR}/${attribute}"
                ;;

            quota-root)
                printf "%b\n" "${ColorGreen}Setting root dir quota of: ${ColorCyan}${value}${ColorGreen} to: ${ColorCyan}${DEFAULT_ZPOOL}${CELL}${ColorReset}"
                run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}${CELL}"
                ;;

            quota)
                printf "%b\n" "${ColorGreen}Setting quota of: ${value} to ${DEFAULT_ZPOOL}/*/${JAIL_NAME}${ColorReset}"
                for dest in Software Services User; do
                    run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}/${dest}/${JAIL_NAME}"
                done
                ;;

            quota-software)
                printf "%b\n" "${ColorGreen}Setting quota of: ${ColorCyan}${value}${ColorGreen} to: ${ColorCyan}${DEFAULT_ZPOOL}/Software/${JAIL_NAME}${ColorReset}"
                run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}"
                ;;

            quota-services)
                printf "%b\n" "${ColorGreen}Setting quota of: ${ColorCyan}${value}${ColorGreen} to: ${ColorCyan}${DEFAULT_ZPOOL}/Services/${JAIL_NAME}${ColorReset}"
                run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}"
                ;;

            quota-user)
                printf "%b\n" "${ColorGreen}Setting quota of: ${ColorCyan}${value}${ColorGreen} to: ${ColorCyan}${DEFAULT_ZPOOL}/User/${JAIL_NAME}${ColorReset}"
                run "${ZFS_BIN} set quota=${value} ${DEFAULT_ZPOOL}/User/${JAIL_NAME}"
                ;;

            *)
                ${RCTL_BIN} -a "jail:${JAIL_NAME}:${attribute}:deny=${value}" >> "${GVR_LOG}" 2>&1
                if [ "$?" = "0" ]; then
                    printf "%b\n" "${ColorGreen}Overriden attribute: ${ColorCyan}${attribute}${ColorGreen} with value: ${ColorCyan}${value}${ColorReset}"
                else
                    warn "Wrong attribute: $(distw "${attribute}")"
                fi
                ;;

        esac
    done
}


# check_cell_address () {
#     JAIL_ADDRESS_CHECK="${1}"
#     for jail in $(${LS_BIN} ${SENTRY_DIR} 2>/dev/null); do
#         IP_FILE="${SENTRY_DIR}/${jail}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
#         if [ -f "${IP_FILE}" ]; then
#             for ip in $(${CAT_BIN} "${IP_FILE}" 2>/dev/null | ${TR_BIN} ',' '\n' 2>/dev/null); do
#                 JAIL_ADDRESS_CHECK=$(printf "%s" "${JAIL_ADDRESS_CHECK}" | ${TR_BIN} ',' '\n' 2>/dev/null)
#                 for addrchk in ${JAIL_ADDRESS_CHECK}; do
#                     echo "${ip}" | ${GREP_BIN} "${addrchk}" > /dev/null 2>&1
#                     if [ "$?" = "0" ]; then
#                         error "Address: ${addrchk} is already assigned to jail: ${jail}"
#                     fi
#                 done
#             done
#         fi
#     done
# }


check_cell_name () {
    GIVEN_NAME="${1}"
    for _cell in $(${LS_BIN} "${SENTRY_DIR}" 2>/dev/null); do
        if [ "${_cell}" = "${GIVEN_NAME}" ]; then
            error "Name: $(diste "${GIVEN_NAME}") is already in use!"
        fi
    done
}


attributes_show () {
    # NOTE: resources, taken from FreeBSD "rctl" man page:
    printf "%b\n" "${ColorGreen}Attributes with description:"
    printf "%b\n" "   ${ColorCyan}pcpu${ColorGray}: ${ColorGreen}CPU percentage${ColorReset}"
    printf "%b\n" "   ${ColorCyan}cputime${ColorGray}: ${ColorGreen}CPU time, in seconds${ColorReset}"
    printf "%b\n" "   ${ColorCyan}datasize${ColorGray}: ${ColorGreen}data size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}stacksize${ColorGray}: ${ColorGreen}stack size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}coredumpsize${ColorGray}: ${ColorGreen}core dump size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}memoryuse${ColorGray}: ${ColorGreen}resident set size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}memorylocked${ColorGray}: ${ColorGreen}locked memory, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}maxproc${ColorGray}: ${ColorGreen}number of processes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}openfiles${ColorGray}: ${ColorGreen}file descriptor table size${ColorReset}"
    printf "%b\n" "   ${ColorCyan}vmemoryuse${ColorGray}: ${ColorGreen}address space limit, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}pseudoterminals${ColorGray}: ${ColorGreen}number of PTYs${ColorReset}"
    printf "%b\n" "   ${ColorCyan}swapuse${ColorGray}: ${ColorGreen}swap usage, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nthr${ColorGray}: ${ColorGreen}number of threads${ColorReset}"
    printf "%b\n" "   ${ColorCyan}msgqqueued${ColorGray}: ${ColorGreen}number of queued SysV messages${ColorReset}"
    printf "%b\n" "   ${ColorCyan}msgqsize${ColorGray}: ${ColorGreen}SysV message queue size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nmsgq${ColorGray}: ${ColorGreen}number of SysV message queues${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nsem${ColorGray}: ${ColorGreen}number of SysV semaphores${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nsemop${ColorGray}: ${ColorGreen}number of SysV semaphores modified in a single semop(2) call${ColorReset}"
    printf "%b\n" "   ${ColorCyan}nshm${ColorGray}: ${ColorGreen}number of SysV shared memory segments${ColorReset}"
    printf "%b\n" "   ${ColorCyan}shmsize${ColorGray}: ${ColorGreen}SysV shared memory size, in bytes${ColorReset}"
    printf "%b\n" "   ${ColorCyan}wallclock${ColorGray}: ${ColorGreen}wallclock time, in seconds${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota${ColorGray}: ${ColorGreen}quota value for /Services, /User and /Software datasets (fmt: 1G 512M 128K). ${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota-services${ColorGray}: ${ColorGreen}quota value for /Services dataset only (fmt: 1G 512M 128K). ${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota-user${ColorGray}: ${ColorGreen}quota value for /User dataset only (fmt: 1G 512M 128K). ${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota-software${ColorGray}: ${ColorGreen}quota value for /Software dataset only (fmt: 1G 512M 128K). ${ColorReset}"
    printf "%b\n" "   ${ColorCyan}quota-root${ColorGray}: ${ColorGreen}quota value for cell base (/) system dataset only (fmt: 1G 512M 128K)${ColorReset}"
    printf "%b\n" "   ${ColorCyan}key${ColorGray}: ${ColorGreen}SSH public key (Skip public key header and comment parts) to be added to authorized keys of cell${ColorRes}\n"
    printf "%b\n" "   ${ColorCyan}ip${ColorGray}: ${ColorGreen}change cell IP addresses (comma separated) [requires cell restart]${ColorReset}"
    printf "%b\n" "   ${ColorCyan}+ip${ColorGray}: ${ColorGreen}adds specified (comma separated) IP addresses to cell [requires cell restart]${ColorReset}"
}


mark_running () {
    printf "%s\n" "$(${DATE_BIN} +%F-%H%M%S 2>/dev/null)" > "${SENTRY}/${JAIL_RUNNING_INDICATOR}"
}


cell_create () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} create myname${ColorReset}"
        note
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell name given"
    fi
    check_cell_name "${GIVEN_NAME}"

    _1st_ip="$(${FIND_BIN} "${SYSTEM_IPS_DIR}" -type f -maxdepth 1 -name 'ip-*' 2>/dev/null | ${HEAD_BIN} -n1 2>/dev/null)"
    _1st_ip_file="${_1st_ip##*/}" # basename()
    JAIL_ADDRESSES="${_1st_ip_file#ip-}" # cut out the "ip-" file prefix
    if [ -z "${JAIL_ADDRESSES}" ]; then
        error "No $(diste "IPv4: JAIL_ADDRESSES") assigned from: $(diste "${SYSTEM_IPS_DIR}/ip-*")!"
    fi
    try "${RM_BIN} -f \"${_1st_ip}\"" && \
        note "IPv4: $(distn "${JAIL_ADDRESSES}") is now assigned to cell: $(distn "${GIVEN_NAME}")."

    # else
    #     note "Validating given IPv4 address: $(distn "${JAIL_ADDRESSES}")"
    #     check_cell_address "${JAIL_ADDRESSES}"
    # fi
    # JAIL_VERSION="${3}"
    # if [ "${JAIL_VERSION}" = "" ]; then
    JAIL_VERSION="${DEFAULT_VERSION}"
    # fi

    _1st_id="$(${FIND_BIN} "${SYSTEM_NETIDS_DIR}" -type f -name 'id-*' -maxdepth 1 2>/dev/null | ${HEAD_BIN} -n1 2>/dev/null)"
    if [ -z "${_1st_id##*/}" ]; then
        error "No available $(diste "NetID") slots available under: $(diste "${SYSTEM_NETIDS_DIR}/id-*")!"
    fi
    _1st_id_file="${_1st_id##*/}" # basename()
    EPAIR_NUMBER="${_1st_id_file#id-}" # cut out the "id-" file prefix
    EPAIR="${EPAIR_DEVICE}${EPAIR_NUMBER}"

    set_values "${GIVEN_NAME}"

    run "${ZFS_BIN} create -o mountpoint=${SENTRY} ${DEFAULT_ZPOOL}${SENTRY}" && \
    run "${ZFS_BIN} set quota=${DEFAULT_SENTRY_LIMIT} ${DEFAULT_ZPOOL}${SENTRY}" && \
        debug "Mounted and set sentry"

    if [ -f "${JAIL_CONF_FILE}" ]; then
        warn "Cell already configured"
    else
        # ADDRESSES_LIST="$(echo "${JAIL_ADDRESSES}" | ${TR_BIN} ',' '\n' 2>/dev/null)"
        # if [ -z "${ADDRESSES_LIST}" ]; then
        #     error "Addresses list can't be empty!"
        # fi
        # printf "%b\n" "${ColorGreen}Configuring jail for addresses: ${ColorCyan}${JAIL_ADDRESSES}"
        # run "${IFCONFIG_BIN} ${EPAIR} create" && \
        # run "${IFCONFIG_BIN} ${EPAIR} ${EPAIR_DEVICE} ${EPAIR_NUMBER} vlandev ${DEFAULT_INTERFACE}" && \
        # if [ "${ip}" != "${ADDRESSES_LIST}" ]; then
        #     for ip in ${ADDRESSES_LIST}; do
        #         run "${IFCONFIG_BIN} ${EPAIR} ${ip} alias" || \
        #         warn "Failed to alias to IP: ${ip} on dev: ${EPAIR}"
        #     done
        # fi

        printf "
${JAIL_NAME} {
    # name = \"${JAIL_NAME}\";
    exec.fib = ${DEFAULT_JAILS_FIB};
    exec.prestart += \"${IFCONFIG_BIN} ${EPAIR} create up; ${IFCONFIG_BIN} ${EPAIR}a up; ${IFCONFIG_BIN} ${BRIDGE_DEVICE} addm ${EPAIR}a up;\";
    exec.start  = \"${IFCONFIG_BIN} lo0 127.0.0.1 up\";
    exec.start  += \"${IFCONFIG_BIN} ${EPAIR}b up\";
    exec.start  += \"${IFCONFIG_BIN} ${EPAIR}b inet ${JAIL_ADDRESSES} up\";
    exec.start  += \"${ROUTE_BIN} add default ${JAIL_ROUTER_ADDRESS}\";
    exec.start  += \"service sshd restart; service cron restart\";
    exec.start  += \"test -f /etc/rc.local && ${SH_BIN} /etc/rc.local\";
    # NOTE: not actually required if we don't want any additional subsystems: exec.start  += \"${SH_BIN} /etc/rc\";
    exec.stop = \"${SH_BIN} /etc/rc.shutdown\";
    exec.poststop  = \"${IFCONFIG_BIN} ${BRIDGE_DEVICE} deletem ${EPAIR}a\";
    exec.poststop  += \"${IFCONFIG_BIN} ${EPAIR}a destroy\";
    exec.clean;

    host.hostname = \"${JAIL_NAME}\";
    path = \"${CELL}\";

    enforce_statfs = 1;
    allow.mount = 1;
    allow.mount.zfs = 1;
    allow.mount.nullfs = 1;
    allow.mount.tmpfs = 1;
    allow.raw_sockets = 1;
    allow.sysvipc = 1;
    mount.devfs;

    persist;
    vnet;
    vnet.interface  = \"${EPAIR}b\";
}
" >> "${JAIL_CONF_FILE}"
    fi

    # debug "Looking for snapshots of: $(distd "${DEFAULT_JAILS_ROOT_DIR}")"
    # ${ZFS_BIN} list -t snap 2>/dev/null | ${EGREP_BIN} "${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}@[a-z0-9_-]" > /dev/null 2>&1
    # if [ "$?" = "0" ]; then
    #     LAST="$(${ZFS_BIN} list -H -S creation -t snap -o name 2>/dev/null | ${EGREP_BIN} "${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}@[a-z0-9_-]" 2>/dev/null | ${SED_BIN} 's/.*@//;s/ .*//' | ${HEAD_BIN} -n 1 2>/dev/null)"
    #     debug "Last snapshot of: $(distd "${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}") is: $(distd "${LAST}")"
    # fi
    DEFAULT_JAILS_ROOT_DIR="${SHARED_DIR}/${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}"

    run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}@${ORIGIN} ${DEFAULT_ZPOOL}${CELL}" && \
        debug "Cloned base system dataset: $(distd "${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}@${ORIGIN}") to: $(distd "${CELL}")"

    # NOTE: this thing's getting really heavy when a lot of filesystems is mounted:
    # $(${ZFS_BIN} list -H -S creation -t snapshot -o name 2>/dev/null | ${EGREP_BIN} "${DEFAULT_ZPOOL}/Software/root@[Pa-z0-9_-]" 2>/dev/null | ${SED_BIN} 's/.*@//;s/ .*//' | ${HEAD_BIN} -n 1 2>/dev/null)
    ${ZFS_BIN} list -H -r -t snapshot -o name "${DEFAULT_ZPOOL}/Software/root@${ORIGIN}" > /dev/null 2>&1
    if [ "${?}" != "0" ]; then
        error "Something went wrong. Missing ${ORIGIN} snapshot: '$(diste "${DEFAULT_ZPOOL}/Software/root@${ORIGIN}")'. Aborted!"
    else
        debug "Found an software root ${ORIGIN} of snapshot: $(distd "${DEFAULT_ZPOOL}/Software/root@${ORIGIN}")"
    fi
    {
        debug "Cloning: ${DEFAULT_ZPOOL}/Software/${JAIL_NAME} from most recent snapshot: ${DEFAULT_ZPOOL}/Software/root@${ORIGIN}";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root/Sofin@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}/Sofin";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root/Git@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}/Git";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root/Zsh@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}/Zsh";
    }

    for dset in Software Services User Shared; do
        ${ZFS_BIN} list "${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" >/dev/null 2>&1 || \
            run "${ZFS_BIN} create -p ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"

        try "${ZFS_BIN} set mountpoint=none ${DEFAULT_ZPOOL}/${dset}"
        run "${ZFS_BIN} set dedup=off ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        run "${ZFS_BIN} set checksum=fletcher4 ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        run "${ZFS_BIN} set aclinherit=passthrough ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        run "${ZFS_BIN} set aclmode=passthrough ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        run "${ZFS_BIN} set canmount=off ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        run "${ZFS_BIN} set mountpoint=/${dset} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        run "${ZFS_BIN} set quota=${DEFAULT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}"
        debug "Dataset configured: $(distd "${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}")"
    done

    run "${ZFS_BIN} set quota=${DEFAULT_ROOT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}${CELL}"
    run "${ZFS_BIN} set mountpoint=${CELL} ${DEFAULT_ZPOOL}${CELL}"
    {
        debug "Installing software services data"
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Services/root/Git@${ORIGIN} ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}/Git";
        run "${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Services/root/Zsh@${ORIGIN} ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}/Zsh";
    }

    ${MKDIR_BIN} -p "${JAIL_WEBSERVER_CONF_DIR}" \
                    "${JAIL_ATTRIBUTES_DIR}" \
                    "${JAIL_DOMAINS_DIR}" \
                    "${JAIL_LOGS_CONF_DIR}" \
                    "${CELL}/tmp" \
                    "${CELL}/dev" \
                    "${CELL}/var/log" \
                    "${CELL}/var/www" \
                    "${CELL}/var/tmp" \
                    "${CELL}/SystemUsers" \
                    "${CELL}/Software" \
                    "${CELL}/Services" \
                    "${CELL}/Shared" \
                    "${CELL}/User"

    if [ ! -f "${JAIL_EPAIR_NUMBER_FILE}" ]; then
        printf "%s\n" "${EPAIR_NUMBER}" > "${JAIL_EPAIR_NUMBER_FILE}"
    fi
    if [ ! -f "${JAIL_VERSION_FILE}" ]; then
        printf "%s\n" "${JAIL_VERSION}" > "${JAIL_VERSION_FILE}"
    fi
    printf "%s\n" "${JAIL_ADDRESSES}" >> "${JAIL_ADDRESSES_FILE}"

    run "${CP_BIN} -R ${DEFAULT_JAIL_ETC_SOURCE} ${CELL}/etc" && \
    run "${SED_BIN} -i '' -e \"s:__JAIL_NAME:${JAIL_NAME}.${SHARED_DOMAIN_NAME}:\" ${CELL}/etc/rc.conf" && \
    run "${RM_BIN} -f ${CELL}/etc/rc.conf.local" && \
    run "${SED_BIN} -i '' -e \"s:__HOST_IP:${JAIL_ROUTER_ADDRESS}:\" ${CELL}/etc/resolv.conf" && \
        run "${CHMOD_BIN} g+w ${CELL}/etc/resolv.conf ${CELL}/etc/rc.local ${CELL}/etc/rc.shutdown ${CELL}/etc/cron.d ${CELL}/etc/hosts" && \
        debug "Built initial cell environment"

    if [ ! -f "${CELL}/etc/sysctl.conf" ]; then
        run "${CP_BIN} -v ${SERVED_REPO}/etc-jail/sysctl.conf ${CELL}/etc/sysctl.conf" && \
        debug "Created sysctl.conf from svdOS repository"
    fi

    run "${CP_BIN} -f /usr/bin/igni ${CELL}/usr/bin/igni" && \
    run "${CP_BIN} -f /usr/bin/rsync ${CELL}/usr/bin/rsync" && \
    run "${RM_BIN} -f ${CELL}/etc/zshenv ${CELL}/etc/zshrc" && \
    run "${MKDIR_BIN} -p ${CELL}/etc/zsh" && \
    run "${CP_BIN} -R ${SERVED_REPO}/shell/ ${CELL}/etc/zsh" && \
    run "${MV_BIN} -v ${CELL}/etc/zsh/zshrc ${CELL}/etc/zshrc" && \
    run "${MV_BIN} -v ${CELL}/etc/zsh/zshenv ${CELL}/etc/zshenv" && \
        debug "Cell system shell configured"

    # XXX: TODO: complete versionning (consider if necessary)
    # svd_version="$(${ZFS_BIN} get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT 2>/dev/null)"
    # run "${ZFS_BIN} set com.svd:version=${svd_version} ${DEFAULT_ZPOOL}${CELL}" && \
    #     debug "Updated client ServeD version property from base system"

#     for logger in messages production staging development; do
#         run "${MKFIFO_BIN} -m \"a=-rwx,u=rw\" \"${CELL}/var/log/${logger}\"" && \
#         ${CHOWN_BIN} "${EPAIR_NUMBER}" "${CELL}/var/log/${logger}" && \
#         printf "
# source s_${JAIL_NAME}_${logger} {
#     pipe(\"${CELL}/var/log/${logger}\");
# };
# destination d_${JAIL_NAME}_${logger}_file {
#     file(\"/var/log/${JAIL_NAME}-${logger}.log\" template(t_default_format));
# };
# log {
#     source(s_${JAIL_NAME}_${logger});
#     destination(d_${JAIL_NAME}_${logger}_file);
# };
# " > "${JAIL_LOGS_CONF_DIR}/${logger}.conf" && \
#         debug "Created logger: $(distd "${logger}")"
#     done

    # debug "Reloading syslog"
    # service syslog-ng reload >/dev/null || service syslog-ng restart >/dev/null

    note "Setting up local domains for IPv4: $(distd "${JAIL_ADDRESSES}")"
    MAIN_JAIL_ADDRESS="$(echo "${JAIL_ADDRESSES}" | ${SED_BIN} -e 's#/.*# #g' 2>/dev/null)"

    printf "\n%b\n\n%b\n%b\n%b\n\n" \
        "# DNS record template" \
        "local-zone: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}.\" redirect" \
        "local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 360 IN A ${MAIN_JAIL_ADDRESS}\"" \
        "local-data: \"pma-${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 360 IN A ${MAIN_JAIL_ADDRESS}\"" \
        "local-data-ptr: \"${MAIN_JAIL_ADDRESS} ${JAIL_NAME}.${SHARED_DOMAIN_NAME}\"" >> "${JAIL_LOCAL_DOMAIN_CONF}"

    # NOTE: old template, just in case:
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 10800 IN NS ns1.${SHARED_DOMAIN_NAME}.\"
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 10800 IN NS ns2.${SHARED_DOMAIN_NAME}.\"
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 1800  IN SRV 10 10 22 ${JAIL_NAME}.${SHARED_DOMAIN_NAME}.\"
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 10800 IN SOA ns1.${SHARED_DOMAIN_NAME}. ns2.${SHARED_DOMAIN_NAME}. $(${DATE_BIN} +%s 2>/dev/null) 3600 600 86400 3600\"
    # local-data: \"${JAIL_NAME}.${SHARED_DOMAIN_NAME}. 10800 IN A ${MAIN_JAIL_ADDRESS}\"

    _used_id_file="${SYSTEM_NETIDS_DIR}/id-${EPAIR_NUMBER}"
    try "${RM_BIN} -f \"${_used_id_file}\"" && \
        note "NetID: $(distn "${EPAIR_NUMBER}") ($(distn "${_used_id_file}")) is now marked as used by cell: $(distn "${JAIL_NAME}")."

    note "Starting cell: $(distd "${JAIL_NAME}")"
    cell_start "${JAIL_NAME}" && \
        note "Cell: $(distn "${JAIL_NAME}") bound to domain: $(distn "${JAIL_NAME}.${SHARED_DOMAIN_NAME}"), with local address: $(distn "${MAIN_JAIL_ADDRESS}")." && \
        return 0

    error "Failed to start cell with zone: $(diste "${JAIL_NAME}.${SHARED_DOMAIN_NAME}")"
}


cell_status () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} status cell-name${ColorReset}"
    }
    GIVEN_NAME="${1}"
    VERBOSE="${2}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell name given"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"

    printf "%b\n" "${ColorGreen}Status: ${JAIL_STATUS}${ColorReset}"
    printf "%b\n" "${ColorGreen}Name: ${ColorCyan}${JAIL_NAME}${ColorReset}"
    echo "${JAIL_STATUS}" | ${GREP_BIN} '\*on\*' > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        JAIL_NUM_ID="$(${JLS_BIN} 2>/dev/null | ${EGREP_BIN} " ${JAIL_NAME}[\.\ ]" 2>/dev/null | ${AWK_BIN} '{print $1;}' 2>/dev/null)"
        printf "%b\n" "${ColorGreen}JID: ${ColorCyan}${JAIL_NUM_ID}${ColorReset}"
    fi
    EPAIR="${EPAIR_DEVICE}$(${CAT_BIN} "${SENTRY}/${CELL_EPAIR_NUMBER_ATTRIBUTE}" 2>/dev/null)"
    printf "%b\n" "${ColorGreen}JUID: $(distn "${EPAIR_NUMBER}")${ColorReset}"
    printf "%b\n" "${ColorGreen}IPv4s: ${ColorCyan}${JAIL_IPS}${ColorReset}"
    printf "%b\n" "${ColorGreen}Interface: ${ColorCyan}${EPAIR}${ColorReset}"
    printf "%b\n" "${ColorGreen}Hostnames: ${ColorCyan}${HOSTNAMES}${ColorReset}"
    printf "%b\n\n" "${ColorGreen}OS version: ${ColorCyan}${JAIL_VERSION}${ColorReset}"
    if [ -d "${JAIL_ATTRIBUTES_DIR}" ]; then
        printf "%b\n" "${ColorGreen}Overriden attributes:${ColorReset}"
        for attr in $(${FIND_BIN} "${JAIL_ATTRIBUTES_DIR}" -type f 2>/dev/null); do
            printf "%b\n" "${ColorCyan}${attr##*/}: $(${CAT_BIN} "${attr}" 2>/dev/null)"
        done
        printf "\n"
    fi
    printf "%b\n" "${ColorGreen}Live attributes:\n${ColorCyan}$(${RCTL_BIN} -h "jail:${JAIL_NAME}" 2>/dev/null | ${SED_BIN} 's/jail:n1://g' 2>/dev/null | ${SED_BIN} 's/:deny=/: /g' 2>/dev/null)${ColorReset}"
    case ${VERBOSE} in
        v|-v|-verbose|verbose|more)
            printf "\nFull configuration:\n%b\n" "${ColorCyan}$(${CAT_BIN} "${JAIL_CONF_FILE}" 2>/dev/null)${ColorReset}"
            ;;
    esac
}


cell_list () {
    mkdir -p "${CELLS_DIR}"
    cd "${CELLS_DIR}"
    _out="$(${JLS_BIN} -v 2>/dev/null)"
    for _cell in $(${LS_BIN} 2>/dev/null); do
        _cellname="$(printf "%s" "${_cell}" | ${AWK_BIN} '{print substr($1,0,29);}' 2>/dev/null)" # first 29 chars visible in jls output
        printf "%s" "${_cell}"
        if [ -f "${SENTRY_DIR}/${_cellname}/${CELL_IP_ADDRESSES_ATTRIBUTE}" ]; then
            JAIL_IPS="$(${CAT_BIN} "${SENTRY_DIR}/${_cellname}/${CELL_IP_ADDRESSES_ATTRIBUTE}" 2>/dev/null)"
        fi
        echo "${_out}" | ${EGREP_BIN} " ${_cellname} .*ACTIVE" >> "${GVR_LOG}" 2>&1
        if [ "$?" = "0" ]; then
            printf "%b" " ${ColorCyan}${JAIL_IPS}${ColorReset} ${ColorGreen}*on*${ColorReset}"
        else
            printf "%b" " ${ColorCyan}${JAIL_IPS}${ColorReset} ${ColorRed}*off*${ColorReset}"
        fi
        printf "\n"
    done
}


# Apply settings and start jail
cell_start () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} start cell-name${ColorReset}"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell to start"
    fi
    set_values "${GIVEN_NAME}"

    ${JLS_BIN} 2>/dev/null | ${EGREP_BIN} " ${GIVEN_NAME}[\.\ ]" > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        printf "%b\n" "${ColorGreen}Cell with name: ${ColorCyan}${GIVEN_NAME}${ColorGreen} is already running${ColorReset}"
        exit 0
    fi

    check_cell_name "${CELL}"
    if [ -f "${JAIL_ADDRESSES_FILE}" ]; then
        JAIL_IPS="$(${CAT_BIN} "${JAIL_ADDRESSES_FILE}" 2>/dev/null)"
    fi

    echo "Cell start command: ${DEBUG_COMMAND} \"${JAIL_BIN}\" -c -J \"${JAIL_ID_FILE}\" -f \"${JAIL_CONF_FILE}\"" >> "${GVR_LOG}"
    ${DEBUG_COMMAND} "${JAIL_BIN}" -c -J "${JAIL_ID_FILE}" -f "${JAIL_CONF_FILE}" >> "${GVR_LOG}" 2>> "${GVR_LOG}"
    if [ "$?" = "0" ]; then
        JAIL_NUM_ID="$(${JLS_BIN} 2>/dev/null | ${EGREP_BIN} " ${JAIL_NAME}[\.\ ]" 2>/dev/null | ${AWK_BIN} '{print $1;}' 2>/dev/null)"

        GVR_AFTER_START_TIMESTAMP_S="$(${DATE_BIN} +%s 2>/dev/null)"
        GVR_ELAPSED_S="$(( ${GVR_AFTER_START_TIMESTAMP_S} - ${GVR_START_TIMESTAMP_S} ))"

        printf "%s\n" "[launched by ${USER} on $(${DATE_BIN} +%F-%H%M%S 2>/dev/null)]" > "${JAIL_STATUS_FILE}"
        ${JEXEC_BIN} "${JAIL_NAME}" "${PW_BIN}" usermod "${DEFAULT_JAIL_USER}" -u "${EPAIR_NUMBER}" && \
            note "Took: $(distn "${GVR_ELAPSED_S}s") to deploy cell: $(distn "${JAIL_NAME}") (JID: $(distn "${JAIL_NUM_ID}"); UID: $(distn "${EPAIR_NUMBER}"), Zone: $(distn "${JAIL_NAME}.${SHARED_DOMAIN_NAME}"))"

        apply_attributes

        # if [ -z "${JAIL_NUM_ID}" ]; then
        #     error "Cell ID is empty!"
        # fi
        for dset in Services Software Shared User; do
            run "${ZFS_BIN} jail ${JAIL_NAME} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
            run "${ZFS_BIN} set canmount=on ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
            run "${ZFS_BIN} set jailed=on ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
                debug "Celled dataset: $(distd "${dset}")"
            run "${JEXEC_BIN} ${JAIL_NAME} ${ZFS_BIN} allow -u ${DEFAULT_JAIL_USER} xattr,atime,casesensitivity,checksum,copies,logbias,primarycache,secondarycache,snapdir,userused,dedup,mountpoint,canmount,userprop,create,destroy,snapshot,rollback,clone,promote,rename,mount,send,receive,reservation,readonly ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}" && \
                debug "Allowed user: $(distd "${DEFAULT_JAIL_USER}") full control over ZFS datasets of cell: $(distd "${JAIL_NAME}")."
        done

        # TODO: XXX: this feels like a hack to set any SUID bits:
        run "${JEXEC_BIN} ${JAIL_NAME} ${CHMOD_BIN} +s ${SYSCTL_BIN} ${CHOWN_BIN} ${ZFS_BIN}" && \
            debug "NOTE: By default, SETUID bit is set only for a few system utilities: $(distd "chown, sysctl, zfs, crontab")."

        run "${JEXEC_BIN} ${JAIL_NAME} ${SYSCTL_BIN} -f /etc/sysctl.conf || :" && debug "Cell sysctl.conf loaded"
        run "${JEXEC_BIN} ${JAIL_NAME} ${MOUNT_BIN} -a" && debug "All filesystems mounted"
        run "${JEXEC_BIN} ${JAIL_NAME} ${ZFS_BIN} mount -a" && debug "All datasets mounted"
        run "${JEXEC_BIN} ${JAIL_NAME} ${SYSCTL_BIN} kern.securelevel=${KERN_SECURELEVEL}" && debug "Securelevel: ${KERN_SECURELEVEL}"
        run "${JEXEC_BIN} ${JAIL_NAME} ${TOUCH_BIN} /User/.zshrc" # Avoid Zsh welcome bullshit
        run "${JEXEC_BIN} ${JAIL_NAME} ${CHOWN_BIN} ${DEFAULT_JAIL_USER} /User/.zshrc /Services /User /Software /Software/Git /Software/Zsh /Software/Sofin /Shared /var/log /var/www"

        note "Reloading $(distn "DNS") and $(distn "Web-proxy") configuration."
        try "igni dns reload; igni proxy reload"

        mark_running
    else
        try "${IFCONFIG_BIN} ${EPAIR}b destroy 2>/dev/null"
        error "Cell launch failed. Look into log file: ${ColorCyan}${GVR_LOG}"
    fi
}


cell_stop () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} stop cell-name${ColorReset}"
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell to stop"
    fi
    SENTRY="${SENTRY_DIR}/${GIVEN_NAME}"
    EPAIR="${EPAIR_DEVICE}$(${CAT_BIN} "${SENTRY}/${CELL_EPAIR_NUMBER_ATTRIBUTE}" 2>/dev/null)"
    try "${IFCONFIG_BIN} ${EPAIR}a down; ${IFCONFIG_BIN} ${EPAIR}a destroy"

    set_values "${GIVEN_NAME}"
    #
    # check_cell_name "${CELL}"
    # JAIL_NUM_ID="$(${JLS_BIN} 2>/dev/null | ${EGREP_BIN} -F "${JAIL_NAME}[\.\ ]" 2>/dev/null | ${AWK_BIN} '{print $1;}' 2>/dev/null)"
    # if [ -z "${JAIL_NUM_ID}" ]; then
    #     error "NO cell ID?!"
    # fi
    for _dir in /dev /tmp; do
        try "${UMOUNT_BIN} -f ${CELL}${_dir}" && \
            debug "Unmounted: $(distd "${CELL}${_dir}")"
    done
    # NOTE: make sure that /Software/Zsh and /Software/Git are not mountable (main system override possibility)
    for _dset in Services Software; do
        try "${ZFS_BIN} unjail ${GIVEN_NAME} ${DEFAULT_ZPOOL}/${_dset}/${JAIL_NAME}" && \
        run "${ZFS_BIN} set canmount=off ${DEFAULT_ZPOOL}/${_dset}/${JAIL_NAME}" && \
            debug "Unjailed and unmounted dataset: $(distd "${_dset}")"
    done
    try "${UMOUNT_BIN} -f ${CELL}/Software" && debug "Unmounted ${CELL}/Software"
    try "${UMOUNT_BIN} -f ${CELL}/Software/Zsh" && debug "Unmounted ${CELL}/Software/Zsh"

    run "${DEBUG_EXEC_COMMAND} ${JAIL_BIN} -r ${JAIL_NAME}" && \
        printf "%b\n" "${ColorGreen}Terminated cell: ${ColorCyan}${JAIL_NAME}${ColorReset}"

    printf "%s\n" "[terminated by ${USER} on $(${DATE_BIN} +%F-%H-%M-%S)]" > "${JAIL_STATUS_FILE}"

    run "${RM_BIN} -f ${SENTRY}/${JAIL_RUNNING_INDICATOR}" && \
        debug "Removed cell running indicator: $(distd "${SENTRY}/${JAIL_RUNNING_INDICATOR}")"
}


cell_set () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} set cell-name attribute=value attr2=val2 (...)${ColorReset}"
    }
    GIVEN_NAME="${1}"
    shift
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell name given"
    fi

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    for argument_pair in ${*}; do
        ATTRIBUTE="$(printf "%s\n" "${argument_pair}" | ${AWK_BIN} '{split($0, a, "="); print a[1];}' 2>/dev/null)"
        JAIL_VALUE="$(printf "%s\n" "${argument_pair}" | ${AWK_BIN} '{split($0, a, "="); print a[2];}' 2>/dev/null)"
        debug "arg: ${ATTRIBUTE}, val: ${JAIL_VALUE} "
        printf "%b\n" "${ColorGreen}Setting attribute: ${ColorCyan}${ATTRIBUTE}${ColorGreen}, value: ${ColorCyan}${JAIL_VALUE}${ColorGreen} for cell: ${ColorCyan}${JAIL_NAME}${ColorReset}"
        printf "%s\n" "${JAIL_VALUE}" > "${JAIL_ATTRIBUTES_DIR}/${ATTRIBUTE}"
    done
    apply_attributes
}


cell_unset () {
    usage () {
        printf "%b\n" "Usage: ${ColorCyan}${GVR_SCRIPT_NAME} unset cell-name attribute value${ColorReset}"
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell name given"
    fi
    shift

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    for cell_attribute in ${*}; do
        run "${RM_BIN} -f ${JAIL_ATTRIBUTES_DIR}/${cell_attribute}" && \
        try "${RCTL_BIN} -r jail:${JAIL_NAME}:${cell_attribute}" && \
            printf "%b\n" "${ColorGreen}Unset attribute: ${ColorCyan}${cell_attribute}${ColorGreen} for cell: ${ColorCyan}${JAIL_NAME}${ColorReset}"
    done
    apply_attributes
}


cell_login () {
    usage () {
        printf "%b\n" "Usage: ${ColorCyan}${GVR_SCRIPT_NAME} login cell-name${ColorReset}"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell to enter"
    fi
    JAIL_LOGIN="${DEFAULT_JAIL_USER}"
    GIVEN_USER="${2}"
    if [ "${GIVEN_USER}" != "" ]; then
        JAIL_LOGIN="${GIVEN_USER}"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    ${JLS_BIN} -v 2>/dev/null | ${EGREP_BIN} " ${JAIL_NAME} .*ACTIVE" >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        debug "Logging in as: ${JAIL_LOGIN} to cell: ${JAIL_NAME}" && \
        ${DEBUG_EXEC_COMMAND} "${JEXEC_BIN}" "${JAIL_NAME}" "su" "${DEFAULT_JAIL_USER}" && \
            printf "%b\n" "${ColorGreen}Logged out from cell: ${ColorCyan}${JAIL_NAME}${ColorReset}"
    else
        error "Start the cell first!"
    fi
}


cell_restart () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} restart cell-name${ColorReset}"
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell to restart"
    fi
    cell_stop ${*}
    cell_start ${*}
}


cell_destroy () {
    usage () {
        printf "%b\n" "${ColorGreen}Usage: ${ColorCyan}${GVR_SCRIPT_NAME} destroy cell-name${ColorReset}"
    }
    GIVEN_NAME="${1}"
    if [ -z "${GIVEN_NAME}" ]; then
        usage
        error "No cell to destroy"
    fi
    ASK_CONFIRM="${2}"
    if [ "I_KNOW_EXACTLY_WHAT_I_AM_DOING" = "${ASK_CONFIRM}" ]; then
        _ans="YES"
    else
        printf "%b\n" "${ColorYellow}Are you sure you want to destroy cell: ${ColorCyan}${GIVEN_NAME##*/}${ColorYellow} with ${ColorRed}ALL DATA?${ColorReset}"
        printf "%b\n" "${ColorYellow}Type ${ColorCyan}YES${ColorYellow} followed by [${ColorCyan}Enter${ColorYellow}], to confirm.${ColorReset}"
        read -r _ans
    fi
    set_values "${GIVEN_NAME}"

    # check_cell_name "${CELL}"
    if [ "${_ans}" = "YES" ]; then
        if [ -f "${SENTRY}/${JAIL_RUNNING_INDICATOR}" ]; then
            cell_stop ${*}
        fi
        try "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}" && note "Destroyed dataset: $(distn "${DEFAULT_ZPOOL}/Software/${JAIL_NAME}")!"
        try "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}" && note "Destroyed dataset: $(distn "${DEFAULT_ZPOOL}/Services/${JAIL_NAME}")!"
        try "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}/Shared/${JAIL_NAME}" && note "Destroyed dataset: $(distn "${DEFAULT_ZPOOL}/Shared/${JAIL_NAME}")!"
        try "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}/User/${JAIL_NAME}" && note "Destroyed dataset: $(distn "${DEFAULT_ZPOOL}/User/${JAIL_NAME}")!"
        try "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}${SENTRY}" && note "Destroyed dataset: $(distn "${DEFAULT_ZPOOL}${SENTRY}")!"
        try "${ZFS_BIN} destroy -rf ${DEFAULT_ZPOOL}${CELL}" && note "Destroyed dataset: $(distn "${DEFAULT_ZPOOL}${CELL}")!"
        if [ -n "${CELL}" ] && \
           [ -n "${SENTRY}" ] && \
           [ "/" != "${CELL}" ] && \
           [ "/" != "${SENTRY}" ]; then
            try "${RM_BIN} -rf ${CELL} ${SENTRY}"
        fi

        if [ -n "${JAIL_IPS}" ]; then
            _used_ip_file="${SYSTEM_IPS_DIR}/ip-${JAIL_IPS}"
            debug "Used IPv4 address: $(distd "${JAIL_IPS}"). IPs dir: $(distn "${SYSTEM_IPS_DIR}")"
            run "${TOUCH_BIN} ${_used_ip_file}" && \
                note "IPv4: $(distn "${JAIL_IPS}") ($(distn "${_used_ip_file}")) is no longer assigned to cell: $(distn "${JAIL_NAME}")"
        fi

        if [ -n "${EPAIR_NUMBER}" ]; then
            _used_id_file="${SYSTEM_NETIDS_DIR}/id-${EPAIR_NUMBER}"
            debug "Used NetID: $(distd "${EPAIR_NUMBER}"). NetIDs dir: $(distn "${SYSTEM_NETIDS_DIR}")"
            run "${TOUCH_BIN} ${_used_id_file}" && \
                note "NetID: $(distn "${EPAIR_NUMBER}") ($(distn "${_used_id_file}")) is no longer assigned to cell: $(distn "${JAIL_NAME}")"
        fi

        warn "Cell destroyed: $(distw "${JAIL_NAME}")" && \
            try "igni dns reload; igni proxy reload"
    else
        warn "Cell: $(distw "${GIVEN_NAME##*/}") is intact."
    fi
}


case $1 in
    ver|v|version)
        shift
        show_version
        ;;

    create|c)
        shift
        echo
        cell_create ${*}
        ;;

    destroy)
        shift
        cell_destroy ${*}
        ;;

    status|s|stat)
        shift
        cell_status ${*}
        ;;

    start)
        shift
        echo
        cell_start ${*}
        ;;

    stop)
        shift
        cell_stop ${*}
        ;;

    restart)
        shift
        cell_restart ${*}
        ;;

    list|l|lst)
        shift
        cell_list ${*}
        ;;

    set)
        shift
        echo
        cell_set ${*}
        ;;

    unset)
        shift
        echo
        cell_unset ${*}
        ;;

    login)
        shift
        cell_login ${*}
        ;;

    attributes|attrs)
        attributes_show
        ;;

    boot)
        cd "${SENTRY_DIR}"
        for _cell in *; do
            if [ -f "${SENTRY_DIR}/${_cell}/${JAIL_RUNNING_INDICATOR}" ]; then
                printf "%b\n" "${ColorGreen}Initializing boot of _cell: ${ColorCyan}${_cell}${ColorReset}"
                nohup "${0}" start "${_cell}" > /dev/null 2>&1 &
            else
                warn "Boot skipped for: $(distw "${_cell}")"
            fi
        done
        ;;

    *)
        CMD="${GVR_SCRIPT_NAME}"
        note "Usage:"
        printf "%b\n" "  ${ColorCyan}${CMD} command arg1 arg2 [...]${ColorReset}"

        note "List of commands:"
        printf "%b\n" "  ${ColorCyan}ver${ColorReset}: ${ColorGreen}prints Governor and svdOS versions${ColorReset}"
        printf "%b\n" "  ${ColorCyan}boot${ColorReset}: ${ColorGreen}launches all previously running cells${ColorReset}"
        printf "%b\n" "  ${ColorCyan}create${ColorReset}: ${ColorGreen}creates new cell${ColorReset}"
        printf "%b\n" "  ${ColorCyan}list${ColorReset} | ${ColorCyan}lst${ColorReset} | ${ColorCyan}l${ColorReset}: ${ColorGreen}lists created cells${ColorReset}"
        printf "%b\n" "  ${ColorCyan}set${ColorReset}: ${ColorGreen}set attributes for cells${ColorReset}"
        printf "%b\n" "  ${ColorCyan}attributes${ColorReset} | ${ColorCyan}attrs${ColorReset}: ${ColorGreen}shows attributes list modifiable by '${CMD} set …' ${ColorReset}"
        printf "%b\n" "  ${ColorCyan}login${ColorReset}: ${ColorGreen}logins to cell${ColorReset}"
        printf "%b\n" "  ${ColorCyan}start${ColorReset}: ${ColorGreen}starts created, non running cell${ColorReset}"
        printf "%b\n" "  ${ColorCyan}stop${ColorReset}: ${ColorGreen}stops running cell${ColorReset}"
        printf "%b\n" "  ${ColorCyan}restart${ColorReset}: ${ColorGreen}restarts a cell${ColorReset}"
        printf "%b\n" "  ${ColorCyan}status${ColorReset}: ${ColorGreen}shows detailed configuration of a cell${ColorReset}"
        printf "%b\n" "  ${ColorCyan}destroy${ColorReset}: ${ColorGreen}destroys a cell${ColorReset}"

        printf "\n%b\n" "${ColorGreen}Run '${ColorCyan}${CMD} [command]${ColorReset}${ColorGreen}' without arguments to see detailed help about command params.${ColorReset}"
        ;;
esac


exit 0

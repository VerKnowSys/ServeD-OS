#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#
# TODO: gvr copy-attrs sourcejailname destjailname

# load configuration from sofin.conf
readonly CONF_NAME="sofin.conf.sh"
readonly CONF_FILE="/etc/${CONF_NAME}"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
else
    echo "FATAL: No configuration file found: ${CONF_FILE}. Maybe Sofin isn't installed?"
    exit 1
fi


VERSION="0.8.0"
LOG_FILE="/var/log/governor.log"
SERVED_REPO="/var/ServeD-OS"
SOFIN_REPO="/var/sofin"
DEFAULT_SOFIN_REPO="https://verknowsys@bitbucket.org/verknowsys/sofin.git"
SERVICE_SPAWNER_BIN="/Software/Thess/exports/svdss"
IGNITER_INSTALL_BIN="/Software/Thess/exports/ignitersinstall"
DEFAULT_ZPOOL="zroot"
DEFAULT_VERSION="10.2"
DEFAULT_JAIL_USER="worker"
DEFAULT_WORKER_UID="501"
DEFAULT_QUOTA_LIMIT="5G"
DEFAULT_SENTRY_LIMIT="128M"
DEFAULT_LIMIT_MAX_MEMORY="512M"
DEFAULT_LIMIT_MAX_VMEMORY="1024M"
DEFAULT_LIMIT_MAXPROC="64"
DEFAULT_LIMIT_OPENFILES="16384" # this is required f.e. for Postgresql to work properly
DEFAULT_LIMIT_MAXPTS="16"
DEFAULT_NETMASK="/27" # 255.255.255.224
DEFAULT_NETMASK_INTERNAL="255.255.255.224" # /27
DEFAULT_NETMASK_EXTERNAL="255.255.255.0" # /24
DEFAULT_CELLS_LOCATION="/Jails/Prison/Cells"
DEFAULT_SENTRY_LOCATION="/Jails/Prison/Sentry"
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
CELL_IP_ADDRESS_ATTRIBUTE="jail.ip.address"
CELL_OS_VERSION_ATTRIBUTE="jail.os.version"
CELL_ATTRIBUTES_DIR="jail-attributes"
CELL_DOMAINS_DIR="jail-domains"
CELL_WEBCONF_DIR="jail-webconfs"
CELL_LOGS_DIR="jail-loggers"
JAIL_CONF_NAME="jail.conf"
JAIL_TRUSS_NAME="jail.truss.log"
JAIL_TRUSS_EXEC_NAME="jail.truss.exec.log"
JAIL_ID_NAME="jail.id"
JAIL_STATUS_NAME="jail.status"
JAIL_RUNNING_INDICATOR="jail.running"
DEFAULT_HOST_ADDRESS="/etc/host.default"
GVR_SCRIPT_NAME="$(${BASENAME_BIN} $0)"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 | ${TAIL_BIN} -n 4 | ${HEAD_BIN} -n 1 | ${AWK_BIN} '{print $2;}')"
if [ "${DEFAULT_INTERFACE}" = "" ]; then
    error "Something is wrong with network routing. Governor can't continue"
fi
DEFAULT_JAIL_ETC_SOURCE="${SERVED_REPO}/etc-jail/"
if [ ! -d "${DEFAULT_JAIL_ETC_SOURCE}" ]; then
    error "Sanity check failed: Could not found etc source location: ${DEFAULT_JAIL_ETC_SOURCE}. Governor can't continue"
fi


# This is where all jail settings are put into global scope of script:
set_values () {
    ENTERED_NAME="${1}"
    CELL="${DEFAULT_CELLS_LOCATION}/${ENTERED_NAME}"
    SENTRY="${DEFAULT_SENTRY_LOCATION}/${ENTERED_NAME}"
    debug "Processing CELL: ${CELL}, Sentry: ${SENTRY}"
    JAIL_DOMAINS_DIR="${SENTRY}/${CELL_DOMAINS_DIR}"
    JAIL_CONF_FILE="${SENTRY}/${JAIL_CONF_NAME}"
    JAIL_ATTRIBUTES_DIR="${SENTRY}/${CELL_ATTRIBUTES_DIR}"
    JAIL_NAME="$(${PRINTF_BIN} "${ENTERED_NAME}\n" | ${SED_BIN} 's/\./-/g')"
    JAIL_ID_FILE="${SENTRY}/${JAIL_ID_NAME}"
    JAIL_TRACE_LOG="${SENTRY}/${JAIL_TRUSS_NAME}"
    JAIL_EXEC_LOG="${SENTRY}/${JAIL_TRUSS_EXEC_NAME}"
    DEBUG_COMMAND=""
    DEBUG_EXEC_COMMAND=""
    if [ "${DEBUG}" = "true" ]; then
        DEBUG_COMMAND="${TRUSS_BIN} -o ${JAIL_TRACE_LOG}"
        DEBUG_EXEC_COMMAND="${TRUSS_BIN} -o ${JAIL_EXEC_LOG}"
    fi
    JAIL_VERSION_FILE="${SENTRY}/${CELL_OS_VERSION_ATTRIBUTE}"
    JAIL_ADDRESS_FILE="${SENTRY}/${CELL_IP_ADDRESS_ATTRIBUTE}"
    JAIL_WEBSERVER_CONF_DIR="${SENTRY}/${CELL_WEBCONF_DIR}"
    JAIL_LOGS_CONF_DIR="${SENTRY}/${CELL_LOGS_DIR}"
    JAIL_STATUS_FILE="${SENTRY}/${JAIL_STATUS_NAME}"
    JAIL_STATUS_DETAIL=""
    if [ -f "${JAIL_STATUS_FILE}" ]; then
        JAIL_STATUS_DETAIL="$(${CAT_BIN} ${JAIL_STATUS_FILE})"
    fi
    JAIL_STATUS="${red}*off*${gray} ${JAIL_STATUS_DETAIL}${reset} -JAILNAME: ${JAIL_NAME}"
    ${JLS_BIN} -v | ${GREP_BIN} "${JAIL_NAME}.*ACTIVE" >> ${LOG_FILE} 2>&1
    if [ "$?" = "0" ]; then
        JAIL_STATUS="${green}*on*${gray} ${JAIL_STATUS_DETAIL}${reset}"
    fi
    debug "Got jail status: ${JAIL_SOURCE}"
    JAIL_VERSION="${DEFAULT_VERSION}"
    if [ -f "${JAIL_VERSION_FILE}" ]; then
        JAIL_VERSION="$(${CAT_BIN} ${JAIL_VERSION_FILE})"
    fi
    debug "Got jail os version: ${JAIL_VERSION}"
    JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${JAIL_VERSION}-${SYSTEM_ARCH}"
    debug "Got jail source: ${JAIL_SOURCE}"
    JAIL_IP="${cyan}no-address${reset}"
    if [ -f "${JAIL_ADDRESS_FILE}" ]; then
        JAIL_IP="${cyan}$(${CAT_BIN} "${JAIL_ADDRESS_FILE}")${reset}"
    fi
    debug "Got jail IP: ${JAIL_IP}"
    HOSTNAMES=""
    for hostnfile in $(${FIND_BIN} ${JAIL_DOMAINS_DIR} -type f 2>${LOG_FILE}); do
        hostn="$(${CAT_BIN} ${hostnfile} | ${GREP_BIN} "local-zone:" | ${SED_BIN} 's/^.* "//;s/.".*//')"
        debug "hostn: ${hostn}"
        HOSTNAMES="*.${hostn} ${HOSTNAMES}"
    done
    debug "Got jail hostnames: ${HOSTNAMES}"
    JAIL_LOCAL_DOMAIN_CONF="${JAIL_DOMAINS_DIR}/local.conf"
}


check_cell_name () {
    GIVEN_NAME="${1}"
    NAME="$(${BASENAME_BIN} ${GIVEN_NAME})"
    if [ ! -d "${GIVEN_NAME}" ]; then
        error "Bad jail name: ${NAME}"
    fi
}


apply_attributes () {
    debug "Applying default attributes for jail: ${JAIL_NAME}"
    ${RCTL_BIN} -a jail:${JAIL_NAME}:memoryuse:deny=${DEFAULT_LIMIT_MAX_MEMORY}
    ${RCTL_BIN} -a jail:${JAIL_NAME}:vmemoryuse:deny=${DEFAULT_LIMIT_MAX_VMEMORY}
    ${RCTL_BIN} -a jail:${JAIL_NAME}:maxproc:deny=${DEFAULT_LIMIT_MAXPROC}
    ${RCTL_BIN} -a jail:${JAIL_NAME}:openfiles:deny=${DEFAULT_LIMIT_OPENFILES}
    ${RCTL_BIN} -a jail:${JAIL_NAME}:pseudoterminals:deny=${DEFAULT_LIMIT_MAXPTS}

    debug "Applying attributes from location: ${JAIL_ATTRIBUTES_DIR} for jail: ${JAIL_NAME}"
    ${MKDIR_BIN} -p "${JAIL_DOMAINS_DIR}" "${JAIL_ATTRIBUTES_DIR}" "${JAIL_WEBSERVER_CONF_DIR}" "${JAIL_LOGS_CONF_DIR}"
    cd ${JAIL_ATTRIBUTES_DIR}
    for attribute in $(${LS_BIN}); do
        value="$(${CAT_BIN} ${JAIL_ATTRIBUTES_DIR}/${attribute})"
        ${RCTL_BIN} -a jail:${JAIL_NAME}:${attribute}:deny=${value} >> ${LOG_FILE} 2>&1
        if [ "$?" = "0" ]; then
            note "Overriden attribute: ${attribute} with value: ${value}"
        else
            warn "Wrong attribute: ${red}${attribute}${reset}"
        fi
    done
}


update_sofin () {
    DESTINATION_CELL="${1}"
    if [ -d "${SOFIN_REPO}" ]; then
        note "Updating Sofin from official repository"
        cd ${SOFIN_REPO}
        ${GIT_BIN} stash save "sofin-local-changes-$(date +%F)" >> ${LOG_FILE} 2>&1
        GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${DEFAULT_SOFIN_REPO} >> ${LOG_FILE} 2>&1
        PREFIX="${JAIL_SOURCE}" bin/install >> ${LOG_FILE} 2>&1
        ${CP_BIN} "${SOFIN_REPO}/src/${CONF_NAME}" "${DESTINATION_CELL}/etc/"
    else
        note "Installing Sofin installed in system path"
        cd /var
        GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${DEFAULT_SOFIN_REPO} >> ${LOG_FILE} 2>&1
        PREFIX="${JAIL_SOURCE}" bin/install >> ${LOG_FILE} 2>&1
        ${CP_BIN} "${SOFIN_REPO}/src/${CONF_NAME}" "${DESTINATION_CELL}/etc/"
    fi
}


check_jail_address () {
    JAIL_ADDRESS_CHECK="${1}"
    for jail in $(${LS_BIN} ${DEFAULT_SENTRY_LOCATION}); do
        IP_FILE="${DEFAULT_SENTRY_LOCATION}/${jail}/${CELL_IP_ADDRESS_ATTRIBUTE}"
        if [ -f "${IP_FILE}" ]; then
            JAIL_ADDRESS_CHECK="$(${PRINTF_BIN} ${JAIL_ADDRESS_CHECK} | ${SED_BIN} 's/\/.*//')"
            ${CAT_BIN} ${IP_FILE} | ${SED_BIN} 's/\/.*//' | ${GREP_BIN} "${JAIL_ADDRESS_CHECK}" > /dev/null 2>&1
            if [ "$?" = "0" ]; then
                error "Address: ${JAIL_ADDRESS_CHECK} is already assigned to jail: ${jail}"
            fi
        fi
    done
}


check_jail_name () {
    GIVEN_NAME="${1}"
    for jail in $(${LS_BIN} ${DEFAULT_SENTRY_LOCATION}); do
        if [ "${jail}" = "${GIVEN_NAME}" ]; then
            error "Name: ${GIVEN_NAME} is already used"
        fi
    done
}


attributes_show () {
    # NOTE: resources, taken from FreeBSD "rctl" man page:
    note "Attributes with description:"
    ${PRINTF_BIN} "   ${cyan}pcpu${gray}: ${green}CPU percentage${reset}\n"
    ${PRINTF_BIN} "   ${cyan}cputime${gray}: ${green}CPU time, in seconds${reset}\n"
    ${PRINTF_BIN} "   ${cyan}datasize${gray}: ${green}data size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}stacksize${gray}: ${green}stack size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}coredumpsize${gray}: ${green}core dump size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}memoryuse${gray}: ${green}resident set size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}memorylocked${gray}: ${green}locked memory, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}maxproc${gray}: ${green}number of processes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}openfiles${gray}: ${green}file descriptor table size${reset}\n"
    ${PRINTF_BIN} "   ${cyan}vmemoryuse${gray}: ${green}address space limit, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}pseudoterminals${gray}: ${green}number of PTYs${reset}\n"
    ${PRINTF_BIN} "   ${cyan}swapuse${gray}: ${green}swap usage, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nthr${gray}: ${green}number of threads${reset}\n"
    ${PRINTF_BIN} "   ${cyan}msgqqueued${gray}: ${green}number of queued SysV messages${reset}\n"
    ${PRINTF_BIN} "   ${cyan}msgqsize${gray}: ${green}SysV message queue size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nmsgq${gray}: ${green}number of SysV message queues${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nsem${gray}: ${green}number of SysV semaphores${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nsemop${gray}: ${green}number of SysV semaphores modified in a single semop(2) call${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nshm${gray}: ${green}number of SysV shared memory segments${reset}\n"
    ${PRINTF_BIN} "   ${cyan}shmsize${gray}: ${green}SysV shared memory size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}wallclock${gray}: ${green}wallclock time, in seconds${reset}\n"
}


name_and_version () {
    note "ServeD GoVeRnor v${VERSION}"
}


mark_running () {
    ${PRINTF_BIN} "$(${DATE_BIN} +%F-%H%M%S)\n" > ${SENTRY}/${JAIL_RUNNING_INDICATOR}
}


jail_create () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} create myname IP-address[/netmask] ${green}[${cyan}fbsd-version net-interface${green}]${reset}"
        note
        note "Default values:"
        note "   netmask:"
        note "      - default internal network mask: ${cyan}${DEFAULT_NETMASK_INTERNAL}${reset}"
        note "      - default external network mask: ${cyan}${DEFAULT_NETMASK_EXTERNAL}${reset}"
        note "   fbsd-version: ${cyan}${DEFAULT_VERSION}${reset}"
        note "   net-interface: ${cyan}${DEFAULT_INTERFACE}${reset}"
        note
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail name given"
    fi
    check_jail_name ${GIVEN_NAME}
    JAIL_ADDRESS="${2}"
    if [ "${JAIL_ADDRESS}" = "" ]; then
        usage
        error "No ip given"
    fi
    check_jail_address ${JAIL_ADDRESS}

    JAIL_VERSION="${3}"
    if [ "${JAIL_VERSION}" = "" ]; then
        JAIL_VERSION="${DEFAULT_VERSION}"
    fi
    JAIL_INTERFACE="${4}"
    if [ "${JAIL_INTERFACE}" = "" ]; then
        JAIL_INTERFACE="${DEFAULT_INTERFACE}"
    fi

    set_values "${GIVEN_NAME}"
    note "Paste SSH2 public key of worker user below, followed by [enter] and [ctrl-d]"
    ${CAT_BIN} > /tmp/pubkey-${GIVEN_NAME}

    note "Creating ZFS dataset"
    ${ZFS_BIN} create -o mountpoint=${CELL} ${DEFAULT_ZPOOL}${CELL} >> ${LOG_FILE} 2>&1
    ${ZFS_BIN} set quota=${DEFAULT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}${CELL} >> ${LOG_FILE} 2>&1
    ${ZFS_BIN} create -o mountpoint=${SENTRY} ${DEFAULT_ZPOOL}${SENTRY} >> ${LOG_FILE} 2>&1
    ${ZFS_BIN} set quota=${DEFAULT_SENTRY_LIMIT} ${DEFAULT_ZPOOL}${SENTRY} >> ${LOG_FILE} 2>&1

    if [ -f "${JAIL_CONF_FILE}" ]; then
        warn "Jail already configured"
    else
        # format: 1.2.3.4 or 1.2.3.4/255.255.255.0
        ${PRINTF_BIN} "${JAIL_ADDRESS}" | ${GREP_BIN} '/' > /dev/null 2>&1
        if [ "$?" = "0" ]; then
            # if full address specified:
            FULL_ADDRESS="${JAIL_ADDRESS}"
        else
            # if specified only IP address, check which kind of address this is: internal/ external
            ${PRINTF_BIN} "${JAIL_ADDRESS}" | ${GREP_BIN} '^10.' > /dev/null 2>&1
            if [ "$?" = "0" ]; then
                FULL_ADDRESS="${JAIL_ADDRESS}/${DEFAULT_NETMASK_INTERNAL}"
            else
                FULL_ADDRESS="${JAIL_ADDRESS}/${DEFAULT_NETMASK_EXTERNAL}"
            fi
        fi
        note "Configuring jail for address: ${FULL_ADDRESS}"
        ${PRINTF_BIN} "
${JAIL_NAME} {
    name = \"${JAIL_NAME}\";
    host.hostname = \"${JAIL_NAME}\";
    ip4.addr = \"${FULL_ADDRESS}\";
    interface = ${JAIL_INTERFACE};
    path = \"${CELL}\";
    exec.start = \"/bin/sh /etc/rc\";
    exec.stop = \"/bin/sh /etc/rc.shutdown\";
    enforce_statfs = 2;
    allow.mount = 0;
    allow.mount.nullfs = 0;
    allow.mount.zfs = 0;
    allow.mount.tmpfs = 0;
    allow.raw_sockets = 1;
    allow.sysvipc = 1;
    mount.devfs;
    persist;
}
" >> ${JAIL_CONF_FILE}
    fi

    note "Mounting jail directories"
    for dir in bin lib libexec sbin usr; do
        ${MKDIR_BIN} -p "${CELL}/${dir}" >> ${LOG_FILE} 2>&1
        debug "Mounting ${JAIL_SOURCE}/${dir} => ${CELL}/${dir}"
        ${MOUNT_NULLFS} -o ro "${JAIL_SOURCE}/${dir}" "${CELL}/${dir}" >> ${LOG_FILE} 2>&1
    done

    note "Copying volatile part of jail"
    ${PRINTF_BIN} "${JAIL_VERSION}\n" > ${JAIL_VERSION_FILE}
    ${PRINTF_BIN} "${FULL_ADDRESS}\n" > ${JAIL_ADDRESS_FILE}
    ${CP_BIN} -R ${JAIL_SOURCE}/var ${CELL}

    note "Making required jail directories and user dir"
    ${MKDIR_BIN} -p "${JAIL_WEBSERVER_CONF_DIR}" \
                    "${JAIL_ATTRIBUTES_DIR}" \
                    "${JAIL_DOMAINS_DIR}" \
                    "${JAIL_LOGS_CONF_DIR}" \
                    "${CELL}/tmp" \
                    "${CELL}/dev" \
                    "${CELL}/Software" \
                    "${CELL}/SystemUsers" \
                    "${CELL}/User/.ssh" \
                    "${CELL}/User/SoftwareData/Nginx" \
                    "${CELL}/Public"
    ${CAT_BIN} "/tmp/pubkey-${GIVEN_NAME}" > ${CELL}/User/.ssh/authorized_keys
    ${RM_BIN} -f "/tmp/pubkey-${GIVEN_NAME}"

    note "Creating default user environment file"
    if [ -e "${CELL}/User/.zshrc" ]; then
        ${GREP_BIN} -R "sofin reload" "${CELL}/User/.zshrc" || ${PRINTF_BIN} "sofin reload" >> "${CELL}/User/.zshrc"
    else
        ${PRINTF_BIN} "sofin reload" >> "${CELL}/User/.zshrc"
    fi

    note "Building initial jail environment"
    ${CP_BIN} -R ${DEFAULT_JAIL_ETC_SOURCE} ${CELL}/etc
    ${SED_BIN} -i '' -e "s:__JAIL_NAME:${JAIL_NAME}.home:" ${CELL}/etc/rc.conf
    ${PRINTF_BIN} "export PATH=/Software/Mosh/exports:/Software/Nginx/exports:/Software/Zsh/exports:/Software/Thess/exports:/Software/Git/exports:/Software/Zsh/exports:/Software/Thess/exports:/Software/Git/exports:/bin:/usr/bin:/sbin:/usr/sbin\nexport MANPATH='/Software/Zsh/share/man:/Software/Thess/share/man:/Software/Git/share/man:/Software/Git/man:/Software/Zsh/share/man:/Software/Thess/share/man:/Software/Git/share/man:/Software/Git/man:/usr/share/man:/usr/share/openssl/man'\n" > ${CELL}/User/.profile

    update_sofin ${CELL}
    ${CP_BIN} -R /Software/Thess ${CELL}/Software
    ${CP_BIN} -R /Software/Zsh ${CELL}/Software
    ${CP_BIN} /etc/zshenv ${CELL}/etc
    ${CHOWN_BIN} -R ${DEFAULT_WORKER_UID} ${CELL}/User ${CELL}/Public ${CELL}/Software ${CELL}/tmp ${CELL}/var/tmp

    note "Updating system version"
    ${CP_BIN} -f /VERSION ${CELL}/VERSION

    note "Creating user loggers"
    for logger in messages production staging development; do
        ${MKFIFO_BIN} -m "a=-rwx,u=rw" "${CELL}/var/log/${logger}"
        ${CHOWN_BIN} ${DEFAULT_WORKER_UID} "${CELL}/var/log/${logger}"
        ${PRINTF_BIN} "
source s_${JAIL_NAME}_${logger} {
    pipe(\"${CELL}/var/log/${logger}\");
};
destination d_${JAIL_NAME}_${logger}_file {
    file(\"/var/log/${JAIL_NAME}-${logger}.log\" template(t_default_format));
};
log {
    source(s_${JAIL_NAME}_${logger});
    destination(d_${JAIL_NAME}_${logger}_file);
};
" > ${JAIL_LOGS_CONF_DIR}/${logger}.conf
    done

    note "Reloading syslog"
    service syslog-ng reload

    note "Launching jail: ${JAIL_NAME}"
    jail_start "${JAIL_NAME}"
    note "Setting up home domain"
    ${PRINTF_BIN} "
# Default home zone template:
local-zone: \"${JAIL_NAME}.home.\" redirect
local-data: \"${JAIL_NAME}.home. 10800 IN NS ns1.${JAIL_NAME}.home.\"
local-data: \"${JAIL_NAME}.home. 10800 IN NS ns2.${JAIL_NAME}.home.\"
local-data: \"${JAIL_NAME}.home. 1800  IN SRV 10 10 22 ${JAIL_NAME}.home.\"
local-data: \"${JAIL_NAME}.home. 10800 IN SOA ns1.${JAIL_NAME}.home. ns2.${JAIL_NAME}.home. $(${DATE_BIN} +%s) 3600 600 86400 3600\"
local-data: \"${JAIL_NAME}.home. 10800 IN A ${JAIL_IP}\"
local-data-ptr: \"${JAIL_IP} ${JAIL_NAME}.home\"
" > ${JAIL_LOCAL_DOMAIN_CONF}
    # note "Reloading Unbound"
    # service local_unbound configtest && service local_unbound restart
    # if [ "$?" = "0" ]; then
    #     note "Setting default DNS resolver for jail."
    #     if [ -f ${DEFAULT_HOST_ADDRESS} ]; then
    #         HOST_ADDRESS="$(${CAT_BIN} ${DEFAULT_HOST_ADDRESS})"
    #         ${PRINTF_BIN} "nameserver ${HOST_ADDRESS}\n" > ${CELL}/etc/resolv.conf
    #     fi
    # fi
}


jail_status () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} status jail-name${reset}"
    }
    GIVEN_NAME="${1}"
    VERBOSE="${2}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail name given"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    ${PRINTF_BIN} "Name: ${green}${JAIL_NAME}${reset}\n"
    ${PRINTF_BIN} "Hostnames: ${green}${HOSTNAMES}${reset}\n"
    ${PRINTF_BIN} "Interface: ${green}${DEFAULT_INTERFACE}${reset}\n"
    ${PRINTF_BIN} "IPv4: ${JAIL_IP}\n"
    ${PRINTF_BIN} "Status: ${JAIL_STATUS}\n"
    ${PRINTF_BIN} "OS version: ${green}${JAIL_VERSION}${reset}\n\n"
    if [ -d "${JAIL_ATTRIBUTES_DIR}" ]; then
        ${PRINTF_BIN} "Overriden attributes:\n"
        for i in $(${FIND_BIN} ${JAIL_ATTRIBUTES_DIR} -type f); do
            ${PRINTF_BIN} "${cyan}$(${BASENAME_BIN} ${i}): $(${CAT_BIN} ${i})${reset}\n"
        done
        ${PRINTF_BIN} "\n"
    fi
    ${PRINTF_BIN} "Live attributes:\n${cyan}$(${RCTL_BIN} -h jail:${JAIL_NAME} | ${SED_BIN} 's/jail:n1://g' | ${SED_BIN} 's/:deny=/: /g')${reset}\n"
    case ${VERBOSE} in
        v|-v|-verbose|verbose|more)
            ${PRINTF_BIN} "\nFull configuration:"
            ${PRINTF_BIN} "${cyan}$(${CAT_BIN} "${JAIL_CONF_FILE}")\n"
            ;;
    esac
}


jail_list () {
    cd ${DEFAULT_CELLS_LOCATION}
    for cell in $(${LS_BIN}); do
        cellname="$(${PRINTF_BIN} "${cell}" | ${AWK_BIN} '{print substr($1,0,29);}')" # first 29 chars visible in jls output
        ${PRINTF_BIN} "${cell}"
        JAIL_IP="${cyan}no-IP-assigned${reset}"
        if [ -f "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESS_ATTRIBUTE}" ]; then
            JAIL_IP="${cyan}$(${CAT_BIN} "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESS_ATTRIBUTE}")${reset}"
        fi
        ${JLS_BIN} -v | ${GREP_BIN} "${cellname}.*ACTIVE" >> ${LOG_FILE} 2>&1
        if [ "$?" = "0" ]; then
            ${PRINTF_BIN} " ${JAIL_IP} ${green}*on*${reset}"
        else
            ${PRINTF_BIN} " ${JAIL_IP} ${red}*off*${reset}"
        fi
        ${PRINTF_BIN} "\n"
    done
}


# Apply settings and start jail
jail_start () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} start jail-name${reset}"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to start"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    if [ -f "${JAIL_ADDRESS_FILE}" ]; then
        JAIL_IP="$(${CAT_BIN} ${JAIL_ADDRESS_FILE})"
        JAIL_NETMASK="${DEFAULT_NETMASK_INTERNAL}"
        # format: 1.2.3.4 or 1.2.3.4/255.255.255.0
        ${PRINTF_BIN} "${JAIL_IP}" | ${GREP_BIN} '/' > /dev/null 2>&1
        if [ "$?" = "0" ]; then
            # if full address specified:
            JAIL_NETMASK="$(${PRINTF_BIN} ${JAIL_IP} | ${SED_BIN} -e 's/.*\///')"
            JAIL_IP="$(${PRINTF_BIN} ${JAIL_IP} | ${SED_BIN} -e 's/\/.*//')"
        else
            # if specified only IP address, check which kind of address this is: internal/ external
            ${PRINTF_BIN} "${JAIL_IP}" | ${GREP_BIN} '^10.' > /dev/null 2>&1
            if [ "$?" = "0" ]; then
                JAIL_NETMASK="${DEFAULT_NETMASK_INTERNAL}"
            else
                JAIL_NETMASK="${DEFAULT_NETMASK_EXTERNAL}"
            fi
        fi
        note "Turning on jail IP: ${JAIL_IP}/${JAIL_NETMASK} on interface ${DEFAULT_INTERFACE}"
        ${IFCONFIG_BIN} ${DEFAULT_INTERFACE} "${JAIL_IP} netmask ${JAIL_NETMASK}" alias
    fi
    note "Mounting jail directories for system version: ${JAIL_VERSION}"
    for dir in bin lib libexec sbin usr; do
        debug "Mounting ${JAIL_SOURCE}/${dir} => ${CELL}/${dir}"
        ${MKDIR_BIN} -p "${CELL}/${dir}"
        ${MOUNT_NULLFS} -o ro "${JAIL_SOURCE}/${dir}" "${CELL}/${dir}" 2> ${LOG_FILE}
    done

    note "Mounting /Software/Git"
    ${MKDIR_BIN} -p "${CELL}/Software/Git"
    ${MOUNT_NULLFS} -o ro "/Software/Git" "${CELL}/Software/Git" >> ${LOG_FILE} 2>&1
    note "Mounting /Software/Mosh"
    ${MKDIR_BIN} -p "${CELL}/Software/Mosh"
    ${MOUNT_NULLFS} -o ro "/Software/Mosh" "${CELL}/Software/Mosh" >> ${LOG_FILE} 2>&1

    update_sofin ${CELL}
    note "Deploying jail: ${JAIL_NAME}"
    ${DEBUG_COMMAND} ${JAIL_BIN} -c -J ${JAIL_ID_FILE} -f ${JAIL_CONF_FILE} >> ${LOG_FILE} 2>&1
    if [ "$?" = "0" ]; then
        # TODO: web panel installation here, should be deployed using:
        # /Public/00000000-0000-0000-0000-000000000000.conf
        ${PRINTF_BIN} "[launched by ${USER} on $(${DATE_BIN} +%F-%H%M%S)]" > "${JAIL_STATUS_FILE}"
        note "Launching Service Spawner daemon"
        ${JEXEC_BIN} -U ${DEFAULT_JAIL_USER} ${JAIL_NAME} ${TOUCH_BIN} /User/SoftwareData/Nginx/.autostart
        ${JEXEC_BIN} -U ${DEFAULT_JAIL_USER} ${JAIL_NAME} ${IGNITER_INSTALL_BIN} >> ${LOG_FILE} 2>&1
        ${JEXEC_BIN} -U ${DEFAULT_JAIL_USER} ${JAIL_NAME} daemon ${SERVICE_SPAWNER_BIN}
        ${JEXEC_BIN} -U root ${JAIL_NAME} ${IGNITER_INSTALL_BIN} >> ${LOG_FILE} 2>&1
        ${JEXEC_BIN} -U root ${JAIL_NAME} daemon ${SERVICE_SPAWNER_BIN}
        apply_attributes
        mark_running
    else
        error "Jail launch failed. Look into log file: ${LOG_FILE}"
    fi
}


jail_stop () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} stop jail-name${reset}"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to stop"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    note "Terminating jail: ${JAIL_NAME}"
    ${DEBUG_EXEC_COMMAND} ${JAIL_BIN} -r "${JAIL_NAME}" >> ${LOG_FILE} 2>&1
    ${PRINTF_BIN} "[terminated by ${USER} on $(${DATE_BIN} +%F-%H-%M-%S)]" > "${JAIL_STATUS_FILE}"
    note "Unmounting jail directories"
    for dir in dev bin lib libexec sbin usr Software/Git Software/Mosh; do
        ${UMOUNT_BIN} -f "${CELL}/${dir}" >> ${LOG_FILE} 2>&1
    done
    if [ -f "${JAIL_ADDRESS_FILE}" ]; then
        JAIL_FULL_ADDRESS="$(${CAT_BIN} ${JAIL_ADDRESS_FILE})"
        JAIL_ADDRESS="$(${PRINTF_BIN} ${JAIL_FULL_ADDRESS} | ${SED_BIN} 's/\/.*//')"
        note "Turning off jail IP: ${JAIL_FULL_ADDRESS}"
        ${IFCONFIG_BIN} ${DEFAULT_INTERFACE} ${JAIL_ADDRESS} -alias >> ${LOG_FILE} 2>&1
        ${RM_BIN} -f ${SENTRY}/${JAIL_RUNNING_INDICATOR}
    fi
}


jail_set () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} set jail-name attribute value${reset}"
    }
    GIVEN_NAME="${1}"
    shift
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail name given"
    fi

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    for argument_pair in $@; do
        ATTRIBUTE="$(${PRINTF_BIN} "${argument_pair}\n" | ${AWK_BIN} '{split($0, a, "="); print a[1];}' )"
        JAIL_VALUE="$(${PRINTF_BIN} "${argument_pair}\n" | ${AWK_BIN} '{split($0, a, "="); print a[2];}')"
        debug "arg: ${ATTRIBUTE}, val: ${JAIL_VALUE} "
        note "Setting ${ATTRIBUTE}: ${JAIL_VALUE} for jail: ${JAIL_NAME}"
        ${PRINTF_BIN} "${JAIL_VALUE}\n" > "${JAIL_ATTRIBUTES_DIR}/${ATTRIBUTE}"
    done
    apply_attributes
}


jail_unset () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} unset jail-name attribute value${reset}"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail name given"
    fi
    shift

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    for jail_attribute in $*; do
        note "Unsetting ${jail_attribute} for jail: ${JAIL_NAME}"
        ${RM_BIN} -f "${JAIL_ATTRIBUTES_DIR}/${jail_attribute}"
        ${RCTL_BIN} -r jail:${JAIL_NAME}:${jail_attribute} >> ${LOG_FILE} 2>&1
    done
    apply_attributes
}


jail_login () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} login jail-name${reset}"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to enter"
    fi
    JAIL_LOGIN="${DEFAULT_JAIL_USER}"
    GIVEN_USER="${2}"
    if [ "${GIVEN_USER}" != "" ]; then
        JAIL_LOGIN="${GIVEN_USER}"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    ${JLS_BIN} -v | ${GREP_BIN} "$(${BASENAME_BIN} ${CELL}).*ACTIVE" >> ${LOG_FILE} 2>&1
    if [ "$?" = "0" ]; then
        note "Logging as: ${JAIL_LOGIN} to jail: ${JAIL_NAME}"
        ${DEBUG_EXEC_COMMAND} ${JEXEC_BIN} ${JAIL_NAME} login -f ${JAIL_LOGIN}
    else
        error "Start jail first"
    fi
}


jail_restart () {
    jail_stop $*
    jail_start $*
}


jail_destroy () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} destroy jail-name${reset}"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to destroy"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"

    note "Are you sure you want to destroy jail: $(${BASENAME_BIN} ${GIVEN_NAME}) with all data?"
    note "Type 'yes' to confirm"
    read ans
    if [ "${ans}" = "yes" ]; then
        jail_stop $*
        note "Destroying datasets: ${CELL} and ${SENTRY}"
        ${ZFS_BIN} destroy -f "${DEFAULT_ZPOOL}${SENTRY}" >> ${LOG_FILE} 2>&1
        ${ZFS_BIN} destroy -f "${DEFAULT_ZPOOL}${CELL}" >> ${LOG_FILE} 2>&1
        ${RM_BIN} -rf "${CELL}" >> ${LOG_FILE} 2>&1
        ${RM_BIN} -rf "${SENTRY}" >> ${LOG_FILE} 2>&1
        # service local_unbound configtest && service local_unbound restart
    else
        note "Jail: $(${BASENAME_BIN} ${GIVEN_NAME}) left intact"
    fi
}


case $1 in
    ver|v|version)
        shift
        name_and_version
        ;;

    create|c)
        shift
        jail_create $*
        ;;

    destroy)
        shift
        jail_destroy $*
        ;;

    status|s|stat)
        shift
        jail_status $*
        ;;

    start)
        shift
        jail_start $*
        ;;

    stop)
        shift
        jail_stop $*
        ;;

    restart)
        shift
        jail_restart $*
        ;;

    list|l|lst)
        shift
        jail_list $*
        ;;

    set)
        shift
        jail_set $*
        ;;

    unset)
        shift
        jail_unset $*
        ;;

    login)
        shift
        jail_login $*
        ;;

    attributes|attrs)
        attributes_show
        ;;

    boot)
        cd ${DEFAULT_SENTRY_LOCATION}
        for jail in *; do
            if [ -f "${DEFAULT_SENTRY_LOCATION}/${jail}/${JAIL_RUNNING_INDICATOR}" ]; then
                note "Booting ${jail}"
                $0 start ${jail}
                note "Booted ${jail}"
            else
                warn "Boot skipped: ${jail}"
            fi
        done
        ;;

    *)
        CMD="${GVR_SCRIPT_NAME}"
        note "Usage:"
        note "${CMD} command arg1 arg2 [...]"
        note
        note "List of commands:"
        note "attributes"
        note "boot"
        note "create"
        note "list"
        note "set"
        note "login"
        note "start"
        note "stop"
        note "restart"
        note "status [-v]"
        note "destroy"
        note
        note "Run '${CMD} [command]' without arguments to see detailed help about command params."
        ;;
esac


exit 0
